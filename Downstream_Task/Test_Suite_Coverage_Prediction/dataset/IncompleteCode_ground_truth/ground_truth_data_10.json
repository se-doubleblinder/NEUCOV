{
    "2445": {
        "0": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1520;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "1": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "2": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "3": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1747;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "4": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 466;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "5": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "6": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 264;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "7": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "8": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 989;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "9": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 574;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "10": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1619;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "11": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "12": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 287;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "13": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -63;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "14": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1602;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "15": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 137;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "16": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 340;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "17": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "18": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 139;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "19": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "20": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "21": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 208;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "22": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -42;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "23": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1551;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "24": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "25": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -53;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "26": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "27": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 653;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "28": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1959;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "29": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -56;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "30": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 104;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "31": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "32": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "33": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 681;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "34": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1321;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "35": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "36": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1232;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "37": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 403;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "38": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 423;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "39": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 247;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "40": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "41": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1681;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "42": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1660;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "43": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "44": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "45": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "46": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "47": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 782;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "48": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1276;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "49": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1903;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "50": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -42;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "51": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1396;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "52": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -9;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "53": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 428;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "54": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "55": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -28;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "56": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1718;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "57": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 379;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "58": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "59": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "60": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 199;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "61": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 607;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "62": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 107;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "63": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1113;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "64": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 411;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "65": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 359;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "66": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 240;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "67": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "68": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 166;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "69": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -84;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "70": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1442;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "71": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 498;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "72": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 418;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "73": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1566;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "74": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 50;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "75": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -4;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "76": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 372;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "77": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1920;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "78": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "79": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "80": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 475;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "81": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 176;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "82": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 775;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "83": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1463;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "84": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 489;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "85": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 700;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "86": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 184;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "87": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -63;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "88": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1742;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "89": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1494;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "90": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1949;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "91": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1832;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "92": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 82;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "93": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 189;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "94": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "95": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -29;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "96": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "97": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "98": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1918;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "99": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "100": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 278;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "101": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1063;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "102": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1772;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "103": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "104": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1507;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "105": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1721;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "106": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 449;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "107": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1342;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "108": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 651;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "109": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -10;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "110": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "111": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "112": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1400;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "113": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 67;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "114": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "115": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1342;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "116": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -35;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "117": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1096;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "118": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 242;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "119": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 452;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "120": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 394;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "121": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1224;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "122": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1251;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "123": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "124": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 924;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "125": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -36;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "126": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 497;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "127": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1534;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "128": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 561;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "129": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 452;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "130": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1318;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "131": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 263;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "132": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -50;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "133": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "134": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 435;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "135": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "136": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "137": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 545;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "138": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -51;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "139": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -41;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "140": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -17;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "141": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -7;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "142": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1956;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "143": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1282;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "144": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 864;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "145": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "146": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1219;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "147": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1992;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "148": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1375;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "149": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "150": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 255;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "151": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 512;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "152": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "153": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1071;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "154": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 413;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "155": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "156": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1443;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "157": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 776;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "158": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1939;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "159": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "160": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "161": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -42;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "162": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -94;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "163": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1405;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "164": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1861;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "165": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 947;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "166": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -59;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "167": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1971;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "168": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1997;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "169": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 992;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "170": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 497;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "171": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1918;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "172": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1746;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "173": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 851;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "174": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 184;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "175": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "176": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 945;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "177": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 105;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "178": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 461;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "179": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "180": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1367;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "181": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1289;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "182": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "183": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1619;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "184": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -51;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "185": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1560;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "186": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 288;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "187": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 614;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "188": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1538;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "189": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 744;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "190": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "191": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1835;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "192": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1534;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "193": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1312;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "194": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "195": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 920;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "196": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1609;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "197": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1474;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "198": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 450;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "199": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "200": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 23;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "201": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1370;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "202": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "203": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "204": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1794;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "205": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1417;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "206": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 392;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "207": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 263;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "208": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "209": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 398;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "210": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1557;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "211": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 659;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "212": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1385;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "213": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 82;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "214": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "215": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 712;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "216": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "217": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -9;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "218": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1925;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "219": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1013;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "220": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 985;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "221": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "222": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "223": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 630;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "224": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "225": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "226": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1896;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "227": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 682;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "228": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "229": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1873;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "230": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1104;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "231": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1674;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "232": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "233": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1636;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "234": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 748;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "235": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1747;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "236": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1251;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "237": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "238": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1906;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "239": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 403;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "240": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 600;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "241": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "242": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 684;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "243": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1839;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "244": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -94;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "245": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 22;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "246": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 261;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "247": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "248": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "249": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "250": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "251": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1482;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "252": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "253": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "254": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 659;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "255": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1169;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "256": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 209;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "257": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 587;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "258": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "259": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1750;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "260": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1689;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "261": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1091;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "262": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "263": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -66;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "264": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "265": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1041;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "266": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -36;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "267": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -9;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "268": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1640;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "269": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1975;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "270": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 172;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "271": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1998;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "272": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "273": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "274": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 900;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "275": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "276": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1381;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "277": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 665;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "278": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "279": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1107;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "280": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "281": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 881;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "282": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "283": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "284": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 485;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "285": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1806;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "286": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 664;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "287": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "288": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1646;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "289": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 680;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "290": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1739;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "291": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1612;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "292": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1984;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "293": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 555;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "294": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "295": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "296": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 157;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "297": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "298": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "299": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1223;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "300": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1858;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "301": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 418;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "302": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1968;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "303": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "304": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 845;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "305": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1990;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "306": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 546;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "307": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 561;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "308": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1376;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "309": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1966;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "310": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "311": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 362;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "312": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 498;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "313": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "314": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1696;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "315": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 468;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "316": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 229;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "317": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 686;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "318": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1136;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "319": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1751;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "320": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 79;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "321": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 546;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "322": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 855;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "323": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "324": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 570;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "325": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 95;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "326": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 106;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "327": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1951;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "328": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "329": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1910;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "330": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "331": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1511;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "332": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -84;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "333": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 673;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "334": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -44;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "335": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1078;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "336": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 359;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "337": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1353;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "338": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "339": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1025;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "340": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 361;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "341": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "342": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "343": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1719;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "344": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "345": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "346": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1399;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "347": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "348": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1538;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "349": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 263;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "350": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1993;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "351": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 445;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "352": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1042;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "353": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -59;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "354": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1376;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "355": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1301;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "356": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 367;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "357": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1600;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "358": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 473;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "359": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 76;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "360": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1760;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "361": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 375;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "362": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -35;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "363": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "364": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1697;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "365": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1934;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "366": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1128;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "367": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 373;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "368": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1344;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "369": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -61;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "370": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1581;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "371": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1983;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "372": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1717;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "373": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "374": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "375": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1607;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "376": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1365;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "377": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1578;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "378": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1783;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "379": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1282;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "380": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -50;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "381": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 672;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "382": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "383": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -13;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "384": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -51;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "385": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1934;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "386": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1067;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "387": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1747;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "388": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 439;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "389": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -56;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "390": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1984;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "391": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1897;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "392": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 458;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "393": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 261;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "394": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1834;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "395": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -9;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "396": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1979;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "397": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 69;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "398": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 266;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "399": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "400": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -65;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "401": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -41;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "402": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1054;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "403": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 284;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "404": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1921;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "405": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 425;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "406": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1975;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "407": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 138;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "408": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 255;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "409": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 703;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "410": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -36;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "411": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 2000;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "412": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1722;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "413": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 140;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "414": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 423;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "415": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1741;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "416": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -84;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "417": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1315;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "418": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "419": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "420": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 686;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "421": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "422": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 394;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "423": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1206;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "424": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "425": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "426": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 515;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "427": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1246;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "428": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 659;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "429": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 400;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "430": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 48;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "431": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1328;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "432": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1114;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "433": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1401;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "434": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 647;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "435": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1190;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "436": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -65;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "437": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1779;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "438": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -60;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "439": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1964;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "440": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 455;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "441": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 157;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "442": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "443": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1065;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "444": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "445": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 712;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "446": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "447": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 449;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "448": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "449": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 195;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "450": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 962;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "451": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1779;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "452": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1908;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "453": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 319;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "454": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 392;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "455": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "456": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 591;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "457": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1977;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "458": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "459": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 336;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "460": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "461": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 380;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "462": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 570;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "463": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1850;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "464": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1276;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "465": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1994;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "466": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "467": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1782;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "468": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "469": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1447;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "470": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 450;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "471": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "472": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 7;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "473": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1373;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "474": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1393;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "475": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "476": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 300;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "477": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "478": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 771;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "479": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 407;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "480": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1473;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "481": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 224;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "482": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "483": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1979;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "484": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "485": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 53;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "486": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "487": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 637;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "488": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "489": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 61;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "490": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1650;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "491": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 889;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "492": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "493": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 947;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "494": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 60;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "495": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1193;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "496": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "497": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 887;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "498": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 765;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "499": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 223;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "500": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -45;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "501": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1482;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "502": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1234;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "503": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 724;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "504": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1263;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "505": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 161;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "506": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -63;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "507": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 573;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "508": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1889;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "509": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1005;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "510": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1415;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "511": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 264;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "512": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 117;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "513": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 9;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "514": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "515": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "516": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "517": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "518": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "519": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 299;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "520": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 127;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "521": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 12;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "522": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 513;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "523": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1370;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "524": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 426;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "525": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1850;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "526": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "527": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 290;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "528": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "529": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "530": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1869;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "531": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1516;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "532": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 373;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "533": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -55;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "534": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "535": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "536": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1864;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "537": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1997;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "538": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 819;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "539": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 811;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "540": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -4;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "541": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 164;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "542": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1470;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "543": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 347;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "544": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1552;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "545": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "546": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1688;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "547": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 557;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "548": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "549": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1923;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "550": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "551": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "552": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "553": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1197;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "554": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 739;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "555": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1490;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "556": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1949;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "557": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1788;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "558": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 728;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "559": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "560": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -2;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "561": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 390;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "562": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 131;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "563": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 360;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "564": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "565": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1546;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "566": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 370;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "567": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1708;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "568": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 387;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "569": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 748;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "570": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1028;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "571": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 825;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "572": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1479;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "573": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 655;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "574": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "575": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 789;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "576": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 543;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "577": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1190;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "578": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "579": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "580": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1726;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "581": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1882;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "582": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 965;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "583": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 372;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "584": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 6;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "585": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "586": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "587": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1725;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "588": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1998;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "589": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1263;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "590": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1816;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "591": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "592": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 489;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "593": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 590;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "594": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1325;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "595": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 32;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "596": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 922;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "597": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 73;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "598": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 983;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "599": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1911;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "600": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 458;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "601": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 84;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "602": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 278;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "603": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 831;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "604": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 551;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "605": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 535;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "606": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1390;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "607": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 450;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "608": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "609": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "610": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 188;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "611": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "612": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 229;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "613": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1900;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "614": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "615": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "616": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1490;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "617": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 345;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "618": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 233;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "619": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 504;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "620": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 598;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "621": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 157;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "622": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1767;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "623": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1684;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "624": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -31;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "625": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -51;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "626": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 593;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "627": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -7;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "628": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "629": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1299;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "630": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 131;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "631": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 497;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "632": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 286;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "633": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 20;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "634": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 963;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "635": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 212;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "636": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1318;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "637": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1300;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "638": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1804;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "639": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1341;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "640": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 963;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "641": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -43;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "642": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -42;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "643": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "644": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1524;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "645": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1211;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "646": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 956;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "647": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -73;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "648": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "649": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1404;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "650": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "651": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 471;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "652": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1150;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "653": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1968;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "654": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 786;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "655": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 625;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "656": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "657": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1082;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "658": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 584;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "659": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -71;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "660": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 669;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "661": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "662": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1241;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "663": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 204;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "664": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -94;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "665": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 130;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "666": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1523;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "667": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1121;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "668": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "669": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1394;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "670": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 577;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "671": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 54;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "672": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 572;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "673": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1931;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "674": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1493;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "675": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 773;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "676": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "677": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "678": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 399;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "679": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "680": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1875;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "681": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "682": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "683": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1207;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "684": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "685": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "686": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 83;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "687": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1972;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "688": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -84;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "689": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 889;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "690": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1670;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "691": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1345;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "692": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1479;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "693": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1954;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "694": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "695": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "696": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 520;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "697": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1207;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "698": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "699": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1909;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "700": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1464;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "701": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "702": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "703": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1814;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "704": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1223;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "705": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1480;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "706": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1082;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "707": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 532;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "708": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "709": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 494;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "710": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "711": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1247;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "712": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 779;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "713": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "714": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "715": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 961;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "716": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "717": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1916;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "718": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 432;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "719": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1881;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "720": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 394;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "721": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "722": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "723": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "724": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 155;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "725": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1474;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "726": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "727": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -22;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "728": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 268;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "729": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -83;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "730": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "731": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 509;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "732": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 674;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "733": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "734": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1264;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "735": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 975;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "736": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "737": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "738": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 385;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "739": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "740": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 2000;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "741": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "742": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "743": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 236;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "744": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "745": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "746": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 17;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "747": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 971;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "748": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1380;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "749": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 632;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "750": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1114;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "751": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1993;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "752": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "753": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 672;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "754": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 719;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "755": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "756": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1879;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "757": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1020;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "758": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "759": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1849;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "760": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1936;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "761": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 606;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "762": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "763": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 724;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "764": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "765": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "766": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 766;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "767": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "768": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -42;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "769": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 401;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "770": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1139;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "771": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 365;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "772": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "773": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 352;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "774": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 234;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "775": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 987;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "776": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "777": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 245;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "778": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1367;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "779": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 583;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "780": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1224;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "781": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 252;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "782": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 595;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "783": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "784": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 931;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "785": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -87;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "786": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "787": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 31;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "788": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1219;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "789": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1851;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "790": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "791": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1996;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "792": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -40;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "793": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 152;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "794": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "795": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1578;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "796": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 646;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "797": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 976;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "798": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1895;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "799": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1032;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "800": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "801": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "802": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1903;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "803": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1826;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "804": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1197;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "805": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 377;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "806": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -70;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "807": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 412;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "808": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "809": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "810": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "811": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "812": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 269;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "813": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1875;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "814": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "815": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1141;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "816": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "817": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "818": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "819": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 229;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "820": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "821": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 404;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "822": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "823": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1561;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "824": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1875;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "825": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1537;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "826": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "827": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -75;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "828": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 715;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "829": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1904;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "830": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1730;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "831": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 862;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "832": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "833": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1795;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "834": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "835": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 409;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "836": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1916;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "837": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -37;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "838": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "839": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 705;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "840": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 609;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "841": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "842": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -23;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "843": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 413;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "844": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "845": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1528;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "846": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 70;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "847": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 876;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "848": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 491;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "849": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "850": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -37;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "851": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "852": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1368;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "853": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "854": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "855": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 166;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "856": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 307;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "857": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "858": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "859": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1450;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "860": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "861": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1799;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "862": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "863": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 575;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "864": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "865": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -36;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "866": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 207;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "867": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 306;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "868": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 225;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "869": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1660;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "870": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -35;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "871": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1972;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "872": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 873;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "873": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 166;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "874": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -97;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "875": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 189;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "876": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 795;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "877": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "878": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "879": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 947;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "880": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1733;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "881": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "882": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 831;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "883": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 408;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "884": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1202;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "885": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -94;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "886": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "887": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 788;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "888": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "889": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1309;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "890": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1066;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "891": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 471;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "892": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 220;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "893": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "894": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 600;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "895": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1832;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "896": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "897": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1982;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "898": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -60;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "899": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1193;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "900": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1998;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "901": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 548;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "902": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 471;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "903": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 22;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "904": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 166;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "905": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 372;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "906": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "907": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 612;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "908": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 814;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "909": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "910": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1879;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "911": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1896;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "912": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -63;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "913": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1791;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "914": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "915": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "916": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "917": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "918": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 548;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "919": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 907;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "920": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 594;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "921": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 960;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "922": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1632;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "923": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 513;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "924": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 218;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "925": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1717;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "926": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "927": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 17;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "928": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1503;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "929": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "930": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1498;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "931": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 450;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "932": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1778;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "933": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1092;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "934": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "935": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "936": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "937": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 370;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "938": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "939": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 133;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "940": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1939;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "941": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 790;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "942": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "943": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -64;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "944": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 166;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "945": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1070;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "946": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -22;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "947": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 502;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "948": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1698;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "949": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 847;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "950": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -80;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "951": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 70;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "952": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1070;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "953": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 81;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "954": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1409;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "955": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "956": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -9;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "957": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "958": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 559;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "959": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "960": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1721;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "961": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "962": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "963": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1599;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "964": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 123;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "965": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "966": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "967": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 51;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "968": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 242;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "969": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 509;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "970": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "971": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1666;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "972": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 310;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "973": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1414;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "974": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 359;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "975": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 847;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "976": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 881;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "977": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "978": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "979": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1049;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "980": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "981": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 519;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "982": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "983": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 546;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "984": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 424;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "985": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "986": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 878;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "987": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 257;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "988": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1961;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "989": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1887;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "990": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 245;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "991": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1626;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "992": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1654;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "993": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1181;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "994": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 360;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "995": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "996": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 187;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "997": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1781;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "998": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 198;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "999": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    "7912": {
        "0": {
            "code": "from math import ceil\nN = 1033;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "1": {
            "code": "from math import ceil\nN = 258;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "2": {
            "code": "from math import ceil\nN = -42;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "3": {
            "code": "from math import ceil\nN = 984;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "4": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "5": {
            "code": "from math import ceil\nN = 1371;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "6": {
            "code": "from math import ceil\nN = -13;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "7": {
            "code": "from math import ceil\nN = 34;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "8": {
            "code": "from math import ceil\nN = 399;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "9": {
            "code": "from math import ceil\nN = 1524;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "10": {
            "code": "from math import ceil\nN = -61;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "11": {
            "code": "from math import ceil\nN = 280;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "12": {
            "code": "from math import ceil\nN = 736;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "13": {
            "code": "from math import ceil\nN = 1947;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "14": {
            "code": "from math import ceil\nN = 370;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "15": {
            "code": "from math import ceil\nN = 1705;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "16": {
            "code": "from math import ceil\nN = 465;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "17": {
            "code": "from math import ceil\nN = -75;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "18": {
            "code": "from math import ceil\nN = 406;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "19": {
            "code": "from math import ceil\nN = 1889;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "20": {
            "code": "from math import ceil\nN = 451;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "21": {
            "code": "from math import ceil\nN = 2000;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "22": {
            "code": "from math import ceil\nN = 413;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "23": {
            "code": "from math import ceil\nN = 1548;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "24": {
            "code": "from math import ceil\nN = 1133;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "25": {
            "code": "from math import ceil\nN = 153;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "26": {
            "code": "from math import ceil\nN = 945;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "27": {
            "code": "from math import ceil\nN = -52;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "28": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "29": {
            "code": "from math import ceil\nN = 2000;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "30": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "31": {
            "code": "from math import ceil\nN = 77;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "32": {
            "code": "from math import ceil\nN = 1787;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "33": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "34": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "35": {
            "code": "from math import ceil\nN = 834;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "36": {
            "code": "from math import ceil\nN = -35;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "37": {
            "code": "from math import ceil\nN = 914;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "38": {
            "code": "from math import ceil\nN = 217;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "39": {
            "code": "from math import ceil\nN = 684;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "40": {
            "code": "from math import ceil\nN = 607;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "41": {
            "code": "from math import ceil\nN = 510;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "42": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "43": {
            "code": "from math import ceil\nN = 507;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "44": {
            "code": "from math import ceil\nN = 653;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "45": {
            "code": "from math import ceil\nN = 240;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "46": {
            "code": "from math import ceil\nN = 157;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "47": {
            "code": "from math import ceil\nN = 372;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "48": {
            "code": "from math import ceil\nN = -56;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "49": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "50": {
            "code": "from math import ceil\nN = 71;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "51": {
            "code": "from math import ceil\nN = 704;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "52": {
            "code": "from math import ceil\nN = 583;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "53": {
            "code": "from math import ceil\nN = 265;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "54": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "55": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "56": {
            "code": "from math import ceil\nN = 683;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "57": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "58": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "59": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "60": {
            "code": "from math import ceil\nN = 1966;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "61": {
            "code": "from math import ceil\nN = -7;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "62": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "63": {
            "code": "from math import ceil\nN = 361;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "64": {
            "code": "from math import ceil\nN = 1990;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "65": {
            "code": "from math import ceil\nN = 370;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "66": {
            "code": "from math import ceil\nN = -68;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "67": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "68": {
            "code": "from math import ceil\nN = 1504;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "69": {
            "code": "from math import ceil\nN = 536;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "70": {
            "code": "from math import ceil\nN = 307;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "71": {
            "code": "from math import ceil\nN = 955;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "72": {
            "code": "from math import ceil\nN = 1505;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "73": {
            "code": "from math import ceil\nN = 290;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "74": {
            "code": "from math import ceil\nN = 264;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "75": {
            "code": "from math import ceil\nN = 1101;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "76": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "77": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "78": {
            "code": "from math import ceil\nN = 329;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "79": {
            "code": "from math import ceil\nN = 1579;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "80": {
            "code": "from math import ceil\nN = 61;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "81": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "82": {
            "code": "from math import ceil\nN = 546;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "83": {
            "code": "from math import ceil\nN = -56;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "84": {
            "code": "from math import ceil\nN = 1366;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "85": {
            "code": "from math import ceil\nN = 1412;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "86": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "87": {
            "code": "from math import ceil\nN = 1947;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "88": {
            "code": "from math import ceil\nN = 97;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "89": {
            "code": "from math import ceil\nN = 1052;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "90": {
            "code": "from math import ceil\nN = 695;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "91": {
            "code": "from math import ceil\nN = 251;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "92": {
            "code": "from math import ceil\nN = 877;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "93": {
            "code": "from math import ceil\nN = 1846;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "94": {
            "code": "from math import ceil\nN = 365;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "95": {
            "code": "from math import ceil\nN = 1941;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "96": {
            "code": "from math import ceil\nN = 1717;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "97": {
            "code": "from math import ceil\nN = 1532;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "98": {
            "code": "from math import ceil\nN = 403;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "99": {
            "code": "from math import ceil\nN = 385;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "100": {
            "code": "from math import ceil\nN = 798;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "101": {
            "code": "from math import ceil\nN = 1572;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "102": {
            "code": "from math import ceil\nN = 258;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "103": {
            "code": "from math import ceil\nN = 928;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "104": {
            "code": "from math import ceil\nN = 1678;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "105": {
            "code": "from math import ceil\nN = 3;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "106": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "107": {
            "code": "from math import ceil\nN = 1731;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "108": {
            "code": "from math import ceil\nN = 983;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "109": {
            "code": "from math import ceil\nN = 1756;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "110": {
            "code": "from math import ceil\nN = 953;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "111": {
            "code": "from math import ceil\nN = 355;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "112": {
            "code": "from math import ceil\nN = 1619;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "113": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "114": {
            "code": "from math import ceil\nN = -61;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "115": {
            "code": "from math import ceil\nN = -26;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "116": {
            "code": "from math import ceil\nN = 1148;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "117": {
            "code": "from math import ceil\nN = 163;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "118": {
            "code": "from math import ceil\nN = -92;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "119": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "120": {
            "code": "from math import ceil\nN = 1725;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "121": {
            "code": "from math import ceil\nN = 5;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "122": {
            "code": "from math import ceil\nN = 1289;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "123": {
            "code": "from math import ceil\nN = 508;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "124": {
            "code": "from math import ceil\nN = 504;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "125": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "126": {
            "code": "from math import ceil\nN = 422;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "127": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "128": {
            "code": "from math import ceil\nN = 1640;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "129": {
            "code": "from math import ceil\nN = 905;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "130": {
            "code": "from math import ceil\nN = 332;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "131": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "132": {
            "code": "from math import ceil\nN = 1330;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "133": {
            "code": "from math import ceil\nN = 359;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "134": {
            "code": "from math import ceil\nN = 169;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "135": {
            "code": "from math import ceil\nN = -1;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "136": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "137": {
            "code": "from math import ceil\nN = 1836;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "138": {
            "code": "from math import ceil\nN = 355;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "139": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "140": {
            "code": "from math import ceil\nN = 869;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "141": {
            "code": "from math import ceil\nN = 1721;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "142": {
            "code": "from math import ceil\nN = 395;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "143": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "144": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "145": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "146": {
            "code": "from math import ceil\nN = -59;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "147": {
            "code": "from math import ceil\nN = -38;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "148": {
            "code": "from math import ceil\nN = 28;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "149": {
            "code": "from math import ceil\nN = 1801;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "150": {
            "code": "from math import ceil\nN = 1986;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "151": {
            "code": "from math import ceil\nN = 386;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "152": {
            "code": "from math import ceil\nN = -70;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "153": {
            "code": "from math import ceil\nN = 427;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "154": {
            "code": "from math import ceil\nN = 217;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "155": {
            "code": "from math import ceil\nN = -67;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "156": {
            "code": "from math import ceil\nN = 1747;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "157": {
            "code": "from math import ceil\nN = 1459;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "158": {
            "code": "from math import ceil\nN = -50;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "159": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "160": {
            "code": "from math import ceil\nN = 1787;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "161": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "162": {
            "code": "from math import ceil\nN = 1641;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "163": {
            "code": "from math import ceil\nN = 404;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "164": {
            "code": "from math import ceil\nN = 1992;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "165": {
            "code": "from math import ceil\nN = 1439;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "166": {
            "code": "from math import ceil\nN = -37;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "167": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "168": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "169": {
            "code": "from math import ceil\nN = 1155;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "170": {
            "code": "from math import ceil\nN = 1295;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "171": {
            "code": "from math import ceil\nN = 712;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "172": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "173": {
            "code": "from math import ceil\nN = 216;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "174": {
            "code": "from math import ceil\nN = 1015;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "175": {
            "code": "from math import ceil\nN = 135;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "176": {
            "code": "from math import ceil\nN = 1493;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "177": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "178": {
            "code": "from math import ceil\nN = 305;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "179": {
            "code": "from math import ceil\nN = 1887;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "180": {
            "code": "from math import ceil\nN = 505;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "181": {
            "code": "from math import ceil\nN = 1910;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "182": {
            "code": "from math import ceil\nN = -64;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "183": {
            "code": "from math import ceil\nN = 658;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "184": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "185": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "186": {
            "code": "from math import ceil\nN = -75;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "187": {
            "code": "from math import ceil\nN = -26;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "188": {
            "code": "from math import ceil\nN = 332;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "189": {
            "code": "from math import ceil\nN = 377;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "190": {
            "code": "from math import ceil\nN = 56;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "191": {
            "code": "from math import ceil\nN = 215;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "192": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "193": {
            "code": "from math import ceil\nN = 1505;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "194": {
            "code": "from math import ceil\nN = 1151;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "195": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "196": {
            "code": "from math import ceil\nN = 1712;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "197": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "198": {
            "code": "from math import ceil\nN = -39;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "199": {
            "code": "from math import ceil\nN = 402;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "200": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "201": {
            "code": "from math import ceil\nN = -27;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "202": {
            "code": "from math import ceil\nN = 611;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "203": {
            "code": "from math import ceil\nN = 1269;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "204": {
            "code": "from math import ceil\nN = 1990;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "205": {
            "code": "from math import ceil\nN = 1153;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "206": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "207": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "208": {
            "code": "from math import ceil\nN = 1470;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "209": {
            "code": "from math import ceil\nN = 283;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "210": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "211": {
            "code": "from math import ceil\nN = 1080;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "212": {
            "code": "from math import ceil\nN = 472;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "213": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "214": {
            "code": "from math import ceil\nN = 204;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "215": {
            "code": "from math import ceil\nN = 408;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "216": {
            "code": "from math import ceil\nN = 1942;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "217": {
            "code": "from math import ceil\nN = 1966;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "218": {
            "code": "from math import ceil\nN = 1746;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "219": {
            "code": "from math import ceil\nN = 310;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "220": {
            "code": "from math import ceil\nN = 1911;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "221": {
            "code": "from math import ceil\nN = 236;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "222": {
            "code": "from math import ceil\nN = 1316;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "223": {
            "code": "from math import ceil\nN = 902;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "224": {
            "code": "from math import ceil\nN = 261;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "225": {
            "code": "from math import ceil\nN = 1322;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "226": {
            "code": "from math import ceil\nN = 1746;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "227": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "228": {
            "code": "from math import ceil\nN = -99;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "229": {
            "code": "from math import ceil\nN = -9;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "230": {
            "code": "from math import ceil\nN = -92;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "231": {
            "code": "from math import ceil\nN = 466;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "232": {
            "code": "from math import ceil\nN = 1378;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "233": {
            "code": "from math import ceil\nN = 1661;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "234": {
            "code": "from math import ceil\nN = 1314;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "235": {
            "code": "from math import ceil\nN = 1560;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "236": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "237": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "238": {
            "code": "from math import ceil\nN = -57;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "239": {
            "code": "from math import ceil\nN = 1998;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "240": {
            "code": "from math import ceil\nN = 1711;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "241": {
            "code": "from math import ceil\nN = 454;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "242": {
            "code": "from math import ceil\nN = 1520;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "243": {
            "code": "from math import ceil\nN = 656;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "244": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "245": {
            "code": "from math import ceil\nN = 1128;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "246": {
            "code": "from math import ceil\nN = 1023;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "247": {
            "code": "from math import ceil\nN = 1337;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "248": {
            "code": "from math import ceil\nN = 547;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "249": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "250": {
            "code": "from math import ceil\nN = 1442;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "251": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "252": {
            "code": "from math import ceil\nN = 595;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "253": {
            "code": "from math import ceil\nN = 1995;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "254": {
            "code": "from math import ceil\nN = 495;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "255": {
            "code": "from math import ceil\nN = 229;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "256": {
            "code": "from math import ceil\nN = 413;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "257": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "258": {
            "code": "from math import ceil\nN = 745;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "259": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "260": {
            "code": "from math import ceil\nN = -82;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "261": {
            "code": "from math import ceil\nN = 685;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "262": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "263": {
            "code": "from math import ceil\nN = 1189;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "264": {
            "code": "from math import ceil\nN = 562;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "265": {
            "code": "from math import ceil\nN = 1975;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "266": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "267": {
            "code": "from math import ceil\nN = -17;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "268": {
            "code": "from math import ceil\nN = 418;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "269": {
            "code": "from math import ceil\nN = 407;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "270": {
            "code": "from math import ceil\nN = 1058;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "271": {
            "code": "from math import ceil\nN = 1081;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "272": {
            "code": "from math import ceil\nN = 37;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "273": {
            "code": "from math import ceil\nN = 192;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "274": {
            "code": "from math import ceil\nN = 256;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "275": {
            "code": "from math import ceil\nN = -72;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "276": {
            "code": "from math import ceil\nN = 198;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "277": {
            "code": "from math import ceil\nN = 1815;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "278": {
            "code": "from math import ceil\nN = 1281;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "279": {
            "code": "from math import ceil\nN = 537;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "280": {
            "code": "from math import ceil\nN = 1697;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "281": {
            "code": "from math import ceil\nN = 1889;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "282": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "283": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "284": {
            "code": "from math import ceil\nN = 209;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "285": {
            "code": "from math import ceil\nN = 1055;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "286": {
            "code": "from math import ceil\nN = 1241;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "287": {
            "code": "from math import ceil\nN = 1984;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "288": {
            "code": "from math import ceil\nN = 1035;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "289": {
            "code": "from math import ceil\nN = 1050;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "290": {
            "code": "from math import ceil\nN = 225;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "291": {
            "code": "from math import ceil\nN = 1545;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "292": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "293": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "294": {
            "code": "from math import ceil\nN = 1873;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "295": {
            "code": "from math import ceil\nN = -41;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "296": {
            "code": "from math import ceil\nN = 313;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "297": {
            "code": "from math import ceil\nN = 157;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "298": {
            "code": "from math import ceil\nN = 705;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "299": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "300": {
            "code": "from math import ceil\nN = 1653;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "301": {
            "code": "from math import ceil\nN = 743;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "302": {
            "code": "from math import ceil\nN = 1671;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "303": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "304": {
            "code": "from math import ceil\nN = 371;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "305": {
            "code": "from math import ceil\nN = 1500;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "306": {
            "code": "from math import ceil\nN = 412;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "307": {
            "code": "from math import ceil\nN = 391;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "308": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "309": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "310": {
            "code": "from math import ceil\nN = 217;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "311": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "312": {
            "code": "from math import ceil\nN = 812;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "313": {
            "code": "from math import ceil\nN = 1880;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "314": {
            "code": "from math import ceil\nN = -42;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "315": {
            "code": "from math import ceil\nN = -51;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "316": {
            "code": "from math import ceil\nN = -64;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "317": {
            "code": "from math import ceil\nN = 1062;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "318": {
            "code": "from math import ceil\nN = 682;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "319": {
            "code": "from math import ceil\nN = 7;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "320": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "321": {
            "code": "from math import ceil\nN = 240;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "322": {
            "code": "from math import ceil\nN = 1402;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "323": {
            "code": "from math import ceil\nN = 401;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "324": {
            "code": "from math import ceil\nN = 283;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "325": {
            "code": "from math import ceil\nN = 1943;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "326": {
            "code": "from math import ceil\nN = 1819;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "327": {
            "code": "from math import ceil\nN = 1255;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "328": {
            "code": "from math import ceil\nN = 670;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "329": {
            "code": "from math import ceil\nN = 431;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "330": {
            "code": "from math import ceil\nN = -54;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "331": {
            "code": "from math import ceil\nN = 1345;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "332": {
            "code": "from math import ceil\nN = 308;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "333": {
            "code": "from math import ceil\nN = 1959;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "334": {
            "code": "from math import ceil\nN = 217;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "335": {
            "code": "from math import ceil\nN = -17;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "336": {
            "code": "from math import ceil\nN = 1108;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "337": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "338": {
            "code": "from math import ceil\nN = 533;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "339": {
            "code": "from math import ceil\nN = 27;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "340": {
            "code": "from math import ceil\nN = 70;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "341": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "342": {
            "code": "from math import ceil\nN = 479;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "343": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "344": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "345": {
            "code": "from math import ceil\nN = 88;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "346": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "347": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "348": {
            "code": "from math import ceil\nN = 1646;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "349": {
            "code": "from math import ceil\nN = 1905;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "350": {
            "code": "from math import ceil\nN = 1796;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "351": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "352": {
            "code": "from math import ceil\nN = 754;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "353": {
            "code": "from math import ceil\nN = 1864;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "354": {
            "code": "from math import ceil\nN = 1947;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "355": {
            "code": "from math import ceil\nN = 104;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "356": {
            "code": "from math import ceil\nN = 177;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "357": {
            "code": "from math import ceil\nN = 79;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "358": {
            "code": "from math import ceil\nN = 613;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "359": {
            "code": "from math import ceil\nN = 969;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "360": {
            "code": "from math import ceil\nN = -55;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "361": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "362": {
            "code": "from math import ceil\nN = -55;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "363": {
            "code": "from math import ceil\nN = 837;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "364": {
            "code": "from math import ceil\nN = 1049;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "365": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "366": {
            "code": "from math import ceil\nN = 401;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "367": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "368": {
            "code": "from math import ceil\nN = 1881;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "369": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "370": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "371": {
            "code": "from math import ceil\nN = -86;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "372": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "373": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "374": {
            "code": "from math import ceil\nN = -97;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "375": {
            "code": "from math import ceil\nN = -41;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "376": {
            "code": "from math import ceil\nN = 219;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "377": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "378": {
            "code": "from math import ceil\nN = 217;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "379": {
            "code": "from math import ceil\nN = 977;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "380": {
            "code": "from math import ceil\nN = 1181;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "381": {
            "code": "from math import ceil\nN = -51;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "382": {
            "code": "from math import ceil\nN = 1946;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "383": {
            "code": "from math import ceil\nN = 1378;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "384": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "385": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "386": {
            "code": "from math import ceil\nN = 825;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "387": {
            "code": "from math import ceil\nN = 99;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "388": {
            "code": "from math import ceil\nN = 570;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "389": {
            "code": "from math import ceil\nN = 1020;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "390": {
            "code": "from math import ceil\nN = 1601;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "391": {
            "code": "from math import ceil\nN = 1398;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "392": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "393": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "394": {
            "code": "from math import ceil\nN = 1998;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "395": {
            "code": "from math import ceil\nN = 1508;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "396": {
            "code": "from math import ceil\nN = 16;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "397": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "398": {
            "code": "from math import ceil\nN = 390;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "399": {
            "code": "from math import ceil\nN = 1439;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "400": {
            "code": "from math import ceil\nN = 801;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "401": {
            "code": "from math import ceil\nN = 851;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "402": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "403": {
            "code": "from math import ceil\nN = 714;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "404": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "405": {
            "code": "from math import ceil\nN = 1331;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "406": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "407": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "408": {
            "code": "from math import ceil\nN = -11;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "409": {
            "code": "from math import ceil\nN = -27;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "410": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "411": {
            "code": "from math import ceil\nN = 435;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "412": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "413": {
            "code": "from math import ceil\nN = -57;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "414": {
            "code": "from math import ceil\nN = 845;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "415": {
            "code": "from math import ceil\nN = 155;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "416": {
            "code": "from math import ceil\nN = 7;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "417": {
            "code": "from math import ceil\nN = -85;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "418": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "419": {
            "code": "from math import ceil\nN = 415;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "420": {
            "code": "from math import ceil\nN = 474;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "421": {
            "code": "from math import ceil\nN = 307;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "422": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "423": {
            "code": "from math import ceil\nN = 263;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "424": {
            "code": "from math import ceil\nN = 217;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "425": {
            "code": "from math import ceil\nN = 1749;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "426": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "427": {
            "code": "from math import ceil\nN = 1097;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "428": {
            "code": "from math import ceil\nN = 488;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "429": {
            "code": "from math import ceil\nN = 1420;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "430": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "431": {
            "code": "from math import ceil\nN = -76;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "432": {
            "code": "from math import ceil\nN = 359;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "433": {
            "code": "from math import ceil\nN = 1850;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "434": {
            "code": "from math import ceil\nN = -79;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "435": {
            "code": "from math import ceil\nN = 1919;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "436": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "437": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "438": {
            "code": "from math import ceil\nN = 1820;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "439": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "440": {
            "code": "from math import ceil\nN = 412;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "441": {
            "code": "from math import ceil\nN = 1349;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "442": {
            "code": "from math import ceil\nN = 1276;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "443": {
            "code": "from math import ceil\nN = 820;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "444": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "445": {
            "code": "from math import ceil\nN = -37;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "446": {
            "code": "from math import ceil\nN = 784;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "447": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "448": {
            "code": "from math import ceil\nN = 1891;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "449": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "450": {
            "code": "from math import ceil\nN = 1175;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "451": {
            "code": "from math import ceil\nN = 1490;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "452": {
            "code": "from math import ceil\nN = 1941;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "453": {
            "code": "from math import ceil\nN = 1627;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "454": {
            "code": "from math import ceil\nN = 1959;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "455": {
            "code": "from math import ceil\nN = 414;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "456": {
            "code": "from math import ceil\nN = 1427;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "457": {
            "code": "from math import ceil\nN = 73;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "458": {
            "code": "from math import ceil\nN = 1556;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "459": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "460": {
            "code": "from math import ceil\nN = 85;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "461": {
            "code": "from math import ceil\nN = 208;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "462": {
            "code": "from math import ceil\nN = 1949;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "463": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "464": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "465": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "466": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "467": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "468": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "469": {
            "code": "from math import ceil\nN = 95;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "470": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "471": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "472": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "473": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "474": {
            "code": "from math import ceil\nN = 707;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "475": {
            "code": "from math import ceil\nN = 819;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "476": {
            "code": "from math import ceil\nN = -66;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "477": {
            "code": "from math import ceil\nN = 1238;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "478": {
            "code": "from math import ceil\nN = 217;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "479": {
            "code": "from math import ceil\nN = 883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "480": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "481": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "482": {
            "code": "from math import ceil\nN = 413;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "483": {
            "code": "from math import ceil\nN = -80;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "484": {
            "code": "from math import ceil\nN = 408;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "485": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "486": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "487": {
            "code": "from math import ceil\nN = 531;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "488": {
            "code": "from math import ceil\nN = 1224;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "489": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "490": {
            "code": "from math import ceil\nN = 1278;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "491": {
            "code": "from math import ceil\nN = 773;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "492": {
            "code": "from math import ceil\nN = 475;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "493": {
            "code": "from math import ceil\nN = 1548;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "494": {
            "code": "from math import ceil\nN = 1994;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "495": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "496": {
            "code": "from math import ceil\nN = 1375;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "497": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "498": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "499": {
            "code": "from math import ceil\nN = 364;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "500": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "501": {
            "code": "from math import ceil\nN = -54;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "502": {
            "code": "from math import ceil\nN = -63;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "503": {
            "code": "from math import ceil\nN = 421;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "504": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "505": {
            "code": "from math import ceil\nN = 404;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "506": {
            "code": "from math import ceil\nN = 1259;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "507": {
            "code": "from math import ceil\nN = -62;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "508": {
            "code": "from math import ceil\nN = -67;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "509": {
            "code": "from math import ceil\nN = 137;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "510": {
            "code": "from math import ceil\nN = 1167;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "511": {
            "code": "from math import ceil\nN = 739;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "512": {
            "code": "from math import ceil\nN = 170;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "513": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "514": {
            "code": "from math import ceil\nN = 1798;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "515": {
            "code": "from math import ceil\nN = 1734;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "516": {
            "code": "from math import ceil\nN = 1370;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "517": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "518": {
            "code": "from math import ceil\nN = 417;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "519": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "520": {
            "code": "from math import ceil\nN = 799;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "521": {
            "code": "from math import ceil\nN = 1767;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "522": {
            "code": "from math import ceil\nN = -82;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "523": {
            "code": "from math import ceil\nN = -85;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "524": {
            "code": "from math import ceil\nN = 1987;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "525": {
            "code": "from math import ceil\nN = -61;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "526": {
            "code": "from math import ceil\nN = 455;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "527": {
            "code": "from math import ceil\nN = 738;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "528": {
            "code": "from math import ceil\nN = 468;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "529": {
            "code": "from math import ceil\nN = 969;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "530": {
            "code": "from math import ceil\nN = -92;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "531": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "532": {
            "code": "from math import ceil\nN = 1633;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "533": {
            "code": "from math import ceil\nN = -11;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "534": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "535": {
            "code": "from math import ceil\nN = 229;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "536": {
            "code": "from math import ceil\nN = -99;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "537": {
            "code": "from math import ceil\nN = 278;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "538": {
            "code": "from math import ceil\nN = 1796;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "539": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "540": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "541": {
            "code": "from math import ceil\nN = 1863;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "542": {
            "code": "from math import ceil\nN = 1838;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "543": {
            "code": "from math import ceil\nN = 226;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "544": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "545": {
            "code": "from math import ceil\nN = -86;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "546": {
            "code": "from math import ceil\nN = -1;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "547": {
            "code": "from math import ceil\nN = 155;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "548": {
            "code": "from math import ceil\nN = 395;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "549": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "550": {
            "code": "from math import ceil\nN = 236;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "551": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "552": {
            "code": "from math import ceil\nN = 395;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "553": {
            "code": "from math import ceil\nN = 422;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "554": {
            "code": "from math import ceil\nN = 1951;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "555": {
            "code": "from math import ceil\nN = 743;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "556": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "557": {
            "code": "from math import ceil\nN = -53;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "558": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "559": {
            "code": "from math import ceil\nN = 1059;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "560": {
            "code": "from math import ceil\nN = 1007;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "561": {
            "code": "from math import ceil\nN = 27;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "562": {
            "code": "from math import ceil\nN = 537;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "563": {
            "code": "from math import ceil\nN = -100;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "564": {
            "code": "from math import ceil\nN = -81;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "565": {
            "code": "from math import ceil\nN = -61;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "566": {
            "code": "from math import ceil\nN = 1689;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "567": {
            "code": "from math import ceil\nN = -86;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "568": {
            "code": "from math import ceil\nN = 15;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "569": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "570": {
            "code": "from math import ceil\nN = -9;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "571": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "572": {
            "code": "from math import ceil\nN = -36;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "573": {
            "code": "from math import ceil\nN = -31;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "574": {
            "code": "from math import ceil\nN = 99;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "575": {
            "code": "from math import ceil\nN = 1909;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "576": {
            "code": "from math import ceil\nN = 639;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "577": {
            "code": "from math import ceil\nN = 767;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "578": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "579": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "580": {
            "code": "from math import ceil\nN = -26;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "581": {
            "code": "from math import ceil\nN = 1984;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "582": {
            "code": "from math import ceil\nN = 184;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "583": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "584": {
            "code": "from math import ceil\nN = 952;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "585": {
            "code": "from math import ceil\nN = -92;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "586": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "587": {
            "code": "from math import ceil\nN = 547;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "588": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "589": {
            "code": "from math import ceil\nN = 1867;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "590": {
            "code": "from math import ceil\nN = 1293;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "591": {
            "code": "from math import ceil\nN = -22;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "592": {
            "code": "from math import ceil\nN = 715;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "593": {
            "code": "from math import ceil\nN = -50;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "594": {
            "code": "from math import ceil\nN = 969;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "595": {
            "code": "from math import ceil\nN = 508;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "596": {
            "code": "from math import ceil\nN = 1873;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "597": {
            "code": "from math import ceil\nN = -4;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "598": {
            "code": "from math import ceil\nN = 450;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "599": {
            "code": "from math import ceil\nN = 853;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "600": {
            "code": "from math import ceil\nN = 99;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "601": {
            "code": "from math import ceil\nN = 217;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "602": {
            "code": "from math import ceil\nN = 8;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "603": {
            "code": "from math import ceil\nN = 422;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "604": {
            "code": "from math import ceil\nN = 809;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "605": {
            "code": "from math import ceil\nN = 1344;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "606": {
            "code": "from math import ceil\nN = 1836;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "607": {
            "code": "from math import ceil\nN = 1881;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "608": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "609": {
            "code": "from math import ceil\nN = 1562;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "610": {
            "code": "from math import ceil\nN = -27;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "611": {
            "code": "from math import ceil\nN = 199;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "612": {
            "code": "from math import ceil\nN = 692;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "613": {
            "code": "from math import ceil\nN = 837;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "614": {
            "code": "from math import ceil\nN = 1374;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "615": {
            "code": "from math import ceil\nN = 1793;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "616": {
            "code": "from math import ceil\nN = -20;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "617": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "618": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "619": {
            "code": "from math import ceil\nN = 593;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "620": {
            "code": "from math import ceil\nN = 612;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "621": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "622": {
            "code": "from math import ceil\nN = 153;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "623": {
            "code": "from math import ceil\nN = -30;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "624": {
            "code": "from math import ceil\nN = -35;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "625": {
            "code": "from math import ceil\nN = 1620;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "626": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "627": {
            "code": "from math import ceil\nN = 1326;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "628": {
            "code": "from math import ceil\nN = -56;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "629": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "630": {
            "code": "from math import ceil\nN = 1882;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "631": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "632": {
            "code": "from math import ceil\nN = 1516;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "633": {
            "code": "from math import ceil\nN = 760;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "634": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "635": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "636": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "637": {
            "code": "from math import ceil\nN = 1282;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "638": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "639": {
            "code": "from math import ceil\nN = 290;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "640": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "641": {
            "code": "from math import ceil\nN = -99;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "642": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "643": {
            "code": "from math import ceil\nN = -65;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "644": {
            "code": "from math import ceil\nN = -99;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "645": {
            "code": "from math import ceil\nN = -26;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "646": {
            "code": "from math import ceil\nN = -54;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "647": {
            "code": "from math import ceil\nN = 1888;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "648": {
            "code": "from math import ceil\nN = -4;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "649": {
            "code": "from math import ceil\nN = 489;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "650": {
            "code": "from math import ceil\nN = 1295;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "651": {
            "code": "from math import ceil\nN = 1694;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "652": {
            "code": "from math import ceil\nN = -56;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "653": {
            "code": "from math import ceil\nN = 867;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "654": {
            "code": "from math import ceil\nN = 420;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "655": {
            "code": "from math import ceil\nN = 305;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "656": {
            "code": "from math import ceil\nN = 1432;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "657": {
            "code": "from math import ceil\nN = 1655;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "658": {
            "code": "from math import ceil\nN = 609;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "659": {
            "code": "from math import ceil\nN = 1156;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "660": {
            "code": "from math import ceil\nN = 522;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "661": {
            "code": "from math import ceil\nN = 423;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "662": {
            "code": "from math import ceil\nN = -14;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "663": {
            "code": "from math import ceil\nN = -26;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "664": {
            "code": "from math import ceil\nN = 1663;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "665": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "666": {
            "code": "from math import ceil\nN = 1224;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "667": {
            "code": "from math import ceil\nN = -65;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "668": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "669": {
            "code": "from math import ceil\nN = 244;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "670": {
            "code": "from math import ceil\nN = 1454;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "671": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "672": {
            "code": "from math import ceil\nN = 1297;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "673": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "674": {
            "code": "from math import ceil\nN = 1179;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "675": {
            "code": "from math import ceil\nN = 123;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "676": {
            "code": "from math import ceil\nN = 1355;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "677": {
            "code": "from math import ceil\nN = 422;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "678": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "679": {
            "code": "from math import ceil\nN = 1538;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "680": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "681": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "682": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "683": {
            "code": "from math import ceil\nN = 1406;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "684": {
            "code": "from math import ceil\nN = 486;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "685": {
            "code": "from math import ceil\nN = 0;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "686": {
            "code": "from math import ceil\nN = 394;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "687": {
            "code": "from math import ceil\nN = 290;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "688": {
            "code": "from math import ceil\nN = 1096;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "689": {
            "code": "from math import ceil\nN = 384;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "690": {
            "code": "from math import ceil\nN = 1103;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "691": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "692": {
            "code": "from math import ceil\nN = 1789;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "693": {
            "code": "from math import ceil\nN = 385;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "694": {
            "code": "from math import ceil\nN = 1007;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "695": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "696": {
            "code": "from math import ceil\nN = 1925;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "697": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "698": {
            "code": "from math import ceil\nN = 1592;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "699": {
            "code": "from math import ceil\nN = -92;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "700": {
            "code": "from math import ceil\nN = 1986;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "701": {
            "code": "from math import ceil\nN = -55;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "702": {
            "code": "from math import ceil\nN = -58;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "703": {
            "code": "from math import ceil\nN = 2;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "704": {
            "code": "from math import ceil\nN = 1345;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "705": {
            "code": "from math import ceil\nN = 1358;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "706": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "707": {
            "code": "from math import ceil\nN = 1654;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "708": {
            "code": "from math import ceil\nN = -49;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "709": {
            "code": "from math import ceil\nN = 1370;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "710": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "711": {
            "code": "from math import ceil\nN = 492;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "712": {
            "code": "from math import ceil\nN = 286;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "713": {
            "code": "from math import ceil\nN = 1346;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "714": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "715": {
            "code": "from math import ceil\nN = 1737;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "716": {
            "code": "from math import ceil\nN = 1053;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "717": {
            "code": "from math import ceil\nN = 269;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "718": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "719": {
            "code": "from math import ceil\nN = 710;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "720": {
            "code": "from math import ceil\nN = 1078;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "721": {
            "code": "from math import ceil\nN = 832;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "722": {
            "code": "from math import ceil\nN = 819;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "723": {
            "code": "from math import ceil\nN = 1479;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "724": {
            "code": "from math import ceil\nN = -6;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "725": {
            "code": "from math import ceil\nN = 497;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "726": {
            "code": "from math import ceil\nN = 827;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "727": {
            "code": "from math import ceil\nN = 497;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "728": {
            "code": "from math import ceil\nN = 359;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "729": {
            "code": "from math import ceil\nN = 1381;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "730": {
            "code": "from math import ceil\nN = 9;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "731": {
            "code": "from math import ceil\nN = -64;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "732": {
            "code": "from math import ceil\nN = 1686;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "733": {
            "code": "from math import ceil\nN = 546;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "734": {
            "code": "from math import ceil\nN = 671;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "735": {
            "code": "from math import ceil\nN = 1570;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "736": {
            "code": "from math import ceil\nN = 236;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "737": {
            "code": "from math import ceil\nN = -41;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "738": {
            "code": "from math import ceil\nN = 741;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "739": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "740": {
            "code": "from math import ceil\nN = -97;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "741": {
            "code": "from math import ceil\nN = 724;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "742": {
            "code": "from math import ceil\nN = 1097;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "743": {
            "code": "from math import ceil\nN = 2;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "744": {
            "code": "from math import ceil\nN = 829;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "745": {
            "code": "from math import ceil\nN = -59;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "746": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "747": {
            "code": "from math import ceil\nN = 748;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "748": {
            "code": "from math import ceil\nN = 1647;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "749": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "750": {
            "code": "from math import ceil\nN = 157;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "751": {
            "code": "from math import ceil\nN = 1753;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "752": {
            "code": "from math import ceil\nN = -68;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "753": {
            "code": "from math import ceil\nN = 714;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "754": {
            "code": "from math import ceil\nN = 1756;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "755": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "756": {
            "code": "from math import ceil\nN = 500;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "757": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "758": {
            "code": "from math import ceil\nN = -46;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "759": {
            "code": "from math import ceil\nN = 1224;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "760": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "761": {
            "code": "from math import ceil\nN = 267;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "762": {
            "code": "from math import ceil\nN = 411;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "763": {
            "code": "from math import ceil\nN = -88;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "764": {
            "code": "from math import ceil\nN = 210;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "765": {
            "code": "from math import ceil\nN = 952;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "766": {
            "code": "from math import ceil\nN = 1224;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "767": {
            "code": "from math import ceil\nN = 600;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "768": {
            "code": "from math import ceil\nN = 363;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "769": {
            "code": "from math import ceil\nN = 1043;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "770": {
            "code": "from math import ceil\nN = 166;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "771": {
            "code": "from math import ceil\nN = 464;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "772": {
            "code": "from math import ceil\nN = 719;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "773": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "774": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "775": {
            "code": "from math import ceil\nN = 1497;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "776": {
            "code": "from math import ceil\nN = 1857;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "777": {
            "code": "from math import ceil\nN = 480;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "778": {
            "code": "from math import ceil\nN = -22;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "779": {
            "code": "from math import ceil\nN = 1005;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "780": {
            "code": "from math import ceil\nN = 1684;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "781": {
            "code": "from math import ceil\nN = 88;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "782": {
            "code": "from math import ceil\nN = -94;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "783": {
            "code": "from math import ceil\nN = 517;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "784": {
            "code": "from math import ceil\nN = 399;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "785": {
            "code": "from math import ceil\nN = 233;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "786": {
            "code": "from math import ceil\nN = 268;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "787": {
            "code": "from math import ceil\nN = 12;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "788": {
            "code": "from math import ceil\nN = 22;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "789": {
            "code": "from math import ceil\nN = -86;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "790": {
            "code": "from math import ceil\nN = -89;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "791": {
            "code": "from math import ceil\nN = 697;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "792": {
            "code": "from math import ceil\nN = 1017;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "793": {
            "code": "from math import ceil\nN = 1999;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "794": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "795": {
            "code": "from math import ceil\nN = 1785;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "796": {
            "code": "from math import ceil\nN = 520;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "797": {
            "code": "from math import ceil\nN = -60;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "798": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "799": {
            "code": "from math import ceil\nN = 435;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "800": {
            "code": "from math import ceil\nN = 6;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "801": {
            "code": "from math import ceil\nN = 1330;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "802": {
            "code": "from math import ceil\nN = 1034;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "803": {
            "code": "from math import ceil\nN = 288;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "804": {
            "code": "from math import ceil\nN = 466;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "805": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "806": {
            "code": "from math import ceil\nN = 722;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "807": {
            "code": "from math import ceil\nN = -80;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "808": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "809": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "810": {
            "code": "from math import ceil\nN = 402;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "811": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "812": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "813": {
            "code": "from math import ceil\nN = -47;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "814": {
            "code": "from math import ceil\nN = 542;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "815": {
            "code": "from math import ceil\nN = 84;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "816": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "817": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "818": {
            "code": "from math import ceil\nN = 1822;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "819": {
            "code": "from math import ceil\nN = 594;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "820": {
            "code": "from math import ceil\nN = 870;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "821": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "822": {
            "code": "from math import ceil\nN = -37;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "823": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "824": {
            "code": "from math import ceil\nN = 31;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "825": {
            "code": "from math import ceil\nN = 1496;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "826": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "827": {
            "code": "from math import ceil\nN = 248;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "828": {
            "code": "from math import ceil\nN = 1213;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "829": {
            "code": "from math import ceil\nN = 6;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "830": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "831": {
            "code": "from math import ceil\nN = 422;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "832": {
            "code": "from math import ceil\nN = 1728;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "833": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "834": {
            "code": "from math import ceil\nN = 1124;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "835": {
            "code": "from math import ceil\nN = 247;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "836": {
            "code": "from math import ceil\nN = -76;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "837": {
            "code": "from math import ceil\nN = -99;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "838": {
            "code": "from math import ceil\nN = 1598;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "839": {
            "code": "from math import ceil\nN = 1053;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "840": {
            "code": "from math import ceil\nN = 985;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "841": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "842": {
            "code": "from math import ceil\nN = 930;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "843": {
            "code": "from math import ceil\nN = 1508;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "844": {
            "code": "from math import ceil\nN = -22;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "845": {
            "code": "from math import ceil\nN = -86;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "846": {
            "code": "from math import ceil\nN = -46;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "847": {
            "code": "from math import ceil\nN = -37;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "848": {
            "code": "from math import ceil\nN = -95;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "849": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "850": {
            "code": "from math import ceil\nN = 1269;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "851": {
            "code": "from math import ceil\nN = -12;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "852": {
            "code": "from math import ceil\nN = 1958;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "853": {
            "code": "from math import ceil\nN = 361;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "854": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "855": {
            "code": "from math import ceil\nN = -40;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "856": {
            "code": "from math import ceil\nN = -92;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "857": {
            "code": "from math import ceil\nN = 423;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "858": {
            "code": "from math import ceil\nN = -52;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "859": {
            "code": "from math import ceil\nN = 1916;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "860": {
            "code": "from math import ceil\nN = -68;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "861": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "862": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "863": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "864": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "865": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "866": {
            "code": "from math import ceil\nN = 737;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "867": {
            "code": "from math import ceil\nN = -39;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "868": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "869": {
            "code": "from math import ceil\nN = 1849;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "870": {
            "code": "from math import ceil\nN = 583;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "871": {
            "code": "from math import ceil\nN = 1688;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "872": {
            "code": "from math import ceil\nN = 60;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "873": {
            "code": "from math import ceil\nN = 925;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "874": {
            "code": "from math import ceil\nN = 116;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "875": {
            "code": "from math import ceil\nN = 1987;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "876": {
            "code": "from math import ceil\nN = 1755;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "877": {
            "code": "from math import ceil\nN = 1287;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "878": {
            "code": "from math import ceil\nN = 1883;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "879": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "880": {
            "code": "from math import ceil\nN = 1711;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "881": {
            "code": "from math import ceil\nN = 320;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "882": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "883": {
            "code": "from math import ceil\nN = 634;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "884": {
            "code": "from math import ceil\nN = 1319;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "885": {
            "code": "from math import ceil\nN = 450;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "886": {
            "code": "from math import ceil\nN = -41;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "887": {
            "code": "from math import ceil\nN = -74;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "888": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "889": {
            "code": "from math import ceil\nN = 1860;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "890": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "891": {
            "code": "from math import ceil\nN = 306;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "892": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "893": {
            "code": "from math import ceil\nN = 857;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "894": {
            "code": "from math import ceil\nN = -4;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "895": {
            "code": "from math import ceil\nN = 1964;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "896": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "897": {
            "code": "from math import ceil\nN = 1898;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "898": {
            "code": "from math import ceil\nN = -92;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "899": {
            "code": "from math import ceil\nN = -52;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "900": {
            "code": "from math import ceil\nN = 907;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "901": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "902": {
            "code": "from math import ceil\nN = 1502;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "903": {
            "code": "from math import ceil\nN = 2000;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "904": {
            "code": "from math import ceil\nN = 1389;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "905": {
            "code": "from math import ceil\nN = 360;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "906": {
            "code": "from math import ceil\nN = -100;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "907": {
            "code": "from math import ceil\nN = 1325;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "908": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "909": {
            "code": "from math import ceil\nN = 1816;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "910": {
            "code": "from math import ceil\nN = 1296;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "911": {
            "code": "from math import ceil\nN = 1874;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "912": {
            "code": "from math import ceil\nN = 767;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "913": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "914": {
            "code": "from math import ceil\nN = 281;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "915": {
            "code": "from math import ceil\nN = 323;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "916": {
            "code": "from math import ceil\nN = 604;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "917": {
            "code": "from math import ceil\nN = -54;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "918": {
            "code": "from math import ceil\nN = 369;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "919": {
            "code": "from math import ceil\nN = 403;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "920": {
            "code": "from math import ceil\nN = -67;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "921": {
            "code": "from math import ceil\nN = 1992;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "922": {
            "code": "from math import ceil\nN = 905;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "923": {
            "code": "from math import ceil\nN = 168;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "924": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "925": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "926": {
            "code": "from math import ceil\nN = 1968;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "927": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "928": {
            "code": "from math import ceil\nN = 66;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "929": {
            "code": "from math import ceil\nN = 2000;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "930": {
            "code": "from math import ceil\nN = 1982;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "931": {
            "code": "from math import ceil\nN = 713;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "932": {
            "code": "from math import ceil\nN = -26;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "933": {
            "code": "from math import ceil\nN = 26;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "934": {
            "code": "from math import ceil\nN = 1631;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "935": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "936": {
            "code": "from math import ceil\nN = 210;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "937": {
            "code": "from math import ceil\nN = 1270;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "938": {
            "code": "from math import ceil\nN = 304;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "939": {
            "code": "from math import ceil\nN = 13;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "940": {
            "code": "from math import ceil\nN = 1928;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "941": {
            "code": "from math import ceil\nN = 1747;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "942": {
            "code": "from math import ceil\nN = 1925;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "943": {
            "code": "from math import ceil\nN = 1957;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "944": {
            "code": "from math import ceil\nN = 166;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "945": {
            "code": "from math import ceil\nN = 1234;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "946": {
            "code": "from math import ceil\nN = 683;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "947": {
            "code": "from math import ceil\nN = -26;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "948": {
            "code": "from math import ceil\nN = -41;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "949": {
            "code": "from math import ceil\nN = 1730;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "950": {
            "code": "from math import ceil\nN = 1021;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "951": {
            "code": "from math import ceil\nN = -98;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "952": {
            "code": "from math import ceil\nN = 1930;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "953": {
            "code": "from math import ceil\nN = 1796;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "954": {
            "code": "from math import ceil\nN = 997;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "955": {
            "code": "from math import ceil\nN = 433;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "956": {
            "code": "from math import ceil\nN = 189;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "957": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "958": {
            "code": "from math import ceil\nN = 10;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "959": {
            "code": "from math import ceil\nN = 1329;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "960": {
            "code": "from math import ceil\nN = 1050;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "961": {
            "code": "from math import ceil\nN = 1464;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "962": {
            "code": "from math import ceil\nN = 1909;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "963": {
            "code": "from math import ceil\nN = -99;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "964": {
            "code": "from math import ceil\nN = 969;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "965": {
            "code": "from math import ceil\nN = 335;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "966": {
            "code": "from math import ceil\nN = 575;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "967": {
            "code": "from math import ceil\nN = -64;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "968": {
            "code": "from math import ceil\nN = 9;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "969": {
            "code": "from math import ceil\nN = 1054;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "970": {
            "code": "from math import ceil\nN = 1072;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "971": {
            "code": "from math import ceil\nN = 804;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "972": {
            "code": "from math import ceil\nN = 1709;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "973": {
            "code": "from math import ceil\nN = 83;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "974": {
            "code": "from math import ceil\nN = 1304;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "975": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "976": {
            "code": "from math import ceil\nN = 157;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "977": {
            "code": "from math import ceil\nN = -73;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "978": {
            "code": "from math import ceil\nN = 828;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "979": {
            "code": "from math import ceil\nN = 2000;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "980": {
            "code": "from math import ceil\nN = 563;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "981": {
            "code": "from math import ceil\nN = 1749;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "982": {
            "code": "from math import ceil\nN = 952;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "983": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "984": {
            "code": "from math import ceil\nN = 420;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "985": {
            "code": "from math import ceil\nN = 1876;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "986": {
            "code": "from math import ceil\nN = 570;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "987": {
            "code": "from math import ceil\nN = 1470;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "988": {
            "code": "from math import ceil\nN = 1504;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "989": {
            "code": "from math import ceil\nN = 585;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "990": {
            "code": "from math import ceil\nN = 251;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "991": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "992": {
            "code": "from math import ceil\nN = 1168;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "993": {
            "code": "from math import ceil\nN = 636;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "994": {
            "code": "from math import ceil\nN = 1436;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "995": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "996": {
            "code": "from math import ceil\nN = 722;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "997": {
            "code": "from math import ceil\nN = -90;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                1
            ]
        },
        "998": {
            "code": "from math import ceil\nN = 207;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "999": {
            "code": "from math import ceil\nN = 1753;K = 3\nA = [1, 2, 3]\nif N == K:\n    print(1)\nelif (N-1)%(K-1) == 0:\n    print((N-1)//(K-1))\nelif K == 2:\n    print(N-1)\nelse:\n    ans = ceil(N/(K-1))\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "7931": {
        "0": {
            "code": "import math\nN = 1984;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "1": {
            "code": "import math\nN = 1650;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "2": {
            "code": "import math\nN = 1734;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "3": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "4": {
            "code": "import math\nN = 197;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "5": {
            "code": "import math\nN = 999;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "6": {
            "code": "import math\nN = 1849;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "7": {
            "code": "import math\nN = 925;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "8": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "9": {
            "code": "import math\nN = 1827;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "10": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "11": {
            "code": "import math\nN = 1810;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "12": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "13": {
            "code": "import math\nN = 1752;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "14": {
            "code": "import math\nN = 2000;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "15": {
            "code": "import math\nN = 1095;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "16": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "17": {
            "code": "import math\nN = -61;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "18": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "19": {
            "code": "import math\nN = 1103;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "20": {
            "code": "import math\nN = 1047;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "21": {
            "code": "import math\nN = 1107;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "22": {
            "code": "import math\nN = 413;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "23": {
            "code": "import math\nN = -21;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "24": {
            "code": "import math\nN = 415;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "25": {
            "code": "import math\nN = 1298;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "26": {
            "code": "import math\nN = 1401;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "27": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "28": {
            "code": "import math\nN = 1877;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "29": {
            "code": "import math\nN = 1472;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "30": {
            "code": "import math\nN = 398;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "31": {
            "code": "import math\nN = 295;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "32": {
            "code": "import math\nN = 275;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "33": {
            "code": "import math\nN = 1632;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "34": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "35": {
            "code": "import math\nN = 818;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "36": {
            "code": "import math\nN = 1725;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "37": {
            "code": "import math\nN = 793;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "38": {
            "code": "import math\nN = 1143;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "39": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "40": {
            "code": "import math\nN = 1159;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "41": {
            "code": "import math\nN = 963;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "42": {
            "code": "import math\nN = 111;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "43": {
            "code": "import math\nN = 594;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "44": {
            "code": "import math\nN = 597;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "45": {
            "code": "import math\nN = 249;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "46": {
            "code": "import math\nN = 197;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "47": {
            "code": "import math\nN = -44;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "48": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "49": {
            "code": "import math\nN = 693;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "50": {
            "code": "import math\nN = 64;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "51": {
            "code": "import math\nN = 1277;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "52": {
            "code": "import math\nN = 535;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "53": {
            "code": "import math\nN = -58;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "54": {
            "code": "import math\nN = 376;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "55": {
            "code": "import math\nN = 577;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "56": {
            "code": "import math\nN = 820;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "57": {
            "code": "import math\nN = 1339;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "58": {
            "code": "import math\nN = 2000;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "59": {
            "code": "import math\nN = 1758;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "60": {
            "code": "import math\nN = 1907;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "61": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "62": {
            "code": "import math\nN = -45;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "63": {
            "code": "import math\nN = 1539;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "64": {
            "code": "import math\nN = -89;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "65": {
            "code": "import math\nN = 405;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "66": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "67": {
            "code": "import math\nN = 1376;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "68": {
            "code": "import math\nN = 373;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "69": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "70": {
            "code": "import math\nN = 1988;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "71": {
            "code": "import math\nN = -4;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "72": {
            "code": "import math\nN = 667;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "73": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "74": {
            "code": "import math\nN = -92;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "75": {
            "code": "import math\nN = 946;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "76": {
            "code": "import math\nN = 1197;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "77": {
            "code": "import math\nN = 1674;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "78": {
            "code": "import math\nN = -29;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "79": {
            "code": "import math\nN = 1087;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "80": {
            "code": "import math\nN = -54;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "81": {
            "code": "import math\nN = 1802;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "82": {
            "code": "import math\nN = 535;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "83": {
            "code": "import math\nN = 30;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "84": {
            "code": "import math\nN = 1861;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "85": {
            "code": "import math\nN = 1087;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "86": {
            "code": "import math\nN = -66;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "87": {
            "code": "import math\nN = -92;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "88": {
            "code": "import math\nN = 1829;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "89": {
            "code": "import math\nN = 360;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "90": {
            "code": "import math\nN = 60;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "91": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "92": {
            "code": "import math\nN = 1490;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "93": {
            "code": "import math\nN = -58;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "94": {
            "code": "import math\nN = 1229;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "95": {
            "code": "import math\nN = -75;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "96": {
            "code": "import math\nN = -13;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "97": {
            "code": "import math\nN = 548;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "98": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "99": {
            "code": "import math\nN = 1693;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "100": {
            "code": "import math\nN = 658;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "101": {
            "code": "import math\nN = 1070;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "102": {
            "code": "import math\nN = 507;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "103": {
            "code": "import math\nN = 960;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "104": {
            "code": "import math\nN = -89;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "105": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "106": {
            "code": "import math\nN = 847;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "107": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "108": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "109": {
            "code": "import math\nN = 754;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "110": {
            "code": "import math\nN = 1199;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "111": {
            "code": "import math\nN = 1798;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "112": {
            "code": "import math\nN = -92;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "113": {
            "code": "import math\nN = 1728;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "114": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "115": {
            "code": "import math\nN = -52;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "116": {
            "code": "import math\nN = 1180;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "117": {
            "code": "import math\nN = 562;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "118": {
            "code": "import math\nN = 91;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "119": {
            "code": "import math\nN = 68;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "120": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "121": {
            "code": "import math\nN = 1363;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "122": {
            "code": "import math\nN = -94;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "123": {
            "code": "import math\nN = 1501;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "124": {
            "code": "import math\nN = -81;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "125": {
            "code": "import math\nN = 437;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "126": {
            "code": "import math\nN = 675;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "127": {
            "code": "import math\nN = 1109;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "128": {
            "code": "import math\nN = -73;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "129": {
            "code": "import math\nN = 803;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "130": {
            "code": "import math\nN = -74;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "131": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "132": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "133": {
            "code": "import math\nN = 220;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "134": {
            "code": "import math\nN = 587;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "135": {
            "code": "import math\nN = 1678;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "136": {
            "code": "import math\nN = 1359;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "137": {
            "code": "import math\nN = -4;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "138": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "139": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "140": {
            "code": "import math\nN = -26;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "141": {
            "code": "import math\nN = 603;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "142": {
            "code": "import math\nN = 52;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "143": {
            "code": "import math\nN = -98;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "144": {
            "code": "import math\nN = 468;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "145": {
            "code": "import math\nN = 433;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "146": {
            "code": "import math\nN = -100;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "147": {
            "code": "import math\nN = 1963;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "148": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "149": {
            "code": "import math\nN = 1265;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "150": {
            "code": "import math\nN = 1860;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "151": {
            "code": "import math\nN = 238;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "152": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "153": {
            "code": "import math\nN = 1972;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "154": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "155": {
            "code": "import math\nN = 234;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "156": {
            "code": "import math\nN = 1309;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "157": {
            "code": "import math\nN = 1405;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "158": {
            "code": "import math\nN = 1148;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "159": {
            "code": "import math\nN = -35;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "160": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "161": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "162": {
            "code": "import math\nN = 1230;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "163": {
            "code": "import math\nN = -39;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "164": {
            "code": "import math\nN = 1568;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "165": {
            "code": "import math\nN = 1138;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "166": {
            "code": "import math\nN = 61;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "167": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "168": {
            "code": "import math\nN = 418;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "169": {
            "code": "import math\nN = 1937;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "170": {
            "code": "import math\nN = 384;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "171": {
            "code": "import math\nN = 418;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "172": {
            "code": "import math\nN = 1765;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "173": {
            "code": "import math\nN = -24;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "174": {
            "code": "import math\nN = 1042;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "175": {
            "code": "import math\nN = 961;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "176": {
            "code": "import math\nN = 298;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "177": {
            "code": "import math\nN = -68;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "178": {
            "code": "import math\nN = 345;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "179": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "180": {
            "code": "import math\nN = 452;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "181": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "182": {
            "code": "import math\nN = -79;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "183": {
            "code": "import math\nN = -100;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "184": {
            "code": "import math\nN = 130;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "185": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "186": {
            "code": "import math\nN = 381;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "187": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "188": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "189": {
            "code": "import math\nN = 493;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "190": {
            "code": "import math\nN = 1661;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "191": {
            "code": "import math\nN = 406;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "192": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "193": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "194": {
            "code": "import math\nN = 1397;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "195": {
            "code": "import math\nN = 1802;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "196": {
            "code": "import math\nN = 574;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "197": {
            "code": "import math\nN = -43;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "198": {
            "code": "import math\nN = 418;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "199": {
            "code": "import math\nN = 416;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "200": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "201": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "202": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "203": {
            "code": "import math\nN = 1927;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "204": {
            "code": "import math\nN = 1060;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "205": {
            "code": "import math\nN = -39;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "206": {
            "code": "import math\nN = -26;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "207": {
            "code": "import math\nN = 396;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "208": {
            "code": "import math\nN = 434;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "209": {
            "code": "import math\nN = -81;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "210": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "211": {
            "code": "import math\nN = 171;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "212": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "213": {
            "code": "import math\nN = 385;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "214": {
            "code": "import math\nN = -80;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "215": {
            "code": "import math\nN = 1039;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "216": {
            "code": "import math\nN = 1548;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "217": {
            "code": "import math\nN = 1700;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "218": {
            "code": "import math\nN = 471;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "219": {
            "code": "import math\nN = 221;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "220": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "221": {
            "code": "import math\nN = 1326;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "222": {
            "code": "import math\nN = 450;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "223": {
            "code": "import math\nN = 911;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "224": {
            "code": "import math\nN = 385;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "225": {
            "code": "import math\nN = -70;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "226": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "227": {
            "code": "import math\nN = 45;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "228": {
            "code": "import math\nN = 95;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "229": {
            "code": "import math\nN = 1688;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "230": {
            "code": "import math\nN = -26;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "231": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "232": {
            "code": "import math\nN = 1989;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "233": {
            "code": "import math\nN = 594;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "234": {
            "code": "import math\nN = 1787;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "235": {
            "code": "import math\nN = 325;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "236": {
            "code": "import math\nN = 990;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "237": {
            "code": "import math\nN = 1812;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "238": {
            "code": "import math\nN = 1893;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "239": {
            "code": "import math\nN = 466;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "240": {
            "code": "import math\nN = 1331;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "241": {
            "code": "import math\nN = 1614;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "242": {
            "code": "import math\nN = -58;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "243": {
            "code": "import math\nN = 1883;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "244": {
            "code": "import math\nN = 817;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "245": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "246": {
            "code": "import math\nN = 157;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "247": {
            "code": "import math\nN = 422;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "248": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "249": {
            "code": "import math\nN = 1754;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "250": {
            "code": "import math\nN = 582;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "251": {
            "code": "import math\nN = 284;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "252": {
            "code": "import math\nN = -71;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "253": {
            "code": "import math\nN = 1035;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "254": {
            "code": "import math\nN = 1714;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "255": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "256": {
            "code": "import math\nN = 526;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "257": {
            "code": "import math\nN = 2000;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "258": {
            "code": "import math\nN = 450;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "259": {
            "code": "import math\nN = 509;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "260": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "261": {
            "code": "import math\nN = 970;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "262": {
            "code": "import math\nN = -64;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "263": {
            "code": "import math\nN = 1593;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "264": {
            "code": "import math\nN = 1569;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "265": {
            "code": "import math\nN = 572;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "266": {
            "code": "import math\nN = 1960;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "267": {
            "code": "import math\nN = 434;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "268": {
            "code": "import math\nN = 1426;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "269": {
            "code": "import math\nN = 1329;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "270": {
            "code": "import math\nN = 1476;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "271": {
            "code": "import math\nN = 1776;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "272": {
            "code": "import math\nN = 1326;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "273": {
            "code": "import math\nN = 450;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "274": {
            "code": "import math\nN = 395;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "275": {
            "code": "import math\nN = 339;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "276": {
            "code": "import math\nN = 289;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "277": {
            "code": "import math\nN = 73;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "278": {
            "code": "import math\nN = -92;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "279": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "280": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "281": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "282": {
            "code": "import math\nN = -48;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "283": {
            "code": "import math\nN = 596;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "284": {
            "code": "import math\nN = 169;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "285": {
            "code": "import math\nN = 384;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "286": {
            "code": "import math\nN = -10;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "287": {
            "code": "import math\nN = 657;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "288": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "289": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "290": {
            "code": "import math\nN = 1214;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "291": {
            "code": "import math\nN = 1095;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "292": {
            "code": "import math\nN = 1516;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "293": {
            "code": "import math\nN = 1646;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "294": {
            "code": "import math\nN = 1110;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "295": {
            "code": "import math\nN = 1447;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "296": {
            "code": "import math\nN = 99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "297": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "298": {
            "code": "import math\nN = -52;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "299": {
            "code": "import math\nN = 1008;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "300": {
            "code": "import math\nN = 1936;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "301": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "302": {
            "code": "import math\nN = 915;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "303": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "304": {
            "code": "import math\nN = 780;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "305": {
            "code": "import math\nN = 1380;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "306": {
            "code": "import math\nN = -9;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "307": {
            "code": "import math\nN = 1227;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "308": {
            "code": "import math\nN = 1660;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "309": {
            "code": "import math\nN = -61;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "310": {
            "code": "import math\nN = 398;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "311": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "312": {
            "code": "import math\nN = 1222;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "313": {
            "code": "import math\nN = 751;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "314": {
            "code": "import math\nN = 1992;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "315": {
            "code": "import math\nN = 1536;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "316": {
            "code": "import math\nN = 1991;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "317": {
            "code": "import math\nN = 494;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "318": {
            "code": "import math\nN = 1431;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "319": {
            "code": "import math\nN = -98;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "320": {
            "code": "import math\nN = -86;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "321": {
            "code": "import math\nN = 1588;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "322": {
            "code": "import math\nN = 1473;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "323": {
            "code": "import math\nN = 1351;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "324": {
            "code": "import math\nN = -92;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "325": {
            "code": "import math\nN = 1952;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "326": {
            "code": "import math\nN = -92;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "327": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "328": {
            "code": "import math\nN = 18;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "329": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "330": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "331": {
            "code": "import math\nN = 283;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "332": {
            "code": "import math\nN = 1695;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "333": {
            "code": "import math\nN = 671;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "334": {
            "code": "import math\nN = 1380;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "335": {
            "code": "import math\nN = 1241;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "336": {
            "code": "import math\nN = -74;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "337": {
            "code": "import math\nN = 1999;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "338": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "339": {
            "code": "import math\nN = 1509;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "340": {
            "code": "import math\nN = 1963;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "341": {
            "code": "import math\nN = 1904;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "342": {
            "code": "import math\nN = 1752;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "343": {
            "code": "import math\nN = -74;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "344": {
            "code": "import math\nN = 476;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "345": {
            "code": "import math\nN = 882;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "346": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "347": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "348": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "349": {
            "code": "import math\nN = 1883;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "350": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "351": {
            "code": "import math\nN = 359;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "352": {
            "code": "import math\nN = 400;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "353": {
            "code": "import math\nN = 784;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "354": {
            "code": "import math\nN = 263;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "355": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "356": {
            "code": "import math\nN = 1061;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "357": {
            "code": "import math\nN = 0;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "358": {
            "code": "import math\nN = 402;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "359": {
            "code": "import math\nN = 1889;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "360": {
            "code": "import math\nN = 1009;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "361": {
            "code": "import math\nN = 1764;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "362": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "363": {
            "code": "import math\nN = 692;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "364": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "365": {
            "code": "import math\nN = 1516;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "366": {
            "code": "import math\nN = 216;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "367": {
            "code": "import math\nN = -86;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "368": {
            "code": "import math\nN = -20;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "369": {
            "code": "import math\nN = 1164;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "370": {
            "code": "import math\nN = 1905;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "371": {
            "code": "import math\nN = 1996;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "372": {
            "code": "import math\nN = 435;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "373": {
            "code": "import math\nN = -55;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "374": {
            "code": "import math\nN = -74;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "375": {
            "code": "import math\nN = 437;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "376": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "377": {
            "code": "import math\nN = 968;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "378": {
            "code": "import math\nN = 1688;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "379": {
            "code": "import math\nN = 1311;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "380": {
            "code": "import math\nN = -52;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "381": {
            "code": "import math\nN = 359;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "382": {
            "code": "import math\nN = 320;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "383": {
            "code": "import math\nN = 367;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "384": {
            "code": "import math\nN = 1955;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "385": {
            "code": "import math\nN = 1071;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "386": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "387": {
            "code": "import math\nN = 612;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "388": {
            "code": "import math\nN = 925;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "389": {
            "code": "import math\nN = -45;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "390": {
            "code": "import math\nN = 4;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "391": {
            "code": "import math\nN = 27;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "392": {
            "code": "import math\nN = 308;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "393": {
            "code": "import math\nN = 1964;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "394": {
            "code": "import math\nN = 356;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "395": {
            "code": "import math\nN = 1722;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "396": {
            "code": "import math\nN = -79;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "397": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "398": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "399": {
            "code": "import math\nN = 1134;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "400": {
            "code": "import math\nN = 559;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "401": {
            "code": "import math\nN = 1912;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "402": {
            "code": "import math\nN = 329;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "403": {
            "code": "import math\nN = -29;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "404": {
            "code": "import math\nN = 1093;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "405": {
            "code": "import math\nN = 1446;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "406": {
            "code": "import math\nN = 28;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "407": {
            "code": "import math\nN = 1257;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "408": {
            "code": "import math\nN = 1481;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "409": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "410": {
            "code": "import math\nN = 5;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "411": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "412": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "413": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "414": {
            "code": "import math\nN = 1137;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "415": {
            "code": "import math\nN = 489;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "416": {
            "code": "import math\nN = 722;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "417": {
            "code": "import math\nN = 1592;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "418": {
            "code": "import math\nN = 109;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "419": {
            "code": "import math\nN = 1889;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "420": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "421": {
            "code": "import math\nN = 1578;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "422": {
            "code": "import math\nN = -55;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "423": {
            "code": "import math\nN = 766;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "424": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "425": {
            "code": "import math\nN = 389;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "426": {
            "code": "import math\nN = 5;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "427": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "428": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "429": {
            "code": "import math\nN = 594;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "430": {
            "code": "import math\nN = 1829;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "431": {
            "code": "import math\nN = 755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "432": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "433": {
            "code": "import math\nN = -41;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "434": {
            "code": "import math\nN = 614;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "435": {
            "code": "import math\nN = 658;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "436": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "437": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "438": {
            "code": "import math\nN = 651;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "439": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "440": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "441": {
            "code": "import math\nN = 483;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "442": {
            "code": "import math\nN = -74;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "443": {
            "code": "import math\nN = 166;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "444": {
            "code": "import math\nN = 279;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "445": {
            "code": "import math\nN = 474;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "446": {
            "code": "import math\nN = 848;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "447": {
            "code": "import math\nN = 1502;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "448": {
            "code": "import math\nN = 1930;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "449": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "450": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "451": {
            "code": "import math\nN = 908;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "452": {
            "code": "import math\nN = 593;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "453": {
            "code": "import math\nN = 1470;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "454": {
            "code": "import math\nN = -86;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "455": {
            "code": "import math\nN = -36;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "456": {
            "code": "import math\nN = 336;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "457": {
            "code": "import math\nN = 1071;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "458": {
            "code": "import math\nN = 445;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "459": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "460": {
            "code": "import math\nN = 1933;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "461": {
            "code": "import math\nN = 1707;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "462": {
            "code": "import math\nN = -26;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "463": {
            "code": "import math\nN = 985;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "464": {
            "code": "import math\nN = 401;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "465": {
            "code": "import math\nN = -58;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "466": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "467": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "468": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "469": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "470": {
            "code": "import math\nN = 1417;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "471": {
            "code": "import math\nN = 1352;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "472": {
            "code": "import math\nN = 736;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "473": {
            "code": "import math\nN = 1808;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "474": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "475": {
            "code": "import math\nN = 1883;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "476": {
            "code": "import math\nN = 450;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "477": {
            "code": "import math\nN = -26;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "478": {
            "code": "import math\nN = 1373;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "479": {
            "code": "import math\nN = 925;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "480": {
            "code": "import math\nN = 454;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "481": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "482": {
            "code": "import math\nN = 376;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "483": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "484": {
            "code": "import math\nN = 430;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "485": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "486": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "487": {
            "code": "import math\nN = 346;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "488": {
            "code": "import math\nN = 960;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "489": {
            "code": "import math\nN = -62;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "490": {
            "code": "import math\nN = 1329;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "491": {
            "code": "import math\nN = 423;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "492": {
            "code": "import math\nN = 1534;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "493": {
            "code": "import math\nN = 1892;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "494": {
            "code": "import math\nN = -74;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "495": {
            "code": "import math\nN = 216;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "496": {
            "code": "import math\nN = 1887;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "497": {
            "code": "import math\nN = 1165;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "498": {
            "code": "import math\nN = 320;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "499": {
            "code": "import math\nN = 5;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "500": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "501": {
            "code": "import math\nN = 1037;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "502": {
            "code": "import math\nN = -86;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "503": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "504": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "505": {
            "code": "import math\nN = 1724;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "506": {
            "code": "import math\nN = 1171;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "507": {
            "code": "import math\nN = 1728;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "508": {
            "code": "import math\nN = 1983;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "509": {
            "code": "import math\nN = 1635;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "510": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "511": {
            "code": "import math\nN = 595;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "512": {
            "code": "import math\nN = 5;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "513": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "514": {
            "code": "import math\nN = 1754;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "515": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "516": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "517": {
            "code": "import math\nN = 1744;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "518": {
            "code": "import math\nN = 938;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "519": {
            "code": "import math\nN = 348;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "520": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "521": {
            "code": "import math\nN = 1848;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "522": {
            "code": "import math\nN = -58;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "523": {
            "code": "import math\nN = 1886;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "524": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "525": {
            "code": "import math\nN = 814;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "526": {
            "code": "import math\nN = 1542;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "527": {
            "code": "import math\nN = 1906;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "528": {
            "code": "import math\nN = 1369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "529": {
            "code": "import math\nN = 1234;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "530": {
            "code": "import math\nN = 1125;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "531": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "532": {
            "code": "import math\nN = 1058;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "533": {
            "code": "import math\nN = 67;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "534": {
            "code": "import math\nN = 1710;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "535": {
            "code": "import math\nN = 1224;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "536": {
            "code": "import math\nN = 1567;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "537": {
            "code": "import math\nN = 528;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "538": {
            "code": "import math\nN = 949;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "539": {
            "code": "import math\nN = 722;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "540": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "541": {
            "code": "import math\nN = 1948;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "542": {
            "code": "import math\nN = 337;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "543": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "544": {
            "code": "import math\nN = 1994;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "545": {
            "code": "import math\nN = -42;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "546": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "547": {
            "code": "import math\nN = 1508;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "548": {
            "code": "import math\nN = 1262;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "549": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "550": {
            "code": "import math\nN = 1925;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "551": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "552": {
            "code": "import math\nN = 1991;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "553": {
            "code": "import math\nN = 1884;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "554": {
            "code": "import math\nN = 1874;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "555": {
            "code": "import math\nN = -89;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "556": {
            "code": "import math\nN = 1982;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "557": {
            "code": "import math\nN = 1820;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "558": {
            "code": "import math\nN = 1237;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "559": {
            "code": "import math\nN = -89;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "560": {
            "code": "import math\nN = 405;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "561": {
            "code": "import math\nN = -56;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "562": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "563": {
            "code": "import math\nN = 433;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "564": {
            "code": "import math\nN = 633;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "565": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "566": {
            "code": "import math\nN = -85;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "567": {
            "code": "import math\nN = 1197;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "568": {
            "code": "import math\nN = 693;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "569": {
            "code": "import math\nN = 1312;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "570": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "571": {
            "code": "import math\nN = 1225;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "572": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "573": {
            "code": "import math\nN = 902;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "574": {
            "code": "import math\nN = 422;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "575": {
            "code": "import math\nN = 773;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "576": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "577": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "578": {
            "code": "import math\nN = 652;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "579": {
            "code": "import math\nN = 397;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "580": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "581": {
            "code": "import math\nN = -58;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "582": {
            "code": "import math\nN = 973;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "583": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "584": {
            "code": "import math\nN = 163;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "585": {
            "code": "import math\nN = 1953;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "586": {
            "code": "import math\nN = 1910;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "587": {
            "code": "import math\nN = 168;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "588": {
            "code": "import math\nN = 1065;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "589": {
            "code": "import math\nN = 1881;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "590": {
            "code": "import math\nN = 1075;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "591": {
            "code": "import math\nN = 254;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "592": {
            "code": "import math\nN = 1733;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "593": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "594": {
            "code": "import math\nN = -86;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "595": {
            "code": "import math\nN = 1878;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "596": {
            "code": "import math\nN = 504;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "597": {
            "code": "import math\nN = -62;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "598": {
            "code": "import math\nN = 1038;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "599": {
            "code": "import math\nN = 1905;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "600": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "601": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "602": {
            "code": "import math\nN = 13;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "603": {
            "code": "import math\nN = 1513;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "604": {
            "code": "import math\nN = -49;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "605": {
            "code": "import math\nN = 1761;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "606": {
            "code": "import math\nN = 1204;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "607": {
            "code": "import math\nN = 266;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "608": {
            "code": "import math\nN = 625;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "609": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "610": {
            "code": "import math\nN = 1376;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "611": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "612": {
            "code": "import math\nN = 1820;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "613": {
            "code": "import math\nN = 118;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "614": {
            "code": "import math\nN = 131;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "615": {
            "code": "import math\nN = 442;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "616": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "617": {
            "code": "import math\nN = 702;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "618": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "619": {
            "code": "import math\nN = 168;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "620": {
            "code": "import math\nN = 1017;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "621": {
            "code": "import math\nN = 1243;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "622": {
            "code": "import math\nN = 421;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "623": {
            "code": "import math\nN = 127;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "624": {
            "code": "import math\nN = 1560;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "625": {
            "code": "import math\nN = 1757;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "626": {
            "code": "import math\nN = 59;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "627": {
            "code": "import math\nN = 662;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "628": {
            "code": "import math\nN = -64;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "629": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "630": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "631": {
            "code": "import math\nN = 1895;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "632": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "633": {
            "code": "import math\nN = 26;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "634": {
            "code": "import math\nN = 1932;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "635": {
            "code": "import math\nN = 210;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "636": {
            "code": "import math\nN = 72;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "637": {
            "code": "import math\nN = -100;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "638": {
            "code": "import math\nN = 806;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "639": {
            "code": "import math\nN = -86;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "640": {
            "code": "import math\nN = 455;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "641": {
            "code": "import math\nN = 720;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "642": {
            "code": "import math\nN = -26;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "643": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "644": {
            "code": "import math\nN = 1881;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "645": {
            "code": "import math\nN = 385;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "646": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "647": {
            "code": "import math\nN = 1979;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "648": {
            "code": "import math\nN = 1801;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "649": {
            "code": "import math\nN = -39;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "650": {
            "code": "import math\nN = 614;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "651": {
            "code": "import math\nN = -61;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "652": {
            "code": "import math\nN = -74;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "653": {
            "code": "import math\nN = 1805;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "654": {
            "code": "import math\nN = 926;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "655": {
            "code": "import math\nN = 1957;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "656": {
            "code": "import math\nN = 1397;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "657": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "658": {
            "code": "import math\nN = 662;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "659": {
            "code": "import math\nN = -100;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "660": {
            "code": "import math\nN = 8;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "661": {
            "code": "import math\nN = 27;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "662": {
            "code": "import math\nN = 505;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "663": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "664": {
            "code": "import math\nN = 392;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "665": {
            "code": "import math\nN = 1029;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "666": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "667": {
            "code": "import math\nN = -10;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "668": {
            "code": "import math\nN = 825;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "669": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "670": {
            "code": "import math\nN = 787;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "671": {
            "code": "import math\nN = 207;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "672": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "673": {
            "code": "import math\nN = 102;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "674": {
            "code": "import math\nN = 1217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "675": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "676": {
            "code": "import math\nN = 871;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "677": {
            "code": "import math\nN = -74;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "678": {
            "code": "import math\nN = 741;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "679": {
            "code": "import math\nN = 452;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "680": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "681": {
            "code": "import math\nN = 449;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "682": {
            "code": "import math\nN = -59;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "683": {
            "code": "import math\nN = 424;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "684": {
            "code": "import math\nN = 1487;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "685": {
            "code": "import math\nN = 1883;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "686": {
            "code": "import math\nN = 420;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "687": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "688": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "689": {
            "code": "import math\nN = 1916;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "690": {
            "code": "import math\nN = 166;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "691": {
            "code": "import math\nN = -100;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "692": {
            "code": "import math\nN = -24;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "693": {
            "code": "import math\nN = 709;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "694": {
            "code": "import math\nN = 2000;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "695": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "696": {
            "code": "import math\nN = 536;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "697": {
            "code": "import math\nN = 1705;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "698": {
            "code": "import math\nN = 1240;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "699": {
            "code": "import math\nN = -58;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "700": {
            "code": "import math\nN = -52;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "701": {
            "code": "import math\nN = 189;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "702": {
            "code": "import math\nN = 193;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "703": {
            "code": "import math\nN = 406;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "704": {
            "code": "import math\nN = 572;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "705": {
            "code": "import math\nN = 805;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "706": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "707": {
            "code": "import math\nN = 810;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "708": {
            "code": "import math\nN = 442;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "709": {
            "code": "import math\nN = 736;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "710": {
            "code": "import math\nN = -89;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "711": {
            "code": "import math\nN = 998;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "712": {
            "code": "import math\nN = 1106;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "713": {
            "code": "import math\nN = 1852;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "714": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "715": {
            "code": "import math\nN = 1248;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "716": {
            "code": "import math\nN = 697;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "717": {
            "code": "import math\nN = 1849;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "718": {
            "code": "import math\nN = 451;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "719": {
            "code": "import math\nN = 237;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "720": {
            "code": "import math\nN = 332;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "721": {
            "code": "import math\nN = 1910;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "722": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "723": {
            "code": "import math\nN = -92;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "724": {
            "code": "import math\nN = -88;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "725": {
            "code": "import math\nN = 699;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "726": {
            "code": "import math\nN = 760;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "727": {
            "code": "import math\nN = 1783;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "728": {
            "code": "import math\nN = 1936;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "729": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "730": {
            "code": "import math\nN = 1148;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "731": {
            "code": "import math\nN = 1883;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "732": {
            "code": "import math\nN = 242;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "733": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "734": {
            "code": "import math\nN = 554;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "735": {
            "code": "import math\nN = -5;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "736": {
            "code": "import math\nN = 493;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "737": {
            "code": "import math\nN = 881;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "738": {
            "code": "import math\nN = 1128;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "739": {
            "code": "import math\nN = -42;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "740": {
            "code": "import math\nN = 307;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "741": {
            "code": "import math\nN = 1664;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "742": {
            "code": "import math\nN = -85;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "743": {
            "code": "import math\nN = 1204;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "744": {
            "code": "import math\nN = 985;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "745": {
            "code": "import math\nN = 1879;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "746": {
            "code": "import math\nN = 1224;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "747": {
            "code": "import math\nN = 1852;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "748": {
            "code": "import math\nN = 1570;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "749": {
            "code": "import math\nN = 1877;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "750": {
            "code": "import math\nN = -88;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "751": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "752": {
            "code": "import math\nN = -41;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "753": {
            "code": "import math\nN = -92;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "754": {
            "code": "import math\nN = 1422;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "755": {
            "code": "import math\nN = 1012;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "756": {
            "code": "import math\nN = 2000;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "757": {
            "code": "import math\nN = 144;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "758": {
            "code": "import math\nN = 228;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "759": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "760": {
            "code": "import math\nN = -36;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "761": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "762": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "763": {
            "code": "import math\nN = 288;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "764": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "765": {
            "code": "import math\nN = -97;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "766": {
            "code": "import math\nN = 17;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "767": {
            "code": "import math\nN = 1543;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "768": {
            "code": "import math\nN = -57;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "769": {
            "code": "import math\nN = 412;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "770": {
            "code": "import math\nN = 1966;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "771": {
            "code": "import math\nN = 275;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "772": {
            "code": "import math\nN = 613;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "773": {
            "code": "import math\nN = 1075;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "774": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "775": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "776": {
            "code": "import math\nN = 617;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "777": {
            "code": "import math\nN = 267;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "778": {
            "code": "import math\nN = 121;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "779": {
            "code": "import math\nN = 907;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "780": {
            "code": "import math\nN = 466;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "781": {
            "code": "import math\nN = 1244;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "782": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "783": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "784": {
            "code": "import math\nN = 1582;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "785": {
            "code": "import math\nN = 271;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "786": {
            "code": "import math\nN = 1864;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "787": {
            "code": "import math\nN = 1780;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "788": {
            "code": "import math\nN = -67;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "789": {
            "code": "import math\nN = 873;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "790": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "791": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "792": {
            "code": "import math\nN = -89;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "793": {
            "code": "import math\nN = 712;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "794": {
            "code": "import math\nN = 133;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "795": {
            "code": "import math\nN = 653;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "796": {
            "code": "import math\nN = 166;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "797": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "798": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "799": {
            "code": "import math\nN = 1983;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "800": {
            "code": "import math\nN = 548;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "801": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "802": {
            "code": "import math\nN = 1771;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "803": {
            "code": "import math\nN = 1536;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "804": {
            "code": "import math\nN = -51;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "805": {
            "code": "import math\nN = 1220;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "806": {
            "code": "import math\nN = 1799;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "807": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "808": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "809": {
            "code": "import math\nN = 126;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "810": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "811": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "812": {
            "code": "import math\nN = 450;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "813": {
            "code": "import math\nN = -92;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "814": {
            "code": "import math\nN = 1015;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "815": {
            "code": "import math\nN = 375;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "816": {
            "code": "import math\nN = 404;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "817": {
            "code": "import math\nN = 610;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "818": {
            "code": "import math\nN = 1849;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "819": {
            "code": "import math\nN = 1956;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "820": {
            "code": "import math\nN = 1867;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "821": {
            "code": "import math\nN = 1042;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "822": {
            "code": "import math\nN = 712;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "823": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "824": {
            "code": "import math\nN = 51;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "825": {
            "code": "import math\nN = 106;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "826": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "827": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "828": {
            "code": "import math\nN = 1119;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "829": {
            "code": "import math\nN = -64;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "830": {
            "code": "import math\nN = 527;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "831": {
            "code": "import math\nN = -59;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "832": {
            "code": "import math\nN = 1960;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "833": {
            "code": "import math\nN = 1554;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "834": {
            "code": "import math\nN = 910;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "835": {
            "code": "import math\nN = 915;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "836": {
            "code": "import math\nN = 1971;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "837": {
            "code": "import math\nN = -16;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "838": {
            "code": "import math\nN = -87;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "839": {
            "code": "import math\nN = 539;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "840": {
            "code": "import math\nN = -99;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "841": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "842": {
            "code": "import math\nN = -98;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "843": {
            "code": "import math\nN = 403;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "844": {
            "code": "import math\nN = 30;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "845": {
            "code": "import math\nN = 1438;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "846": {
            "code": "import math\nN = 731;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "847": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "848": {
            "code": "import math\nN = 651;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "849": {
            "code": "import math\nN = 1214;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "850": {
            "code": "import math\nN = -35;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "851": {
            "code": "import math\nN = 1103;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "852": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "853": {
            "code": "import math\nN = 1600;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "854": {
            "code": "import math\nN = 1495;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "855": {
            "code": "import math\nN = 413;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "856": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "857": {
            "code": "import math\nN = 1755;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "858": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "859": {
            "code": "import math\nN = -64;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "860": {
            "code": "import math\nN = 1348;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "861": {
            "code": "import math\nN = 1224;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "862": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "863": {
            "code": "import math\nN = -86;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "864": {
            "code": "import math\nN = 870;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "865": {
            "code": "import math\nN = 611;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "866": {
            "code": "import math\nN = 405;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "867": {
            "code": "import math\nN = 1028;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "868": {
            "code": "import math\nN = 1093;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "869": {
            "code": "import math\nN = 1490;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "870": {
            "code": "import math\nN = 1366;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "871": {
            "code": "import math\nN = 1771;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "872": {
            "code": "import math\nN = 1485;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "873": {
            "code": "import math\nN = 907;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "874": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "875": {
            "code": "import math\nN = 1989;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "876": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "877": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "878": {
            "code": "import math\nN = -67;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "879": {
            "code": "import math\nN = 401;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "880": {
            "code": "import math\nN = 124;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "881": {
            "code": "import math\nN = 994;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "882": {
            "code": "import math\nN = 1077;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "883": {
            "code": "import math\nN = 298;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "884": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "885": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "886": {
            "code": "import math\nN = 1449;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "887": {
            "code": "import math\nN = 1980;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "888": {
            "code": "import math\nN = 833;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "889": {
            "code": "import math\nN = 1921;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "890": {
            "code": "import math\nN = 748;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "891": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "892": {
            "code": "import math\nN = 398;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "893": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "894": {
            "code": "import math\nN = 1075;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "895": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "896": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "897": {
            "code": "import math\nN = 1306;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "898": {
            "code": "import math\nN = 1991;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "899": {
            "code": "import math\nN = -98;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "900": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "901": {
            "code": "import math\nN = 864;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "902": {
            "code": "import math\nN = 1722;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "903": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "904": {
            "code": "import math\nN = -41;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "905": {
            "code": "import math\nN = 715;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "906": {
            "code": "import math\nN = 1391;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "907": {
            "code": "import math\nN = 1824;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "908": {
            "code": "import math\nN = 965;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "909": {
            "code": "import math\nN = 987;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "910": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "911": {
            "code": "import math\nN = 478;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "912": {
            "code": "import math\nN = 315;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "913": {
            "code": "import math\nN = 1975;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "914": {
            "code": "import math\nN = 158;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "915": {
            "code": "import math\nN = 1618;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "916": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "917": {
            "code": "import math\nN = -96;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "918": {
            "code": "import math\nN = 1873;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "919": {
            "code": "import math\nN = 1945;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "920": {
            "code": "import math\nN = 858;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "921": {
            "code": "import math\nN = 591;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "922": {
            "code": "import math\nN = 490;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "923": {
            "code": "import math\nN = -67;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "924": {
            "code": "import math\nN = -76;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "925": {
            "code": "import math\nN = -36;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "926": {
            "code": "import math\nN = 1222;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "927": {
            "code": "import math\nN = 1087;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "928": {
            "code": "import math\nN = 1851;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "929": {
            "code": "import math\nN = 1355;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "930": {
            "code": "import math\nN = 1832;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "931": {
            "code": "import math\nN = 1976;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "932": {
            "code": "import math\nN = 1959;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "933": {
            "code": "import math\nN = 1853;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "934": {
            "code": "import math\nN = -33;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "935": {
            "code": "import math\nN = 555;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "936": {
            "code": "import math\nN = 360;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "937": {
            "code": "import math\nN = 1938;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "938": {
            "code": "import math\nN = 262;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "939": {
            "code": "import math\nN = 1287;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "940": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "941": {
            "code": "import math\nN = -58;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "942": {
            "code": "import math\nN = 1419;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "943": {
            "code": "import math\nN = -13;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "944": {
            "code": "import math\nN = 829;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "945": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "946": {
            "code": "import math\nN = 445;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "947": {
            "code": "import math\nN = -54;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "948": {
            "code": "import math\nN = -62;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "949": {
            "code": "import math\nN = 399;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "950": {
            "code": "import math\nN = 303;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "951": {
            "code": "import math\nN = 918;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "952": {
            "code": "import math\nN = 69;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "953": {
            "code": "import math\nN = 339;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "954": {
            "code": "import math\nN = 1788;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "955": {
            "code": "import math\nN = 826;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "956": {
            "code": "import math\nN = 367;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "957": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "958": {
            "code": "import math\nN = 1643;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "959": {
            "code": "import math\nN = 1457;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "960": {
            "code": "import math\nN = 1802;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "961": {
            "code": "import math\nN = 877;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "962": {
            "code": "import math\nN = 838;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "963": {
            "code": "import math\nN = 90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "964": {
            "code": "import math\nN = 1226;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "965": {
            "code": "import math\nN = 1507;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "966": {
            "code": "import math\nN = 1746;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "967": {
            "code": "import math\nN = 1153;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "968": {
            "code": "import math\nN = 2000;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "969": {
            "code": "import math\nN = 1843;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "970": {
            "code": "import math\nN = 10;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "971": {
            "code": "import math\nN = 294;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "972": {
            "code": "import math\nN = 406;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "973": {
            "code": "import math\nN = 366;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "974": {
            "code": "import math\nN = -20;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "975": {
            "code": "import math\nN = 1286;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "976": {
            "code": "import math\nN = 770;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "977": {
            "code": "import math\nN = 1437;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "978": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "979": {
            "code": "import math\nN = -98;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "980": {
            "code": "import math\nN = -80;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "981": {
            "code": "import math\nN = 1628;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "982": {
            "code": "import math\nN = -90;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "983": {
            "code": "import math\nN = 1852;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "984": {
            "code": "import math\nN = 1025;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "985": {
            "code": "import math\nN = 882;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "986": {
            "code": "import math\nN = -55;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "987": {
            "code": "import math\nN = 1951;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "988": {
            "code": "import math\nN = 565;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "989": {
            "code": "import math\nN = -76;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "990": {
            "code": "import math\nN = 369;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "991": {
            "code": "import math\nN = 79;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "992": {
            "code": "import math\nN = 626;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "993": {
            "code": "import math\nN = 217;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "994": {
            "code": "import math\nN = 1891;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "995": {
            "code": "import math\nN = 1857;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "996": {
            "code": "import math\nN = 1693;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "997": {
            "code": "import math\nN = 396;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "998": {
            "code": "import math\nN = 289;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "999": {
            "code": "import math\nN = -74;K = 3\nA = [2, 3, 1, 4]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "7933": {
        "0": {
            "code": "import math\nN = -58;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "1": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "2": {
            "code": "import math\nN = 1453;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "3": {
            "code": "import math\nN = 1639;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "4": {
            "code": "import math\nN = 373;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "5": {
            "code": "import math\nN = 1224;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "6": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "7": {
            "code": "import math\nN = 504;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "8": {
            "code": "import math\nN = -99;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "9": {
            "code": "import math\nN = 1481;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "10": {
            "code": "import math\nN = 1082;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "11": {
            "code": "import math\nN = 1393;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "12": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "13": {
            "code": "import math\nN = 331;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "14": {
            "code": "import math\nN = 1586;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "15": {
            "code": "import math\nN = 1853;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "16": {
            "code": "import math\nN = -60;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "17": {
            "code": "import math\nN = 1327;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "18": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "19": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "20": {
            "code": "import math\nN = 772;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "21": {
            "code": "import math\nN = 546;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "22": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "23": {
            "code": "import math\nN = 1153;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "24": {
            "code": "import math\nN = 559;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "25": {
            "code": "import math\nN = -7;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "26": {
            "code": "import math\nN = -50;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "27": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "28": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "29": {
            "code": "import math\nN = 418;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "30": {
            "code": "import math\nN = 1995;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "31": {
            "code": "import math\nN = 1654;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "32": {
            "code": "import math\nN = -9;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "33": {
            "code": "import math\nN = -98;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "34": {
            "code": "import math\nN = -100;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "35": {
            "code": "import math\nN = -56;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "36": {
            "code": "import math\nN = -67;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "37": {
            "code": "import math\nN = 214;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "38": {
            "code": "import math\nN = 646;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "39": {
            "code": "import math\nN = 1990;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "40": {
            "code": "import math\nN = 1490;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "41": {
            "code": "import math\nN = 1454;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "42": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "43": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "44": {
            "code": "import math\nN = 1966;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "45": {
            "code": "import math\nN = 1928;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "46": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "47": {
            "code": "import math\nN = 1349;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "48": {
            "code": "import math\nN = -26;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "49": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "50": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "51": {
            "code": "import math\nN = 1012;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "52": {
            "code": "import math\nN = 400;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "53": {
            "code": "import math\nN = 1443;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "54": {
            "code": "import math\nN = 1597;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "55": {
            "code": "import math\nN = 324;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "56": {
            "code": "import math\nN = -73;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "57": {
            "code": "import math\nN = 370;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "58": {
            "code": "import math\nN = 201;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "59": {
            "code": "import math\nN = -92;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "60": {
            "code": "import math\nN = -9;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "61": {
            "code": "import math\nN = 831;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "62": {
            "code": "import math\nN = 767;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "63": {
            "code": "import math\nN = 229;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "64": {
            "code": "import math\nN = 972;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "65": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "66": {
            "code": "import math\nN = 405;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "67": {
            "code": "import math\nN = -83;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "68": {
            "code": "import math\nN = 1485;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "69": {
            "code": "import math\nN = 1641;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "70": {
            "code": "import math\nN = 1318;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "71": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "72": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "73": {
            "code": "import math\nN = 13;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "74": {
            "code": "import math\nN = 1224;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "75": {
            "code": "import math\nN = 1369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "76": {
            "code": "import math\nN = -98;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "77": {
            "code": "import math\nN = 193;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "78": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "79": {
            "code": "import math\nN = 591;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "80": {
            "code": "import math\nN = 628;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "81": {
            "code": "import math\nN = 28;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "82": {
            "code": "import math\nN = 361;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "83": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "84": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "85": {
            "code": "import math\nN = 1042;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "86": {
            "code": "import math\nN = 377;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "87": {
            "code": "import math\nN = 839;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "88": {
            "code": "import math\nN = 559;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "89": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "90": {
            "code": "import math\nN = 1711;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "91": {
            "code": "import math\nN = -34;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "92": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "93": {
            "code": "import math\nN = 398;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "94": {
            "code": "import math\nN = 761;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "95": {
            "code": "import math\nN = 517;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "96": {
            "code": "import math\nN = 372;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "97": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "98": {
            "code": "import math\nN = 1995;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "99": {
            "code": "import math\nN = 110;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "100": {
            "code": "import math\nN = -100;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "101": {
            "code": "import math\nN = 1894;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "102": {
            "code": "import math\nN = 197;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "103": {
            "code": "import math\nN = -62;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "104": {
            "code": "import math\nN = 36;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "105": {
            "code": "import math\nN = 934;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "106": {
            "code": "import math\nN = -56;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "107": {
            "code": "import math\nN = 1905;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "108": {
            "code": "import math\nN = 1114;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "109": {
            "code": "import math\nN = -26;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "110": {
            "code": "import math\nN = -26;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "111": {
            "code": "import math\nN = 409;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "112": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "113": {
            "code": "import math\nN = 1299;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "114": {
            "code": "import math\nN = 601;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "115": {
            "code": "import math\nN = 345;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "116": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "117": {
            "code": "import math\nN = 744;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "118": {
            "code": "import math\nN = 1948;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "119": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "120": {
            "code": "import math\nN = 364;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "121": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "122": {
            "code": "import math\nN = 961;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "123": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "124": {
            "code": "import math\nN = 1752;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "125": {
            "code": "import math\nN = 518;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "126": {
            "code": "import math\nN = 244;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "127": {
            "code": "import math\nN = 1426;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "128": {
            "code": "import math\nN = 619;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "129": {
            "code": "import math\nN = 396;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "130": {
            "code": "import math\nN = 898;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "131": {
            "code": "import math\nN = 861;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "132": {
            "code": "import math\nN = -98;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "133": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "134": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "135": {
            "code": "import math\nN = 1948;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "136": {
            "code": "import math\nN = 1075;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "137": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "138": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "139": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "140": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "141": {
            "code": "import math\nN = 131;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "142": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "143": {
            "code": "import math\nN = 419;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "144": {
            "code": "import math\nN = 1243;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "145": {
            "code": "import math\nN = 863;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "146": {
            "code": "import math\nN = 477;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "147": {
            "code": "import math\nN = 886;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "148": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "149": {
            "code": "import math\nN = 1984;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "150": {
            "code": "import math\nN = -58;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "151": {
            "code": "import math\nN = -58;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "152": {
            "code": "import math\nN = -45;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "153": {
            "code": "import math\nN = 44;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "154": {
            "code": "import math\nN = 1334;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "155": {
            "code": "import math\nN = 591;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "156": {
            "code": "import math\nN = 1125;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "157": {
            "code": "import math\nN = 1468;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "158": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "159": {
            "code": "import math\nN = -50;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "160": {
            "code": "import math\nN = 1317;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "161": {
            "code": "import math\nN = -58;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "162": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "163": {
            "code": "import math\nN = 1799;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "164": {
            "code": "import math\nN = 485;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "165": {
            "code": "import math\nN = 272;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "166": {
            "code": "import math\nN = 1241;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "167": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "168": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "169": {
            "code": "import math\nN = 1395;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "170": {
            "code": "import math\nN = 1851;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "171": {
            "code": "import math\nN = 993;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "172": {
            "code": "import math\nN = 805;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "173": {
            "code": "import math\nN = 565;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "174": {
            "code": "import math\nN = 56;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "175": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "176": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "177": {
            "code": "import math\nN = -59;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "178": {
            "code": "import math\nN = 22;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "179": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "180": {
            "code": "import math\nN = 537;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "181": {
            "code": "import math\nN = 1729;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "182": {
            "code": "import math\nN = 1673;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "183": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "184": {
            "code": "import math\nN = -100;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "185": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "186": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "187": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "188": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "189": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "190": {
            "code": "import math\nN = 552;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "191": {
            "code": "import math\nN = 1718;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "192": {
            "code": "import math\nN = 1005;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "193": {
            "code": "import math\nN = 841;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "194": {
            "code": "import math\nN = 1771;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "195": {
            "code": "import math\nN = 1928;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "196": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "197": {
            "code": "import math\nN = 1714;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "198": {
            "code": "import math\nN = -64;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "199": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "200": {
            "code": "import math\nN = 1364;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "201": {
            "code": "import math\nN = -52;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "202": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "203": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "204": {
            "code": "import math\nN = 368;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "205": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "206": {
            "code": "import math\nN = 380;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "207": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "208": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "209": {
            "code": "import math\nN = 495;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "210": {
            "code": "import math\nN = -56;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "211": {
            "code": "import math\nN = 1128;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "212": {
            "code": "import math\nN = 1689;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "213": {
            "code": "import math\nN = 1106;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "214": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "215": {
            "code": "import math\nN = 555;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "216": {
            "code": "import math\nN = 1508;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "217": {
            "code": "import math\nN = 221;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "218": {
            "code": "import math\nN = 1449;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "219": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "220": {
            "code": "import math\nN = 543;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "221": {
            "code": "import math\nN = 402;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "222": {
            "code": "import math\nN = 785;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "223": {
            "code": "import math\nN = -58;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "224": {
            "code": "import math\nN = 1887;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "225": {
            "code": "import math\nN = 1162;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "226": {
            "code": "import math\nN = 431;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "227": {
            "code": "import math\nN = 1017;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "228": {
            "code": "import math\nN = 1291;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "229": {
            "code": "import math\nN = 1586;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "230": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "231": {
            "code": "import math\nN = 1784;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "232": {
            "code": "import math\nN = 1702;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "233": {
            "code": "import math\nN = 1887;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "234": {
            "code": "import math\nN = 1220;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "235": {
            "code": "import math\nN = 1911;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "236": {
            "code": "import math\nN = 1229;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "237": {
            "code": "import math\nN = -93;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "238": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "239": {
            "code": "import math\nN = 1562;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "240": {
            "code": "import math\nN = 912;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "241": {
            "code": "import math\nN = 1029;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "242": {
            "code": "import math\nN = -52;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "243": {
            "code": "import math\nN = 1366;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "244": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "245": {
            "code": "import math\nN = 683;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "246": {
            "code": "import math\nN = 1476;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "247": {
            "code": "import math\nN = 455;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "248": {
            "code": "import math\nN = 475;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "249": {
            "code": "import math\nN = 464;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "250": {
            "code": "import math\nN = -67;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "251": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "252": {
            "code": "import math\nN = 1663;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "253": {
            "code": "import math\nN = 1561;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "254": {
            "code": "import math\nN = 253;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "255": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "256": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "257": {
            "code": "import math\nN = 1776;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "258": {
            "code": "import math\nN = 1904;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "259": {
            "code": "import math\nN = 1245;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "260": {
            "code": "import math\nN = 757;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "261": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "262": {
            "code": "import math\nN = 358;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "263": {
            "code": "import math\nN = 1967;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "264": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "265": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "266": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "267": {
            "code": "import math\nN = -76;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "268": {
            "code": "import math\nN = 1626;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "269": {
            "code": "import math\nN = 1890;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "270": {
            "code": "import math\nN = 947;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "271": {
            "code": "import math\nN = 96;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "272": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "273": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "274": {
            "code": "import math\nN = 426;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "275": {
            "code": "import math\nN = 480;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "276": {
            "code": "import math\nN = -9;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "277": {
            "code": "import math\nN = 684;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "278": {
            "code": "import math\nN = -87;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "279": {
            "code": "import math\nN = 160;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "280": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "281": {
            "code": "import math\nN = 878;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "282": {
            "code": "import math\nN = 127;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "283": {
            "code": "import math\nN = 1530;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "284": {
            "code": "import math\nN = 1635;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "285": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "286": {
            "code": "import math\nN = -74;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "287": {
            "code": "import math\nN = 1561;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "288": {
            "code": "import math\nN = 934;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "289": {
            "code": "import math\nN = 1988;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "290": {
            "code": "import math\nN = 1957;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "291": {
            "code": "import math\nN = 1937;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "292": {
            "code": "import math\nN = 1381;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "293": {
            "code": "import math\nN = 797;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "294": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "295": {
            "code": "import math\nN = 885;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "296": {
            "code": "import math\nN = 201;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "297": {
            "code": "import math\nN = 530;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "298": {
            "code": "import math\nN = 1427;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "299": {
            "code": "import math\nN = 1506;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "300": {
            "code": "import math\nN = -98;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "301": {
            "code": "import math\nN = -26;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "302": {
            "code": "import math\nN = -84;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "303": {
            "code": "import math\nN = 719;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "304": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "305": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "306": {
            "code": "import math\nN = 1659;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "307": {
            "code": "import math\nN = -99;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "308": {
            "code": "import math\nN = 1758;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "309": {
            "code": "import math\nN = 473;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "310": {
            "code": "import math\nN = 343;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "311": {
            "code": "import math\nN = 989;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "312": {
            "code": "import math\nN = 595;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "313": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "314": {
            "code": "import math\nN = 1693;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "315": {
            "code": "import math\nN = 1952;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "316": {
            "code": "import math\nN = -83;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "317": {
            "code": "import math\nN = 1910;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "318": {
            "code": "import math\nN = 1540;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "319": {
            "code": "import math\nN = 22;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "320": {
            "code": "import math\nN = -86;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "321": {
            "code": "import math\nN = 149;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "322": {
            "code": "import math\nN = 902;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "323": {
            "code": "import math\nN = 641;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "324": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "325": {
            "code": "import math\nN = -98;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "326": {
            "code": "import math\nN = 408;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "327": {
            "code": "import math\nN = 406;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "328": {
            "code": "import math\nN = 917;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "329": {
            "code": "import math\nN = -56;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "330": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "331": {
            "code": "import math\nN = 132;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "332": {
            "code": "import math\nN = 392;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "333": {
            "code": "import math\nN = 642;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "334": {
            "code": "import math\nN = 203;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "335": {
            "code": "import math\nN = 774;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "336": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "337": {
            "code": "import math\nN = 1628;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "338": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "339": {
            "code": "import math\nN = -55;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "340": {
            "code": "import math\nN = 403;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "341": {
            "code": "import math\nN = 198;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "342": {
            "code": "import math\nN = 401;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "343": {
            "code": "import math\nN = 1490;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "344": {
            "code": "import math\nN = 530;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "345": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "346": {
            "code": "import math\nN = 269;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "347": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "348": {
            "code": "import math\nN = 1721;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "349": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "350": {
            "code": "import math\nN = 485;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "351": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "352": {
            "code": "import math\nN = 485;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "353": {
            "code": "import math\nN = 237;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "354": {
            "code": "import math\nN = -10;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "355": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "356": {
            "code": "import math\nN = 750;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "357": {
            "code": "import math\nN = 427;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "358": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "359": {
            "code": "import math\nN = 1873;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "360": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "361": {
            "code": "import math\nN = 1901;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "362": {
            "code": "import math\nN = 1306;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "363": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "364": {
            "code": "import math\nN = -58;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "365": {
            "code": "import math\nN = -35;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "366": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "367": {
            "code": "import math\nN = 1932;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "368": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "369": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "370": {
            "code": "import math\nN = 412;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "371": {
            "code": "import math\nN = 1988;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "372": {
            "code": "import math\nN = 62;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "373": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "374": {
            "code": "import math\nN = 228;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "375": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "376": {
            "code": "import math\nN = 380;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "377": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "378": {
            "code": "import math\nN = 308;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "379": {
            "code": "import math\nN = 1846;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "380": {
            "code": "import math\nN = 1295;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "381": {
            "code": "import math\nN = -39;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "382": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "383": {
            "code": "import math\nN = 852;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "384": {
            "code": "import math\nN = 1667;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "385": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "386": {
            "code": "import math\nN = 828;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "387": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "388": {
            "code": "import math\nN = 65;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "389": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "390": {
            "code": "import math\nN = 1127;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "391": {
            "code": "import math\nN = 1562;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "392": {
            "code": "import math\nN = -100;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "393": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "394": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "395": {
            "code": "import math\nN = 418;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "396": {
            "code": "import math\nN = 1038;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "397": {
            "code": "import math\nN = 574;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "398": {
            "code": "import math\nN = 570;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "399": {
            "code": "import math\nN = 1425;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "400": {
            "code": "import math\nN = -58;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "401": {
            "code": "import math\nN = -28;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "402": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "403": {
            "code": "import math\nN = 408;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "404": {
            "code": "import math\nN = 423;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "405": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "406": {
            "code": "import math\nN = 826;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "407": {
            "code": "import math\nN = 1312;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "408": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "409": {
            "code": "import math\nN = 829;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "410": {
            "code": "import math\nN = -68;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "411": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "412": {
            "code": "import math\nN = 1953;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "413": {
            "code": "import math\nN = -63;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "414": {
            "code": "import math\nN = -29;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "415": {
            "code": "import math\nN = -16;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "416": {
            "code": "import math\nN = -22;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "417": {
            "code": "import math\nN = 1693;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "418": {
            "code": "import math\nN = 1850;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "419": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "420": {
            "code": "import math\nN = 1118;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "421": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "422": {
            "code": "import math\nN = 512;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "423": {
            "code": "import math\nN = 1333;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "424": {
            "code": "import math\nN = 25;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "425": {
            "code": "import math\nN = 51;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "426": {
            "code": "import math\nN = 95;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "427": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "428": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "429": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "430": {
            "code": "import math\nN = 361;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "431": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "432": {
            "code": "import math\nN = 1530;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "433": {
            "code": "import math\nN = 892;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "434": {
            "code": "import math\nN = 1803;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "435": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "436": {
            "code": "import math\nN = 95;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "437": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "438": {
            "code": "import math\nN = 139;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "439": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "440": {
            "code": "import math\nN = 628;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "441": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "442": {
            "code": "import math\nN = 1403;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "443": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "444": {
            "code": "import math\nN = 539;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "445": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "446": {
            "code": "import math\nN = 1737;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "447": {
            "code": "import math\nN = 642;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "448": {
            "code": "import math\nN = 621;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "449": {
            "code": "import math\nN = 501;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "450": {
            "code": "import math\nN = -92;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "451": {
            "code": "import math\nN = 29;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "452": {
            "code": "import math\nN = -53;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "453": {
            "code": "import math\nN = 594;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "454": {
            "code": "import math\nN = 201;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "455": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "456": {
            "code": "import math\nN = 972;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "457": {
            "code": "import math\nN = -36;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "458": {
            "code": "import math\nN = 428;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "459": {
            "code": "import math\nN = 1120;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "460": {
            "code": "import math\nN = 325;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "461": {
            "code": "import math\nN = 51;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "462": {
            "code": "import math\nN = -58;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "463": {
            "code": "import math\nN = 192;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "464": {
            "code": "import math\nN = 1835;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "465": {
            "code": "import math\nN = 69;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "466": {
            "code": "import math\nN = 701;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "467": {
            "code": "import math\nN = 1771;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "468": {
            "code": "import math\nN = 76;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "469": {
            "code": "import math\nN = 869;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "470": {
            "code": "import math\nN = 705;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "471": {
            "code": "import math\nN = -98;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "472": {
            "code": "import math\nN = 1064;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "473": {
            "code": "import math\nN = 241;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "474": {
            "code": "import math\nN = 704;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "475": {
            "code": "import math\nN = 147;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "476": {
            "code": "import math\nN = -74;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "477": {
            "code": "import math\nN = 908;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "478": {
            "code": "import math\nN = 1442;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "479": {
            "code": "import math\nN = 1011;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "480": {
            "code": "import math\nN = 547;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "481": {
            "code": "import math\nN = 1828;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "482": {
            "code": "import math\nN = 859;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "483": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "484": {
            "code": "import math\nN = -74;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "485": {
            "code": "import math\nN = 496;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "486": {
            "code": "import math\nN = -42;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "487": {
            "code": "import math\nN = -98;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "488": {
            "code": "import math\nN = -46;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "489": {
            "code": "import math\nN = 1745;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "490": {
            "code": "import math\nN = 383;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "491": {
            "code": "import math\nN = 1797;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "492": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "493": {
            "code": "import math\nN = 1366;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "494": {
            "code": "import math\nN = 1249;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "495": {
            "code": "import math\nN = 188;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "496": {
            "code": "import math\nN = 1674;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "497": {
            "code": "import math\nN = 1799;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "498": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "499": {
            "code": "import math\nN = 1954;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "500": {
            "code": "import math\nN = -13;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "501": {
            "code": "import math\nN = 1621;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "502": {
            "code": "import math\nN = 606;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "503": {
            "code": "import math\nN = 1988;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "504": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "505": {
            "code": "import math\nN = 770;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "506": {
            "code": "import math\nN = 1307;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "507": {
            "code": "import math\nN = -52;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "508": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "509": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "510": {
            "code": "import math\nN = 481;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "511": {
            "code": "import math\nN = 1179;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "512": {
            "code": "import math\nN = 1827;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "513": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "514": {
            "code": "import math\nN = 12;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "515": {
            "code": "import math\nN = 539;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "516": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "517": {
            "code": "import math\nN = 460;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "518": {
            "code": "import math\nN = 554;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "519": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "520": {
            "code": "import math\nN = 123;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "521": {
            "code": "import math\nN = 400;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "522": {
            "code": "import math\nN = 1490;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "523": {
            "code": "import math\nN = 1119;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "524": {
            "code": "import math\nN = 1020;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "525": {
            "code": "import math\nN = 259;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "526": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "527": {
            "code": "import math\nN = 1084;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "528": {
            "code": "import math\nN = 1288;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "529": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "530": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "531": {
            "code": "import math\nN = 444;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "532": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "533": {
            "code": "import math\nN = -80;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "534": {
            "code": "import math\nN = 566;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "535": {
            "code": "import math\nN = -5;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "536": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "537": {
            "code": "import math\nN = 26;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "538": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "539": {
            "code": "import math\nN = 433;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "540": {
            "code": "import math\nN = 22;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "541": {
            "code": "import math\nN = -12;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "542": {
            "code": "import math\nN = 255;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "543": {
            "code": "import math\nN = 336;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "544": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "545": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "546": {
            "code": "import math\nN = 1576;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "547": {
            "code": "import math\nN = 26;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "548": {
            "code": "import math\nN = -99;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "549": {
            "code": "import math\nN = 1596;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "550": {
            "code": "import math\nN = 1906;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "551": {
            "code": "import math\nN = 397;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "552": {
            "code": "import math\nN = 1935;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "553": {
            "code": "import math\nN = 583;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "554": {
            "code": "import math\nN = 446;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "555": {
            "code": "import math\nN = 468;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "556": {
            "code": "import math\nN = -27;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "557": {
            "code": "import math\nN = 506;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "558": {
            "code": "import math\nN = 1660;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "559": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "560": {
            "code": "import math\nN = 520;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "561": {
            "code": "import math\nN = -34;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "562": {
            "code": "import math\nN = 418;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "563": {
            "code": "import math\nN = 1746;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "564": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "565": {
            "code": "import math\nN = 720;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "566": {
            "code": "import math\nN = 905;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "567": {
            "code": "import math\nN = 1961;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "568": {
            "code": "import math\nN = 1240;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "569": {
            "code": "import math\nN = 1986;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "570": {
            "code": "import math\nN = 1427;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "571": {
            "code": "import math\nN = -13;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "572": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "573": {
            "code": "import math\nN = 1886;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "574": {
            "code": "import math\nN = 256;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "575": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "576": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "577": {
            "code": "import math\nN = 1468;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "578": {
            "code": "import math\nN = 1990;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "579": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "580": {
            "code": "import math\nN = 635;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "581": {
            "code": "import math\nN = 13;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "582": {
            "code": "import math\nN = 586;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "583": {
            "code": "import math\nN = 479;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "584": {
            "code": "import math\nN = 1121;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "585": {
            "code": "import math\nN = 624;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "586": {
            "code": "import math\nN = 1787;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "587": {
            "code": "import math\nN = 189;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "588": {
            "code": "import math\nN = 1996;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "589": {
            "code": "import math\nN = -65;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "590": {
            "code": "import math\nN = 1773;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "591": {
            "code": "import math\nN = 1136;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "592": {
            "code": "import math\nN = 1781;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "593": {
            "code": "import math\nN = 902;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "594": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "595": {
            "code": "import math\nN = 156;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "596": {
            "code": "import math\nN = 1482;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "597": {
            "code": "import math\nN = 373;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "598": {
            "code": "import math\nN = 1441;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "599": {
            "code": "import math\nN = 680;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "600": {
            "code": "import math\nN = 1791;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "601": {
            "code": "import math\nN = 773;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "602": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "603": {
            "code": "import math\nN = 1670;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "604": {
            "code": "import math\nN = 399;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "605": {
            "code": "import math\nN = 53;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "606": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "607": {
            "code": "import math\nN = 1933;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "608": {
            "code": "import math\nN = 949;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "609": {
            "code": "import math\nN = -91;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "610": {
            "code": "import math\nN = 1826;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "611": {
            "code": "import math\nN = -53;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "612": {
            "code": "import math\nN = 407;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "613": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "614": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "615": {
            "code": "import math\nN = -25;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "616": {
            "code": "import math\nN = 1610;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "617": {
            "code": "import math\nN = -56;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "618": {
            "code": "import math\nN = 250;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "619": {
            "code": "import math\nN = 1646;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "620": {
            "code": "import math\nN = 413;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "621": {
            "code": "import math\nN = 462;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "622": {
            "code": "import math\nN = 209;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "623": {
            "code": "import math\nN = 1311;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "624": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "625": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "626": {
            "code": "import math\nN = -73;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "627": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "628": {
            "code": "import math\nN = -65;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "629": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "630": {
            "code": "import math\nN = 1610;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "631": {
            "code": "import math\nN = 186;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "632": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "633": {
            "code": "import math\nN = 38;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "634": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "635": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "636": {
            "code": "import math\nN = 1905;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "637": {
            "code": "import math\nN = 1757;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "638": {
            "code": "import math\nN = 1780;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "639": {
            "code": "import math\nN = 22;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "640": {
            "code": "import math\nN = 498;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "641": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "642": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "643": {
            "code": "import math\nN = 716;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "644": {
            "code": "import math\nN = 1634;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "645": {
            "code": "import math\nN = 662;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "646": {
            "code": "import math\nN = 257;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "647": {
            "code": "import math\nN = 808;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "648": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "649": {
            "code": "import math\nN = 1302;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "650": {
            "code": "import math\nN = 321;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "651": {
            "code": "import math\nN = 439;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "652": {
            "code": "import math\nN = 358;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "653": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "654": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "655": {
            "code": "import math\nN = 1392;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "656": {
            "code": "import math\nN = 243;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "657": {
            "code": "import math\nN = 1023;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "658": {
            "code": "import math\nN = 1709;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "659": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "660": {
            "code": "import math\nN = -56;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "661": {
            "code": "import math\nN = 1252;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "662": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "663": {
            "code": "import math\nN = 831;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "664": {
            "code": "import math\nN = 422;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "665": {
            "code": "import math\nN = 850;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "666": {
            "code": "import math\nN = -56;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "667": {
            "code": "import math\nN = 1289;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "668": {
            "code": "import math\nN = 304;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "669": {
            "code": "import math\nN = 1575;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "670": {
            "code": "import math\nN = -62;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "671": {
            "code": "import math\nN = 969;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "672": {
            "code": "import math\nN = 251;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "673": {
            "code": "import math\nN = -26;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "674": {
            "code": "import math\nN = 1043;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "675": {
            "code": "import math\nN = 117;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "676": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "677": {
            "code": "import math\nN = 1445;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "678": {
            "code": "import math\nN = 1746;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "679": {
            "code": "import math\nN = -57;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "680": {
            "code": "import math\nN = 370;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "681": {
            "code": "import math\nN = 221;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "682": {
            "code": "import math\nN = 1182;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "683": {
            "code": "import math\nN = 1057;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "684": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "685": {
            "code": "import math\nN = 970;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "686": {
            "code": "import math\nN = 189;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "687": {
            "code": "import math\nN = -67;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "688": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "689": {
            "code": "import math\nN = -65;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "690": {
            "code": "import math\nN = 271;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "691": {
            "code": "import math\nN = 1853;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "692": {
            "code": "import math\nN = 1953;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "693": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "694": {
            "code": "import math\nN = 1147;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "695": {
            "code": "import math\nN = 1961;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "696": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "697": {
            "code": "import math\nN = 484;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "698": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "699": {
            "code": "import math\nN = 918;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "700": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "701": {
            "code": "import math\nN = 27;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "702": {
            "code": "import math\nN = -29;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "703": {
            "code": "import math\nN = 412;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "704": {
            "code": "import math\nN = 1932;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "705": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "706": {
            "code": "import math\nN = 1949;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "707": {
            "code": "import math\nN = 1988;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "708": {
            "code": "import math\nN = 1017;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "709": {
            "code": "import math\nN = 1746;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "710": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "711": {
            "code": "import math\nN = 1425;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "712": {
            "code": "import math\nN = 1224;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "713": {
            "code": "import math\nN = 1201;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "714": {
            "code": "import math\nN = 299;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "715": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "716": {
            "code": "import math\nN = -27;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "717": {
            "code": "import math\nN = 460;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "718": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "719": {
            "code": "import math\nN = 497;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "720": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "721": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "722": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "723": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "724": {
            "code": "import math\nN = 466;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "725": {
            "code": "import math\nN = 409;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "726": {
            "code": "import math\nN = 728;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "727": {
            "code": "import math\nN = 263;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "728": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "729": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "730": {
            "code": "import math\nN = 834;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "731": {
            "code": "import math\nN = 9;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "732": {
            "code": "import math\nN = -36;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "733": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "734": {
            "code": "import math\nN = 424;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "735": {
            "code": "import math\nN = -85;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "736": {
            "code": "import math\nN = 26;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "737": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "738": {
            "code": "import math\nN = -76;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "739": {
            "code": "import math\nN = 195;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "740": {
            "code": "import math\nN = 771;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "741": {
            "code": "import math\nN = 217;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "742": {
            "code": "import math\nN = 1823;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "743": {
            "code": "import math\nN = 556;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "744": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "745": {
            "code": "import math\nN = 684;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "746": {
            "code": "import math\nN = 196;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "747": {
            "code": "import math\nN = 397;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "748": {
            "code": "import math\nN = 1169;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "749": {
            "code": "import math\nN = 84;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "750": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "751": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "752": {
            "code": "import math\nN = 1949;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "753": {
            "code": "import math\nN = -86;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "754": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "755": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "756": {
            "code": "import math\nN = 568;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "757": {
            "code": "import math\nN = 377;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "758": {
            "code": "import math\nN = 266;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "759": {
            "code": "import math\nN = 404;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "760": {
            "code": "import math\nN = 625;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "761": {
            "code": "import math\nN = 973;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "762": {
            "code": "import math\nN = 1120;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "763": {
            "code": "import math\nN = 542;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "764": {
            "code": "import math\nN = 1270;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "765": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "766": {
            "code": "import math\nN = 1056;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "767": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "768": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "769": {
            "code": "import math\nN = 1547;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "770": {
            "code": "import math\nN = 805;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "771": {
            "code": "import math\nN = 741;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "772": {
            "code": "import math\nN = 552;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "773": {
            "code": "import math\nN = -39;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "774": {
            "code": "import math\nN = 1339;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "775": {
            "code": "import math\nN = 1028;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "776": {
            "code": "import math\nN = -99;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "777": {
            "code": "import math\nN = 424;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "778": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "779": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "780": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "781": {
            "code": "import math\nN = 705;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "782": {
            "code": "import math\nN = 346;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "783": {
            "code": "import math\nN = 651;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "784": {
            "code": "import math\nN = 1747;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "785": {
            "code": "import math\nN = 1232;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "786": {
            "code": "import math\nN = 254;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "787": {
            "code": "import math\nN = 420;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "788": {
            "code": "import math\nN = 1987;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "789": {
            "code": "import math\nN = 311;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "790": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "791": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "792": {
            "code": "import math\nN = -50;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "793": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "794": {
            "code": "import math\nN = -77;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "795": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "796": {
            "code": "import math\nN = -92;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "797": {
            "code": "import math\nN = -35;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "798": {
            "code": "import math\nN = -98;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "799": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "800": {
            "code": "import math\nN = 1766;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "801": {
            "code": "import math\nN = 665;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "802": {
            "code": "import math\nN = 56;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "803": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "804": {
            "code": "import math\nN = 414;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "805": {
            "code": "import math\nN = 651;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "806": {
            "code": "import math\nN = -99;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "807": {
            "code": "import math\nN = 546;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "808": {
            "code": "import math\nN = 1639;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "809": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "810": {
            "code": "import math\nN = 1733;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "811": {
            "code": "import math\nN = 110;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "812": {
            "code": "import math\nN = 1163;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "813": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "814": {
            "code": "import math\nN = -4;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "815": {
            "code": "import math\nN = 1964;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "816": {
            "code": "import math\nN = 1516;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "817": {
            "code": "import math\nN = 1946;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "818": {
            "code": "import math\nN = 1120;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "819": {
            "code": "import math\nN = 453;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "820": {
            "code": "import math\nN = 1645;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "821": {
            "code": "import math\nN = 1354;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "822": {
            "code": "import math\nN = 291;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "823": {
            "code": "import math\nN = 407;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "824": {
            "code": "import math\nN = 414;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "825": {
            "code": "import math\nN = 950;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "826": {
            "code": "import math\nN = 336;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "827": {
            "code": "import math\nN = 722;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "828": {
            "code": "import math\nN = 76;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "829": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "830": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "831": {
            "code": "import math\nN = -9;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "832": {
            "code": "import math\nN = 654;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "833": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "834": {
            "code": "import math\nN = -74;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "835": {
            "code": "import math\nN = 1587;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "836": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "837": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "838": {
            "code": "import math\nN = 708;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "839": {
            "code": "import math\nN = 563;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "840": {
            "code": "import math\nN = -86;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "841": {
            "code": "import math\nN = 189;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "842": {
            "code": "import math\nN = 634;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "843": {
            "code": "import math\nN = 293;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "844": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "845": {
            "code": "import math\nN = -58;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "846": {
            "code": "import math\nN = -92;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "847": {
            "code": "import math\nN = 253;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "848": {
            "code": "import math\nN = 92;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "849": {
            "code": "import math\nN = 862;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "850": {
            "code": "import math\nN = 423;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "851": {
            "code": "import math\nN = 548;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "852": {
            "code": "import math\nN = -17;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "853": {
            "code": "import math\nN = -61;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "854": {
            "code": "import math\nN = 21;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "855": {
            "code": "import math\nN = 1659;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "856": {
            "code": "import math\nN = -89;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "857": {
            "code": "import math\nN = 767;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "858": {
            "code": "import math\nN = -48;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "859": {
            "code": "import math\nN = 1020;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "860": {
            "code": "import math\nN = -92;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "861": {
            "code": "import math\nN = 1578;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "862": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "863": {
            "code": "import math\nN = 1393;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "864": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "865": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "866": {
            "code": "import math\nN = -57;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "867": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "868": {
            "code": "import math\nN = 1925;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "869": {
            "code": "import math\nN = 170;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "870": {
            "code": "import math\nN = -92;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "871": {
            "code": "import math\nN = 1718;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "872": {
            "code": "import math\nN = 1171;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "873": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "874": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "875": {
            "code": "import math\nN = 157;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "876": {
            "code": "import math\nN = 1916;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "877": {
            "code": "import math\nN = 1541;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "878": {
            "code": "import math\nN = 411;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "879": {
            "code": "import math\nN = 1689;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "880": {
            "code": "import math\nN = 129;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "881": {
            "code": "import math\nN = 1851;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "882": {
            "code": "import math\nN = 1764;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "883": {
            "code": "import math\nN = 626;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "884": {
            "code": "import math\nN = 491;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "885": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "886": {
            "code": "import math\nN = 724;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "887": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "888": {
            "code": "import math\nN = 183;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "889": {
            "code": "import math\nN = 1395;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "890": {
            "code": "import math\nN = 1859;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "891": {
            "code": "import math\nN = 1480;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "892": {
            "code": "import math\nN = 610;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "893": {
            "code": "import math\nN = 981;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "894": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "895": {
            "code": "import math\nN = 851;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "896": {
            "code": "import math\nN = 1533;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "897": {
            "code": "import math\nN = 1161;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "898": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "899": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "900": {
            "code": "import math\nN = -42;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "901": {
            "code": "import math\nN = 1888;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "902": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "903": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "904": {
            "code": "import math\nN = 1304;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "905": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "906": {
            "code": "import math\nN = 2000;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "907": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "908": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "909": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "910": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "911": {
            "code": "import math\nN = 1067;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "912": {
            "code": "import math\nN = -99;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "913": {
            "code": "import math\nN = 270;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "914": {
            "code": "import math\nN = 1883;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "915": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "916": {
            "code": "import math\nN = 681;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "917": {
            "code": "import math\nN = -67;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "918": {
            "code": "import math\nN = 1938;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "919": {
            "code": "import math\nN = 1985;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "920": {
            "code": "import math\nN = 1482;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "921": {
            "code": "import math\nN = 1995;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "922": {
            "code": "import math\nN = 1755;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "923": {
            "code": "import math\nN = 263;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "924": {
            "code": "import math\nN = 533;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "925": {
            "code": "import math\nN = 1173;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "926": {
            "code": "import math\nN = 1090;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "927": {
            "code": "import math\nN = 1353;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "928": {
            "code": "import math\nN = 1509;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "929": {
            "code": "import math\nN = 809;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "930": {
            "code": "import math\nN = -99;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "931": {
            "code": "import math\nN = 357;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "932": {
            "code": "import math\nN = 501;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "933": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "934": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "935": {
            "code": "import math\nN = 85;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "936": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "937": {
            "code": "import math\nN = 337;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "938": {
            "code": "import math\nN = 404;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "939": {
            "code": "import math\nN = -26;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "940": {
            "code": "import math\nN = 1098;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "941": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "942": {
            "code": "import math\nN = -22;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "943": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "944": {
            "code": "import math\nN = 1920;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "945": {
            "code": "import math\nN = 575;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "946": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "947": {
            "code": "import math\nN = 1746;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "948": {
            "code": "import math\nN = 1790;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "949": {
            "code": "import math\nN = -74;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "950": {
            "code": "import math\nN = 1482;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "951": {
            "code": "import math\nN = 77;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "952": {
            "code": "import math\nN = 765;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "953": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "954": {
            "code": "import math\nN = 686;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "955": {
            "code": "import math\nN = 1313;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "956": {
            "code": "import math\nN = 606;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "957": {
            "code": "import math\nN = 328;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "958": {
            "code": "import math\nN = 1956;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "959": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "960": {
            "code": "import math\nN = 1252;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "961": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "962": {
            "code": "import math\nN = 79;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "963": {
            "code": "import math\nN = -28;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "964": {
            "code": "import math\nN = -14;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "965": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "966": {
            "code": "import math\nN = 587;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "967": {
            "code": "import math\nN = 10;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "968": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "969": {
            "code": "import math\nN = -33;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "970": {
            "code": "import math\nN = 507;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "971": {
            "code": "import math\nN = 1304;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "972": {
            "code": "import math\nN = 114;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "973": {
            "code": "import math\nN = -71;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "974": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "975": {
            "code": "import math\nN = 1355;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "976": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "977": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "978": {
            "code": "import math\nN = 1150;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "979": {
            "code": "import math\nN = -86;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "980": {
            "code": "import math\nN = 369;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "981": {
            "code": "import math\nN = 1394;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "982": {
            "code": "import math\nN = 168;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "983": {
            "code": "import math\nN = 802;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "984": {
            "code": "import math\nN = 1469;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "985": {
            "code": "import math\nN = -90;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "986": {
            "code": "import math\nN = 361;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "987": {
            "code": "import math\nN = 1404;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "988": {
            "code": "import math\nN = 1234;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "989": {
            "code": "import math\nN = 189;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "990": {
            "code": "import math\nN = 1956;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "991": {
            "code": "import math\nN = -41;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "992": {
            "code": "import math\nN = 656;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "993": {
            "code": "import math\nN = 1027;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "994": {
            "code": "import math\nN = -4;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "995": {
            "code": "import math\nN = 385;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "996": {
            "code": "import math\nN = 407;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "997": {
            "code": "import math\nN = -92;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "998": {
            "code": "import math\nN = 1998;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "999": {
            "code": "import math\nN = -60;K = 3\nA = [7, 3, 1, 8, 4, 6, 2, 5]\npos_of_1 = A.index(1)\nif K >= pos_of_1 + 1 or N - K <= pos_of_1:\n  print(math.ceil((N - K) / (K - 1)) + 1) \nelse:\n  L = A[:pos_of_1 + 1]\n  R = A[pos_of_1:]\n  res = []\n  for i in range(1, K):\n    l = math.ceil((len(L) - i) / (K - 1)) + 1\n    r = math.ceil((len(R) - K - 1 + i) / (K - 1)) + 1\n    res.append(l + r - 1)\n  print(min(res))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "13799": {
        "0": {
            "code": "import math\nimport sys\nn = -67\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "1": {
            "code": "import math\nimport sys\nn = 1971\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "2": {
            "code": "import math\nimport sys\nn = 263\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "3": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "4": {
            "code": "import math\nimport sys\nn = 16\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "5": {
            "code": "import math\nimport sys\nn = 22\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "6": {
            "code": "import math\nimport sys\nn = 973\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "7": {
            "code": "import math\nimport sys\nn = 1689\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "8": {
            "code": "import math\nimport sys\nn = 1794\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "9": {
            "code": "import math\nimport sys\nn = 987\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "10": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "11": {
            "code": "import math\nimport sys\nn = 396\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "12": {
            "code": "import math\nimport sys\nn = 403\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "13": {
            "code": "import math\nimport sys\nn = 1763\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "14": {
            "code": "import math\nimport sys\nn = -37\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "15": {
            "code": "import math\nimport sys\nn = 1883\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "16": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "17": {
            "code": "import math\nimport sys\nn = 1715\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "18": {
            "code": "import math\nimport sys\nn = 1829\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "19": {
            "code": "import math\nimport sys\nn = 1373\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "20": {
            "code": "import math\nimport sys\nn = 862\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "21": {
            "code": "import math\nimport sys\nn = 1787\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "22": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "23": {
            "code": "import math\nimport sys\nn = 402\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "24": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "25": {
            "code": "import math\nimport sys\nn = 424\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "26": {
            "code": "import math\nimport sys\nn = 83\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "27": {
            "code": "import math\nimport sys\nn = 1310\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "28": {
            "code": "import math\nimport sys\nn = 551\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "29": {
            "code": "import math\nimport sys\nn = 421\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "30": {
            "code": "import math\nimport sys\nn = -98\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "31": {
            "code": "import math\nimport sys\nn = 1904\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "32": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "33": {
            "code": "import math\nimport sys\nn = 953\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "34": {
            "code": "import math\nimport sys\nn = 1700\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "35": {
            "code": "import math\nimport sys\nn = 217\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "36": {
            "code": "import math\nimport sys\nn = 184\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "37": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "38": {
            "code": "import math\nimport sys\nn = 26\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "39": {
            "code": "import math\nimport sys\nn = 142\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "40": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "41": {
            "code": "import math\nimport sys\nn = 1966\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "42": {
            "code": "import math\nimport sys\nn = -39\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "43": {
            "code": "import math\nimport sys\nn = 1444\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "44": {
            "code": "import math\nimport sys\nn = 110\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "45": {
            "code": "import math\nimport sys\nn = -53\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "46": {
            "code": "import math\nimport sys\nn = 1574\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "47": {
            "code": "import math\nimport sys\nn = 846\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "48": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "49": {
            "code": "import math\nimport sys\nn = -9\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "50": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "51": {
            "code": "import math\nimport sys\nn = 1932\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "52": {
            "code": "import math\nimport sys\nn = 791\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "53": {
            "code": "import math\nimport sys\nn = 458\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "54": {
            "code": "import math\nimport sys\nn = 683\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "55": {
            "code": "import math\nimport sys\nn = -66\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "56": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "57": {
            "code": "import math\nimport sys\nn = 614\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "58": {
            "code": "import math\nimport sys\nn = -68\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "59": {
            "code": "import math\nimport sys\nn = 1269\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "60": {
            "code": "import math\nimport sys\nn = 1508\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "61": {
            "code": "import math\nimport sys\nn = 1972\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "62": {
            "code": "import math\nimport sys\nn = 564\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "63": {
            "code": "import math\nimport sys\nn = 835\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "64": {
            "code": "import math\nimport sys\nn = 1239\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "65": {
            "code": "import math\nimport sys\nn = 545\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "66": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "67": {
            "code": "import math\nimport sys\nn = 1118\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "68": {
            "code": "import math\nimport sys\nn = 1676\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "69": {
            "code": "import math\nimport sys\nn = -92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "70": {
            "code": "import math\nimport sys\nn = 46\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "71": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "72": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "73": {
            "code": "import math\nimport sys\nn = 1888\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "74": {
            "code": "import math\nimport sys\nn = 400\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "75": {
            "code": "import math\nimport sys\nn = 429\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "76": {
            "code": "import math\nimport sys\nn = 442\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "77": {
            "code": "import math\nimport sys\nn = 413\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "78": {
            "code": "import math\nimport sys\nn = 109\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "79": {
            "code": "import math\nimport sys\nn = 719\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "80": {
            "code": "import math\nimport sys\nn = -67\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "81": {
            "code": "import math\nimport sys\nn = -57\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "82": {
            "code": "import math\nimport sys\nn = 880\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "83": {
            "code": "import math\nimport sys\nn = -92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "84": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "85": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "86": {
            "code": "import math\nimport sys\nn = 1234\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "87": {
            "code": "import math\nimport sys\nn = 1736\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "88": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "89": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "90": {
            "code": "import math\nimport sys\nn = 631\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "91": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "92": {
            "code": "import math\nimport sys\nn = 834\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "93": {
            "code": "import math\nimport sys\nn = 1187\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "94": {
            "code": "import math\nimport sys\nn = 930\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "95": {
            "code": "import math\nimport sys\nn = -52\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "96": {
            "code": "import math\nimport sys\nn = 959\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "97": {
            "code": "import math\nimport sys\nn = 559\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "98": {
            "code": "import math\nimport sys\nn = 257\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "99": {
            "code": "import math\nimport sys\nn = 117\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "100": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "101": {
            "code": "import math\nimport sys\nn = 491\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "102": {
            "code": "import math\nimport sys\nn = 993\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "103": {
            "code": "import math\nimport sys\nn = 1008\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "104": {
            "code": "import math\nimport sys\nn = 1827\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "105": {
            "code": "import math\nimport sys\nn = 359\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "106": {
            "code": "import math\nimport sys\nn = -38\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "107": {
            "code": "import math\nimport sys\nn = 316\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "108": {
            "code": "import math\nimport sys\nn = -74\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "109": {
            "code": "import math\nimport sys\nn = 1054\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "110": {
            "code": "import math\nimport sys\nn = 397\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "111": {
            "code": "import math\nimport sys\nn = 1707\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "112": {
            "code": "import math\nimport sys\nn = 1731\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "113": {
            "code": "import math\nimport sys\nn = 1883\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "114": {
            "code": "import math\nimport sys\nn = -89\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "115": {
            "code": "import math\nimport sys\nn = 126\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "116": {
            "code": "import math\nimport sys\nn = 189\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "117": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "118": {
            "code": "import math\nimport sys\nn = 1964\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "119": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "120": {
            "code": "import math\nimport sys\nn = 1243\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "121": {
            "code": "import math\nimport sys\nn = 1635\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "122": {
            "code": "import math\nimport sys\nn = 803\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "123": {
            "code": "import math\nimport sys\nn = 414\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "124": {
            "code": "import math\nimport sys\nn = 1533\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "125": {
            "code": "import math\nimport sys\nn = 1577\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "126": {
            "code": "import math\nimport sys\nn = 1325\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "127": {
            "code": "import math\nimport sys\nn = 481\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "128": {
            "code": "import math\nimport sys\nn = -89\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "129": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "130": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "131": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "132": {
            "code": "import math\nimport sys\nn = 1754\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "133": {
            "code": "import math\nimport sys\nn = 1477\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "134": {
            "code": "import math\nimport sys\nn = 417\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "135": {
            "code": "import math\nimport sys\nn = 460\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "136": {
            "code": "import math\nimport sys\nn = 408\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "137": {
            "code": "import math\nimport sys\nn = -99\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "138": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "139": {
            "code": "import math\nimport sys\nn = 306\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "140": {
            "code": "import math\nimport sys\nn = 651\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "141": {
            "code": "import math\nimport sys\nn = -98\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "142": {
            "code": "import math\nimport sys\nn = -76\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "143": {
            "code": "import math\nimport sys\nn = 1224\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "144": {
            "code": "import math\nimport sys\nn = 171\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "145": {
            "code": "import math\nimport sys\nn = -99\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "146": {
            "code": "import math\nimport sys\nn = 931\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "147": {
            "code": "import math\nimport sys\nn = 1942\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "148": {
            "code": "import math\nimport sys\nn = -26\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "149": {
            "code": "import math\nimport sys\nn = 359\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "150": {
            "code": "import math\nimport sys\nn = 1091\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "151": {
            "code": "import math\nimport sys\nn = 1190\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "152": {
            "code": "import math\nimport sys\nn = 502\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "153": {
            "code": "import math\nimport sys\nn = 1159\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "154": {
            "code": "import math\nimport sys\nn = 435\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "155": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "156": {
            "code": "import math\nimport sys\nn = 571\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "157": {
            "code": "import math\nimport sys\nn = 645\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "158": {
            "code": "import math\nimport sys\nn = 1464\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "159": {
            "code": "import math\nimport sys\nn = 172\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "160": {
            "code": "import math\nimport sys\nn = 491\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "161": {
            "code": "import math\nimport sys\nn = 10\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "162": {
            "code": "import math\nimport sys\nn = 1999\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "163": {
            "code": "import math\nimport sys\nn = 412\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "164": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "165": {
            "code": "import math\nimport sys\nn = 1887\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "166": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "167": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "168": {
            "code": "import math\nimport sys\nn = 1222\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "169": {
            "code": "import math\nimport sys\nn = -86\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "170": {
            "code": "import math\nimport sys\nn = 1055\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "171": {
            "code": "import math\nimport sys\nn = 467\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "172": {
            "code": "import math\nimport sys\nn = 1958\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "173": {
            "code": "import math\nimport sys\nn = 392\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "174": {
            "code": "import math\nimport sys\nn = 185\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "175": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "176": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "177": {
            "code": "import math\nimport sys\nn = -42\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "178": {
            "code": "import math\nimport sys\nn = 139\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "179": {
            "code": "import math\nimport sys\nn = 413\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "180": {
            "code": "import math\nimport sys\nn = 886\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "181": {
            "code": "import math\nimport sys\nn = 1640\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "182": {
            "code": "import math\nimport sys\nn = 339\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "183": {
            "code": "import math\nimport sys\nn = -61\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "184": {
            "code": "import math\nimport sys\nn = -46\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "185": {
            "code": "import math\nimport sys\nn = 555\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "186": {
            "code": "import math\nimport sys\nn = 1164\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "187": {
            "code": "import math\nimport sys\nn = 944\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "188": {
            "code": "import math\nimport sys\nn = 711\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "189": {
            "code": "import math\nimport sys\nn = 1266\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "190": {
            "code": "import math\nimport sys\nn = 1755\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "191": {
            "code": "import math\nimport sys\nn = -62\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "192": {
            "code": "import math\nimport sys\nn = 243\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "193": {
            "code": "import math\nimport sys\nn = 1940\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "194": {
            "code": "import math\nimport sys\nn = 243\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "195": {
            "code": "import math\nimport sys\nn = 1138\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "196": {
            "code": "import math\nimport sys\nn = 1454\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "197": {
            "code": "import math\nimport sys\nn = 455\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "198": {
            "code": "import math\nimport sys\nn = -88\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "199": {
            "code": "import math\nimport sys\nn = 612\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "200": {
            "code": "import math\nimport sys\nn = 462\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "201": {
            "code": "import math\nimport sys\nn = 445\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "202": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "203": {
            "code": "import math\nimport sys\nn = 489\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "204": {
            "code": "import math\nimport sys\nn = 1345\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "205": {
            "code": "import math\nimport sys\nn = 822\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "206": {
            "code": "import math\nimport sys\nn = -26\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "207": {
            "code": "import math\nimport sys\nn = 500\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "208": {
            "code": "import math\nimport sys\nn = 1051\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "209": {
            "code": "import math\nimport sys\nn = 1711\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "210": {
            "code": "import math\nimport sys\nn = 1727\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "211": {
            "code": "import math\nimport sys\nn = 1463\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "212": {
            "code": "import math\nimport sys\nn = -98\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "213": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "214": {
            "code": "import math\nimport sys\nn = -74\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "215": {
            "code": "import math\nimport sys\nn = 1853\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "216": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "217": {
            "code": "import math\nimport sys\nn = 378\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "218": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "219": {
            "code": "import math\nimport sys\nn = 306\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "220": {
            "code": "import math\nimport sys\nn = 1891\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "221": {
            "code": "import math\nimport sys\nn = 1405\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "222": {
            "code": "import math\nimport sys\nn = 645\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "223": {
            "code": "import math\nimport sys\nn = 465\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "224": {
            "code": "import math\nimport sys\nn = 570\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "225": {
            "code": "import math\nimport sys\nn = 1240\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "226": {
            "code": "import math\nimport sys\nn = 208\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "227": {
            "code": "import math\nimport sys\nn = 360\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "228": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "229": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "230": {
            "code": "import math\nimport sys\nn = 1612\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "231": {
            "code": "import math\nimport sys\nn = 1931\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "232": {
            "code": "import math\nimport sys\nn = 1963\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "233": {
            "code": "import math\nimport sys\nn = 877\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "234": {
            "code": "import math\nimport sys\nn = 1939\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "235": {
            "code": "import math\nimport sys\nn = -59\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "236": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "237": {
            "code": "import math\nimport sys\nn = 359\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "238": {
            "code": "import math\nimport sys\nn = 503\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "239": {
            "code": "import math\nimport sys\nn = -100\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "240": {
            "code": "import math\nimport sys\nn = 1201\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "241": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "242": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "243": {
            "code": "import math\nimport sys\nn = 1142\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "244": {
            "code": "import math\nimport sys\nn = 438\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "245": {
            "code": "import math\nimport sys\nn = 1345\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "246": {
            "code": "import math\nimport sys\nn = 1840\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "247": {
            "code": "import math\nimport sys\nn = 794\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "248": {
            "code": "import math\nimport sys\nn = 1753\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "249": {
            "code": "import math\nimport sys\nn = 986\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "250": {
            "code": "import math\nimport sys\nn = 1883\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "251": {
            "code": "import math\nimport sys\nn = 251\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "252": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "253": {
            "code": "import math\nimport sys\nn = 746\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "254": {
            "code": "import math\nimport sys\nn = 1810\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "255": {
            "code": "import math\nimport sys\nn = 1098\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "256": {
            "code": "import math\nimport sys\nn = 1847\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "257": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "258": {
            "code": "import math\nimport sys\nn = 394\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "259": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "260": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "261": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "262": {
            "code": "import math\nimport sys\nn = 515\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "263": {
            "code": "import math\nimport sys\nn = -99\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "264": {
            "code": "import math\nimport sys\nn = 842\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "265": {
            "code": "import math\nimport sys\nn = 1158\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "266": {
            "code": "import math\nimport sys\nn = 329\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "267": {
            "code": "import math\nimport sys\nn = -74\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "268": {
            "code": "import math\nimport sys\nn = 257\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "269": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "270": {
            "code": "import math\nimport sys\nn = 413\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "271": {
            "code": "import math\nimport sys\nn = 493\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "272": {
            "code": "import math\nimport sys\nn = 303\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "273": {
            "code": "import math\nimport sys\nn = 614\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "274": {
            "code": "import math\nimport sys\nn = 625\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "275": {
            "code": "import math\nimport sys\nn = 1958\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "276": {
            "code": "import math\nimport sys\nn = 1152\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "277": {
            "code": "import math\nimport sys\nn = 748\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "278": {
            "code": "import math\nimport sys\nn = 200\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "279": {
            "code": "import math\nimport sys\nn = -62\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "280": {
            "code": "import math\nimport sys\nn = 597\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "281": {
            "code": "import math\nimport sys\nn = 1384\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "282": {
            "code": "import math\nimport sys\nn = 1821\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "283": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "284": {
            "code": "import math\nimport sys\nn = 1606\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "285": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "286": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "287": {
            "code": "import math\nimport sys\nn = 1686\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "288": {
            "code": "import math\nimport sys\nn = 1898\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "289": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "290": {
            "code": "import math\nimport sys\nn = 1918\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "291": {
            "code": "import math\nimport sys\nn = 626\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "292": {
            "code": "import math\nimport sys\nn = 1933\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "293": {
            "code": "import math\nimport sys\nn = 1072\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "294": {
            "code": "import math\nimport sys\nn = 1535\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "295": {
            "code": "import math\nimport sys\nn = 680\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "296": {
            "code": "import math\nimport sys\nn = 1255\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "297": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "298": {
            "code": "import math\nimport sys\nn = 1922\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "299": {
            "code": "import math\nimport sys\nn = 1107\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "300": {
            "code": "import math\nimport sys\nn = 363\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "301": {
            "code": "import math\nimport sys\nn = 395\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "302": {
            "code": "import math\nimport sys\nn = -92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "303": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "304": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "305": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "306": {
            "code": "import math\nimport sys\nn = 187\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "307": {
            "code": "import math\nimport sys\nn = 833\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "308": {
            "code": "import math\nimport sys\nn = 975\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "309": {
            "code": "import math\nimport sys\nn = -93\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "310": {
            "code": "import math\nimport sys\nn = 1815\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "311": {
            "code": "import math\nimport sys\nn = 1875\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "312": {
            "code": "import math\nimport sys\nn = 1395\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "313": {
            "code": "import math\nimport sys\nn = 400\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "314": {
            "code": "import math\nimport sys\nn = 168\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "315": {
            "code": "import math\nimport sys\nn = 468\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "316": {
            "code": "import math\nimport sys\nn = 1755\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "317": {
            "code": "import math\nimport sys\nn = -89\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "318": {
            "code": "import math\nimport sys\nn = -98\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "319": {
            "code": "import math\nimport sys\nn = -58\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "320": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "321": {
            "code": "import math\nimport sys\nn = -88\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "322": {
            "code": "import math\nimport sys\nn = 878\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "323": {
            "code": "import math\nimport sys\nn = -58\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "324": {
            "code": "import math\nimport sys\nn = 2000\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "325": {
            "code": "import math\nimport sys\nn = 727\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "326": {
            "code": "import math\nimport sys\nn = 1800\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "327": {
            "code": "import math\nimport sys\nn = -42\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "328": {
            "code": "import math\nimport sys\nn = -40\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "329": {
            "code": "import math\nimport sys\nn = 570\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "330": {
            "code": "import math\nimport sys\nn = 472\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "331": {
            "code": "import math\nimport sys\nn = -74\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "332": {
            "code": "import math\nimport sys\nn = 1109\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "333": {
            "code": "import math\nimport sys\nn = -17\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "334": {
            "code": "import math\nimport sys\nn = 245\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "335": {
            "code": "import math\nimport sys\nn = -2\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "336": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "337": {
            "code": "import math\nimport sys\nn = 473\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "338": {
            "code": "import math\nimport sys\nn = 1882\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "339": {
            "code": "import math\nimport sys\nn = 711\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "340": {
            "code": "import math\nimport sys\nn = 810\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "341": {
            "code": "import math\nimport sys\nn = 716\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "342": {
            "code": "import math\nimport sys\nn = 843\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "343": {
            "code": "import math\nimport sys\nn = 1013\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "344": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "345": {
            "code": "import math\nimport sys\nn = -62\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "346": {
            "code": "import math\nimport sys\nn = 564\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "347": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "348": {
            "code": "import math\nimport sys\nn = 1195\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "349": {
            "code": "import math\nimport sys\nn = 103\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "350": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "351": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "352": {
            "code": "import math\nimport sys\nn = 1964\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "353": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "354": {
            "code": "import math\nimport sys\nn = 494\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "355": {
            "code": "import math\nimport sys\nn = 561\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "356": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "357": {
            "code": "import math\nimport sys\nn = -25\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "358": {
            "code": "import math\nimport sys\nn = 1425\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "359": {
            "code": "import math\nimport sys\nn = 304\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "360": {
            "code": "import math\nimport sys\nn = 1903\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "361": {
            "code": "import math\nimport sys\nn = 1053\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "362": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "363": {
            "code": "import math\nimport sys\nn = -62\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "364": {
            "code": "import math\nimport sys\nn = 700\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "365": {
            "code": "import math\nimport sys\nn = 1375\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "366": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "367": {
            "code": "import math\nimport sys\nn = 1798\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "368": {
            "code": "import math\nimport sys\nn = 1888\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "369": {
            "code": "import math\nimport sys\nn = 444\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "370": {
            "code": "import math\nimport sys\nn = 1721\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "371": {
            "code": "import math\nimport sys\nn = 1595\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "372": {
            "code": "import math\nimport sys\nn = 144\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "373": {
            "code": "import math\nimport sys\nn = 1489\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "374": {
            "code": "import math\nimport sys\nn = -98\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "375": {
            "code": "import math\nimport sys\nn = 1804\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "376": {
            "code": "import math\nimport sys\nn = 501\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "377": {
            "code": "import math\nimport sys\nn = -99\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "378": {
            "code": "import math\nimport sys\nn = 411\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "379": {
            "code": "import math\nimport sys\nn = 801\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "380": {
            "code": "import math\nimport sys\nn = 1976\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "381": {
            "code": "import math\nimport sys\nn = 1829\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "382": {
            "code": "import math\nimport sys\nn = 104\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "383": {
            "code": "import math\nimport sys\nn = 595\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "384": {
            "code": "import math\nimport sys\nn = 1697\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "385": {
            "code": "import math\nimport sys\nn = 450\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "386": {
            "code": "import math\nimport sys\nn = 1924\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "387": {
            "code": "import math\nimport sys\nn = 1722\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "388": {
            "code": "import math\nimport sys\nn = 853\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "389": {
            "code": "import math\nimport sys\nn = 1240\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "390": {
            "code": "import math\nimport sys\nn = 1824\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "391": {
            "code": "import math\nimport sys\nn = 1009\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "392": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "393": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "394": {
            "code": "import math\nimport sys\nn = 1333\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "395": {
            "code": "import math\nimport sys\nn = -29\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "396": {
            "code": "import math\nimport sys\nn = 189\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "397": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "398": {
            "code": "import math\nimport sys\nn = 371\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "399": {
            "code": "import math\nimport sys\nn = 1243\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "400": {
            "code": "import math\nimport sys\nn = 1375\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "401": {
            "code": "import math\nimport sys\nn = 175\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "402": {
            "code": "import math\nimport sys\nn = 505\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "403": {
            "code": "import math\nimport sys\nn = 36\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "404": {
            "code": "import math\nimport sys\nn = -26\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "405": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "406": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "407": {
            "code": "import math\nimport sys\nn = 1820\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "408": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "409": {
            "code": "import math\nimport sys\nn = 715\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "410": {
            "code": "import math\nimport sys\nn = 220\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "411": {
            "code": "import math\nimport sys\nn = 978\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "412": {
            "code": "import math\nimport sys\nn = 471\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "413": {
            "code": "import math\nimport sys\nn = 1451\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "414": {
            "code": "import math\nimport sys\nn = -61\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "415": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "416": {
            "code": "import math\nimport sys\nn = 217\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "417": {
            "code": "import math\nimport sys\nn = 5\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ]
        },
        "418": {
            "code": "import math\nimport sys\nn = 1235\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "419": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "420": {
            "code": "import math\nimport sys\nn = 1778\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "421": {
            "code": "import math\nimport sys\nn = 58\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "422": {
            "code": "import math\nimport sys\nn = 336\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "423": {
            "code": "import math\nimport sys\nn = 4\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ]
        },
        "424": {
            "code": "import math\nimport sys\nn = 1401\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "425": {
            "code": "import math\nimport sys\nn = -86\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "426": {
            "code": "import math\nimport sys\nn = 739\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "427": {
            "code": "import math\nimport sys\nn = 1842\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "428": {
            "code": "import math\nimport sys\nn = 1138\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "429": {
            "code": "import math\nimport sys\nn = 1798\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "430": {
            "code": "import math\nimport sys\nn = 1879\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "431": {
            "code": "import math\nimport sys\nn = 1504\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "432": {
            "code": "import math\nimport sys\nn = 1555\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "433": {
            "code": "import math\nimport sys\nn = 592\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "434": {
            "code": "import math\nimport sys\nn = -92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "435": {
            "code": "import math\nimport sys\nn = 1000\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "436": {
            "code": "import math\nimport sys\nn = 697\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "437": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "438": {
            "code": "import math\nimport sys\nn = 609\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "439": {
            "code": "import math\nimport sys\nn = 826\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "440": {
            "code": "import math\nimport sys\nn = 1883\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "441": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "442": {
            "code": "import math\nimport sys\nn = 843\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "443": {
            "code": "import math\nimport sys\nn = 882\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "444": {
            "code": "import math\nimport sys\nn = 1729\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "445": {
            "code": "import math\nimport sys\nn = 2000\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "446": {
            "code": "import math\nimport sys\nn = -5\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "447": {
            "code": "import math\nimport sys\nn = 841\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "448": {
            "code": "import math\nimport sys\nn = 1034\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "449": {
            "code": "import math\nimport sys\nn = 1233\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "450": {
            "code": "import math\nimport sys\nn = 71\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "451": {
            "code": "import math\nimport sys\nn = -58\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "452": {
            "code": "import math\nimport sys\nn = 1159\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "453": {
            "code": "import math\nimport sys\nn = 669\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "454": {
            "code": "import math\nimport sys\nn = 1394\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "455": {
            "code": "import math\nimport sys\nn = -92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "456": {
            "code": "import math\nimport sys\nn = 130\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "457": {
            "code": "import math\nimport sys\nn = 1692\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "458": {
            "code": "import math\nimport sys\nn = 925\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "459": {
            "code": "import math\nimport sys\nn = 1816\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "460": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "461": {
            "code": "import math\nimport sys\nn = 565\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "462": {
            "code": "import math\nimport sys\nn = 1155\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "463": {
            "code": "import math\nimport sys\nn = 839\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "464": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "465": {
            "code": "import math\nimport sys\nn = 196\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "466": {
            "code": "import math\nimport sys\nn = 1757\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "467": {
            "code": "import math\nimport sys\nn = 1998\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "468": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "469": {
            "code": "import math\nimport sys\nn = 521\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "470": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "471": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "472": {
            "code": "import math\nimport sys\nn = 1990\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "473": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "474": {
            "code": "import math\nimport sys\nn = 1110\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "475": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "476": {
            "code": "import math\nimport sys\nn = 1297\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "477": {
            "code": "import math\nimport sys\nn = 599\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "478": {
            "code": "import math\nimport sys\nn = 1023\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "479": {
            "code": "import math\nimport sys\nn = 762\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "480": {
            "code": "import math\nimport sys\nn = -99\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "481": {
            "code": "import math\nimport sys\nn = 1271\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "482": {
            "code": "import math\nimport sys\nn = 451\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "483": {
            "code": "import math\nimport sys\nn = 1166\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "484": {
            "code": "import math\nimport sys\nn = 1936\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "485": {
            "code": "import math\nimport sys\nn = 185\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "486": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "487": {
            "code": "import math\nimport sys\nn = 1746\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "488": {
            "code": "import math\nimport sys\nn = 1425\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "489": {
            "code": "import math\nimport sys\nn = 399\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "490": {
            "code": "import math\nimport sys\nn = 1920\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "491": {
            "code": "import math\nimport sys\nn = 1951\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "492": {
            "code": "import math\nimport sys\nn = -57\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "493": {
            "code": "import math\nimport sys\nn = 1847\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "494": {
            "code": "import math\nimport sys\nn = 1697\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "495": {
            "code": "import math\nimport sys\nn = 1939\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "496": {
            "code": "import math\nimport sys\nn = 405\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "497": {
            "code": "import math\nimport sys\nn = 616\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "498": {
            "code": "import math\nimport sys\nn = 1879\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "499": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "500": {
            "code": "import math\nimport sys\nn = 284\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "501": {
            "code": "import math\nimport sys\nn = 1968\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "502": {
            "code": "import math\nimport sys\nn = 1947\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "503": {
            "code": "import math\nimport sys\nn = -39\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "504": {
            "code": "import math\nimport sys\nn = -36\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "505": {
            "code": "import math\nimport sys\nn = 1886\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "506": {
            "code": "import math\nimport sys\nn = 420\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "507": {
            "code": "import math\nimport sys\nn = 166\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "508": {
            "code": "import math\nimport sys\nn = -71\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "509": {
            "code": "import math\nimport sys\nn = 1874\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "510": {
            "code": "import math\nimport sys\nn = 1938\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "511": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "512": {
            "code": "import math\nimport sys\nn = 1920\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "513": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "514": {
            "code": "import math\nimport sys\nn = 486\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "515": {
            "code": "import math\nimport sys\nn = -54\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "516": {
            "code": "import math\nimport sys\nn = 855\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "517": {
            "code": "import math\nimport sys\nn = 832\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "518": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "519": {
            "code": "import math\nimport sys\nn = 1246\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "520": {
            "code": "import math\nimport sys\nn = 1187\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "521": {
            "code": "import math\nimport sys\nn = 805\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "522": {
            "code": "import math\nimport sys\nn = 1391\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "523": {
            "code": "import math\nimport sys\nn = 1887\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "524": {
            "code": "import math\nimport sys\nn = 1021\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "525": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "526": {
            "code": "import math\nimport sys\nn = -23\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "527": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "528": {
            "code": "import math\nimport sys\nn = 1955\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "529": {
            "code": "import math\nimport sys\nn = 1821\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "530": {
            "code": "import math\nimport sys\nn = 1334\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "531": {
            "code": "import math\nimport sys\nn = 311\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "532": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "533": {
            "code": "import math\nimport sys\nn = 1180\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "534": {
            "code": "import math\nimport sys\nn = 724\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "535": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "536": {
            "code": "import math\nimport sys\nn = 217\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "537": {
            "code": "import math\nimport sys\nn = -99\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "538": {
            "code": "import math\nimport sys\nn = 20\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "539": {
            "code": "import math\nimport sys\nn = 1955\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "540": {
            "code": "import math\nimport sys\nn = 367\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "541": {
            "code": "import math\nimport sys\nn = 66\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "542": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "543": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "544": {
            "code": "import math\nimport sys\nn = 1346\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "545": {
            "code": "import math\nimport sys\nn = 511\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "546": {
            "code": "import math\nimport sys\nn = 217\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "547": {
            "code": "import math\nimport sys\nn = 270\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "548": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "549": {
            "code": "import math\nimport sys\nn = -36\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "550": {
            "code": "import math\nimport sys\nn = 900\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "551": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "552": {
            "code": "import math\nimport sys\nn = 670\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "553": {
            "code": "import math\nimport sys\nn = 878\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "554": {
            "code": "import math\nimport sys\nn = 1874\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "555": {
            "code": "import math\nimport sys\nn = 777\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "556": {
            "code": "import math\nimport sys\nn = 741\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "557": {
            "code": "import math\nimport sys\nn = -95\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "558": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "559": {
            "code": "import math\nimport sys\nn = 1703\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "560": {
            "code": "import math\nimport sys\nn = 859\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "561": {
            "code": "import math\nimport sys\nn = 398\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "562": {
            "code": "import math\nimport sys\nn = 1637\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "563": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "564": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "565": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "566": {
            "code": "import math\nimport sys\nn = 1138\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "567": {
            "code": "import math\nimport sys\nn = 1208\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "568": {
            "code": "import math\nimport sys\nn = -47\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "569": {
            "code": "import math\nimport sys\nn = 413\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "570": {
            "code": "import math\nimport sys\nn = 1755\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "571": {
            "code": "import math\nimport sys\nn = 998\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "572": {
            "code": "import math\nimport sys\nn = 480\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "573": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "574": {
            "code": "import math\nimport sys\nn = 409\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "575": {
            "code": "import math\nimport sys\nn = 446\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "576": {
            "code": "import math\nimport sys\nn = 1291\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "577": {
            "code": "import math\nimport sys\nn = 1104\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "578": {
            "code": "import math\nimport sys\nn = 1141\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "579": {
            "code": "import math\nimport sys\nn = 1963\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "580": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "581": {
            "code": "import math\nimport sys\nn = 1152\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "582": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "583": {
            "code": "import math\nimport sys\nn = 1012\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "584": {
            "code": "import math\nimport sys\nn = -41\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "585": {
            "code": "import math\nimport sys\nn = -60\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "586": {
            "code": "import math\nimport sys\nn = 157\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "587": {
            "code": "import math\nimport sys\nn = 92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "588": {
            "code": "import math\nimport sys\nn = 306\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "589": {
            "code": "import math\nimport sys\nn = 16\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "590": {
            "code": "import math\nimport sys\nn = 1662\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "591": {
            "code": "import math\nimport sys\nn = 1722\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "592": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "593": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "594": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "595": {
            "code": "import math\nimport sys\nn = 201\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "596": {
            "code": "import math\nimport sys\nn = 157\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "597": {
            "code": "import math\nimport sys\nn = 361\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "598": {
            "code": "import math\nimport sys\nn = 315\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "599": {
            "code": "import math\nimport sys\nn = 1192\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "600": {
            "code": "import math\nimport sys\nn = 696\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "601": {
            "code": "import math\nimport sys\nn = -36\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "602": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "603": {
            "code": "import math\nimport sys\nn = 1526\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "604": {
            "code": "import math\nimport sys\nn = 1036\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "605": {
            "code": "import math\nimport sys\nn = -64\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "606": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "607": {
            "code": "import math\nimport sys\nn = -70\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "608": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "609": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "610": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "611": {
            "code": "import math\nimport sys\nn = 1892\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "612": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "613": {
            "code": "import math\nimport sys\nn = 471\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "614": {
            "code": "import math\nimport sys\nn = 1148\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "615": {
            "code": "import math\nimport sys\nn = 762\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "616": {
            "code": "import math\nimport sys\nn = 476\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "617": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "618": {
            "code": "import math\nimport sys\nn = 1490\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "619": {
            "code": "import math\nimport sys\nn = 1992\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "620": {
            "code": "import math\nimport sys\nn = -62\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "621": {
            "code": "import math\nimport sys\nn = 367\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "622": {
            "code": "import math\nimport sys\nn = 463\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "623": {
            "code": "import math\nimport sys\nn = 1135\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "624": {
            "code": "import math\nimport sys\nn = -94\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "625": {
            "code": "import math\nimport sys\nn = 624\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "626": {
            "code": "import math\nimport sys\nn = 314\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "627": {
            "code": "import math\nimport sys\nn = 1883\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "628": {
            "code": "import math\nimport sys\nn = 183\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "629": {
            "code": "import math\nimport sys\nn = 750\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "630": {
            "code": "import math\nimport sys\nn = 374\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "631": {
            "code": "import math\nimport sys\nn = 1538\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "632": {
            "code": "import math\nimport sys\nn = 994\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "633": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "634": {
            "code": "import math\nimport sys\nn = 1351\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "635": {
            "code": "import math\nimport sys\nn = 1217\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "636": {
            "code": "import math\nimport sys\nn = 2000\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "637": {
            "code": "import math\nimport sys\nn = 1223\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "638": {
            "code": "import math\nimport sys\nn = 625\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "639": {
            "code": "import math\nimport sys\nn = -50\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "640": {
            "code": "import math\nimport sys\nn = -30\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "641": {
            "code": "import math\nimport sys\nn = -92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "642": {
            "code": "import math\nimport sys\nn = -64\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "643": {
            "code": "import math\nimport sys\nn = 653\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "644": {
            "code": "import math\nimport sys\nn = -16\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "645": {
            "code": "import math\nimport sys\nn = 1996\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "646": {
            "code": "import math\nimport sys\nn = -76\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "647": {
            "code": "import math\nimport sys\nn = 1291\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "648": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "649": {
            "code": "import math\nimport sys\nn = 446\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "650": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "651": {
            "code": "import math\nimport sys\nn = -21\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "652": {
            "code": "import math\nimport sys\nn = 217\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "653": {
            "code": "import math\nimport sys\nn = 941\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "654": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "655": {
            "code": "import math\nimport sys\nn = 888\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "656": {
            "code": "import math\nimport sys\nn = 1302\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "657": {
            "code": "import math\nimport sys\nn = 735\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "658": {
            "code": "import math\nimport sys\nn = -58\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "659": {
            "code": "import math\nimport sys\nn = 810\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "660": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "661": {
            "code": "import math\nimport sys\nn = 1750\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "662": {
            "code": "import math\nimport sys\nn = 553\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "663": {
            "code": "import math\nimport sys\nn = 287\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "664": {
            "code": "import math\nimport sys\nn = 1985\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "665": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "666": {
            "code": "import math\nimport sys\nn = 417\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "667": {
            "code": "import math\nimport sys\nn = -89\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "668": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "669": {
            "code": "import math\nimport sys\nn = 872\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "670": {
            "code": "import math\nimport sys\nn = 934\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "671": {
            "code": "import math\nimport sys\nn = 408\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "672": {
            "code": "import math\nimport sys\nn = 1109\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "673": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "674": {
            "code": "import math\nimport sys\nn = 1370\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "675": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "676": {
            "code": "import math\nimport sys\nn = 1733\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "677": {
            "code": "import math\nimport sys\nn = 420\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "678": {
            "code": "import math\nimport sys\nn = 1867\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "679": {
            "code": "import math\nimport sys\nn = 724\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "680": {
            "code": "import math\nimport sys\nn = 774\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "681": {
            "code": "import math\nimport sys\nn = 1404\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "682": {
            "code": "import math\nimport sys\nn = 1973\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "683": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "684": {
            "code": "import math\nimport sys\nn = 1488\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "685": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "686": {
            "code": "import math\nimport sys\nn = -97\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "687": {
            "code": "import math\nimport sys\nn = 750\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "688": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "689": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "690": {
            "code": "import math\nimport sys\nn = 880\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "691": {
            "code": "import math\nimport sys\nn = 251\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "692": {
            "code": "import math\nimport sys\nn = -79\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "693": {
            "code": "import math\nimport sys\nn = 807\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "694": {
            "code": "import math\nimport sys\nn = 166\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "695": {
            "code": "import math\nimport sys\nn = 1116\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "696": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "697": {
            "code": "import math\nimport sys\nn = 571\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "698": {
            "code": "import math\nimport sys\nn = 485\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "699": {
            "code": "import math\nimport sys\nn = 28\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "700": {
            "code": "import math\nimport sys\nn = -26\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "701": {
            "code": "import math\nimport sys\nn = 926\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "702": {
            "code": "import math\nimport sys\nn = -97\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "703": {
            "code": "import math\nimport sys\nn = 1622\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "704": {
            "code": "import math\nimport sys\nn = 1898\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "705": {
            "code": "import math\nimport sys\nn = 420\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "706": {
            "code": "import math\nimport sys\nn = 1834\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "707": {
            "code": "import math\nimport sys\nn = 1358\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "708": {
            "code": "import math\nimport sys\nn = -26\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "709": {
            "code": "import math\nimport sys\nn = 1755\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "710": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "711": {
            "code": "import math\nimport sys\nn = 839\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "712": {
            "code": "import math\nimport sys\nn = 1985\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "713": {
            "code": "import math\nimport sys\nn = 1689\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "714": {
            "code": "import math\nimport sys\nn = 1983\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "715": {
            "code": "import math\nimport sys\nn = 398\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "716": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "717": {
            "code": "import math\nimport sys\nn = 1891\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "718": {
            "code": "import math\nimport sys\nn = 1314\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "719": {
            "code": "import math\nimport sys\nn = 1008\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "720": {
            "code": "import math\nimport sys\nn = 1755\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "721": {
            "code": "import math\nimport sys\nn = 217\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "722": {
            "code": "import math\nimport sys\nn = 1558\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "723": {
            "code": "import math\nimport sys\nn = 33\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "724": {
            "code": "import math\nimport sys\nn = -58\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "725": {
            "code": "import math\nimport sys\nn = 396\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "726": {
            "code": "import math\nimport sys\nn = -92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "727": {
            "code": "import math\nimport sys\nn = 696\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "728": {
            "code": "import math\nimport sys\nn = 1175\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "729": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "730": {
            "code": "import math\nimport sys\nn = 50\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "731": {
            "code": "import math\nimport sys\nn = 25\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "732": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "733": {
            "code": "import math\nimport sys\nn = 993\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "734": {
            "code": "import math\nimport sys\nn = 528\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "735": {
            "code": "import math\nimport sys\nn = -64\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "736": {
            "code": "import math\nimport sys\nn = 1303\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "737": {
            "code": "import math\nimport sys\nn = 617\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "738": {
            "code": "import math\nimport sys\nn = 24\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "739": {
            "code": "import math\nimport sys\nn = 466\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "740": {
            "code": "import math\nimport sys\nn = -21\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "741": {
            "code": "import math\nimport sys\nn = -100\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "742": {
            "code": "import math\nimport sys\nn = 191\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "743": {
            "code": "import math\nimport sys\nn = 1403\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "744": {
            "code": "import math\nimport sys\nn = 1871\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "745": {
            "code": "import math\nimport sys\nn = 417\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "746": {
            "code": "import math\nimport sys\nn = 84\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "747": {
            "code": "import math\nimport sys\nn = 1997\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "748": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "749": {
            "code": "import math\nimport sys\nn = 705\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "750": {
            "code": "import math\nimport sys\nn = 1133\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "751": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "752": {
            "code": "import math\nimport sys\nn = 580\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "753": {
            "code": "import math\nimport sys\nn = -74\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "754": {
            "code": "import math\nimport sys\nn = -39\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "755": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "756": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "757": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "758": {
            "code": "import math\nimport sys\nn = 552\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "759": {
            "code": "import math\nimport sys\nn = 1770\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "760": {
            "code": "import math\nimport sys\nn = 546\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "761": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "762": {
            "code": "import math\nimport sys\nn = 1311\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "763": {
            "code": "import math\nimport sys\nn = 341\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "764": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "765": {
            "code": "import math\nimport sys\nn = 70\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "766": {
            "code": "import math\nimport sys\nn = 571\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "767": {
            "code": "import math\nimport sys\nn = 1723\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "768": {
            "code": "import math\nimport sys\nn = 320\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "769": {
            "code": "import math\nimport sys\nn = 104\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "770": {
            "code": "import math\nimport sys\nn = -89\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "771": {
            "code": "import math\nimport sys\nn = -56\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "772": {
            "code": "import math\nimport sys\nn = 812\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "773": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "774": {
            "code": "import math\nimport sys\nn = -93\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "775": {
            "code": "import math\nimport sys\nn = -99\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "776": {
            "code": "import math\nimport sys\nn = -92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "777": {
            "code": "import math\nimport sys\nn = 361\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "778": {
            "code": "import math\nimport sys\nn = -14\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "779": {
            "code": "import math\nimport sys\nn = -49\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "780": {
            "code": "import math\nimport sys\nn = -88\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "781": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "782": {
            "code": "import math\nimport sys\nn = -39\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "783": {
            "code": "import math\nimport sys\nn = 1688\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "784": {
            "code": "import math\nimport sys\nn = 173\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "785": {
            "code": "import math\nimport sys\nn = 582\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "786": {
            "code": "import math\nimport sys\nn = -57\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "787": {
            "code": "import math\nimport sys\nn = 1864\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "788": {
            "code": "import math\nimport sys\nn = -86\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "789": {
            "code": "import math\nimport sys\nn = -41\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "790": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "791": {
            "code": "import math\nimport sys\nn = 1661\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "792": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "793": {
            "code": "import math\nimport sys\nn = 722\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "794": {
            "code": "import math\nimport sys\nn = 1109\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "795": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "796": {
            "code": "import math\nimport sys\nn = 955\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "797": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "798": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "799": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "800": {
            "code": "import math\nimport sys\nn = 458\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "801": {
            "code": "import math\nimport sys\nn = 1965\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "802": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "803": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "804": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "805": {
            "code": "import math\nimport sys\nn = 925\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "806": {
            "code": "import math\nimport sys\nn = 1917\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "807": {
            "code": "import math\nimport sys\nn = 209\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "808": {
            "code": "import math\nimport sys\nn = 1829\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "809": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "810": {
            "code": "import math\nimport sys\nn = 606\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "811": {
            "code": "import math\nimport sys\nn = -52\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "812": {
            "code": "import math\nimport sys\nn = 47\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "813": {
            "code": "import math\nimport sys\nn = -11\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "814": {
            "code": "import math\nimport sys\nn = 868\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "815": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "816": {
            "code": "import math\nimport sys\nn = -46\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "817": {
            "code": "import math\nimport sys\nn = 1771\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "818": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "819": {
            "code": "import math\nimport sys\nn = 1688\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "820": {
            "code": "import math\nimport sys\nn = 420\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "821": {
            "code": "import math\nimport sys\nn = 481\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "822": {
            "code": "import math\nimport sys\nn = 1510\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "823": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "824": {
            "code": "import math\nimport sys\nn = 314\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "825": {
            "code": "import math\nimport sys\nn = 495\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "826": {
            "code": "import math\nimport sys\nn = -99\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "827": {
            "code": "import math\nimport sys\nn = 642\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "828": {
            "code": "import math\nimport sys\nn = 1866\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "829": {
            "code": "import math\nimport sys\nn = 1880\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "830": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "831": {
            "code": "import math\nimport sys\nn = 733\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "832": {
            "code": "import math\nimport sys\nn = 26\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "833": {
            "code": "import math\nimport sys\nn = 199\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "834": {
            "code": "import math\nimport sys\nn = 1734\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "835": {
            "code": "import math\nimport sys\nn = 307\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "836": {
            "code": "import math\nimport sys\nn = 1184\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "837": {
            "code": "import math\nimport sys\nn = 1589\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "838": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "839": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "840": {
            "code": "import math\nimport sys\nn = 557\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "841": {
            "code": "import math\nimport sys\nn = 1329\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "842": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "843": {
            "code": "import math\nimport sys\nn = 272\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "844": {
            "code": "import math\nimport sys\nn = 373\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "845": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "846": {
            "code": "import math\nimport sys\nn = 1891\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "847": {
            "code": "import math\nimport sys\nn = -58\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "848": {
            "code": "import math\nimport sys\nn = 1891\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "849": {
            "code": "import math\nimport sys\nn = -98\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "850": {
            "code": "import math\nimport sys\nn = 177\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "851": {
            "code": "import math\nimport sys\nn = -74\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "852": {
            "code": "import math\nimport sys\nn = 1755\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "853": {
            "code": "import math\nimport sys\nn = 354\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "854": {
            "code": "import math\nimport sys\nn = 94\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "855": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "856": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "857": {
            "code": "import math\nimport sys\nn = 716\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "858": {
            "code": "import math\nimport sys\nn = 1493\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "859": {
            "code": "import math\nimport sys\nn = 97\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "860": {
            "code": "import math\nimport sys\nn = 549\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "861": {
            "code": "import math\nimport sys\nn = 1437\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "862": {
            "code": "import math\nimport sys\nn = 1242\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "863": {
            "code": "import math\nimport sys\nn = 1982\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "864": {
            "code": "import math\nimport sys\nn = 1006\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "865": {
            "code": "import math\nimport sys\nn = -30\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "866": {
            "code": "import math\nimport sys\nn = 1408\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "867": {
            "code": "import math\nimport sys\nn = 406\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "868": {
            "code": "import math\nimport sys\nn = -89\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "869": {
            "code": "import math\nimport sys\nn = 1837\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "870": {
            "code": "import math\nimport sys\nn = 1127\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "871": {
            "code": "import math\nimport sys\nn = 1389\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "872": {
            "code": "import math\nimport sys\nn = 459\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "873": {
            "code": "import math\nimport sys\nn = 359\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "874": {
            "code": "import math\nimport sys\nn = 1722\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "875": {
            "code": "import math\nimport sys\nn = 1244\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "876": {
            "code": "import math\nimport sys\nn = 1177\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "877": {
            "code": "import math\nimport sys\nn = 433\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "878": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "879": {
            "code": "import math\nimport sys\nn = 1225\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "880": {
            "code": "import math\nimport sys\nn = 749\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "881": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "882": {
            "code": "import math\nimport sys\nn = 1086\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "883": {
            "code": "import math\nimport sys\nn = 401\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "884": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "885": {
            "code": "import math\nimport sys\nn = 732\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "886": {
            "code": "import math\nimport sys\nn = 1955\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "887": {
            "code": "import math\nimport sys\nn = 1910\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "888": {
            "code": "import math\nimport sys\nn = 1331\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "889": {
            "code": "import math\nimport sys\nn = -4\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "890": {
            "code": "import math\nimport sys\nn = 844\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "891": {
            "code": "import math\nimport sys\nn = 958\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "892": {
            "code": "import math\nimport sys\nn = -74\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "893": {
            "code": "import math\nimport sys\nn = 1919\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "894": {
            "code": "import math\nimport sys\nn = 1150\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "895": {
            "code": "import math\nimport sys\nn = 1912\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "896": {
            "code": "import math\nimport sys\nn = 1147\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "897": {
            "code": "import math\nimport sys\nn = 1595\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "898": {
            "code": "import math\nimport sys\nn = 337\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "899": {
            "code": "import math\nimport sys\nn = 1947\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "900": {
            "code": "import math\nimport sys\nn = -57\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "901": {
            "code": "import math\nimport sys\nn = 1127\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "902": {
            "code": "import math\nimport sys\nn = 1382\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "903": {
            "code": "import math\nimport sys\nn = -16\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "904": {
            "code": "import math\nimport sys\nn = -26\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "905": {
            "code": "import math\nimport sys\nn = 723\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "906": {
            "code": "import math\nimport sys\nn = 1320\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "907": {
            "code": "import math\nimport sys\nn = -41\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "908": {
            "code": "import math\nimport sys\nn = 950\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "909": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "910": {
            "code": "import math\nimport sys\nn = 1748\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "911": {
            "code": "import math\nimport sys\nn = 1765\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "912": {
            "code": "import math\nimport sys\nn = 852\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "913": {
            "code": "import math\nimport sys\nn = 367\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "914": {
            "code": "import math\nimport sys\nn = 316\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "915": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "916": {
            "code": "import math\nimport sys\nn = 1810\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "917": {
            "code": "import math\nimport sys\nn = 31\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "918": {
            "code": "import math\nimport sys\nn = 1299\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "919": {
            "code": "import math\nimport sys\nn = -37\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "920": {
            "code": "import math\nimport sys\nn = 1991\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "921": {
            "code": "import math\nimport sys\nn = -58\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "922": {
            "code": "import math\nimport sys\nn = 224\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "923": {
            "code": "import math\nimport sys\nn = 422\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "924": {
            "code": "import math\nimport sys\nn = 1284\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "925": {
            "code": "import math\nimport sys\nn = 1925\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "926": {
            "code": "import math\nimport sys\nn = 1486\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "927": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "928": {
            "code": "import math\nimport sys\nn = -92\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "929": {
            "code": "import math\nimport sys\nn = 1878\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "930": {
            "code": "import math\nimport sys\nn = 1559\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "931": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "932": {
            "code": "import math\nimport sys\nn = -44\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "933": {
            "code": "import math\nimport sys\nn = 799\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "934": {
            "code": "import math\nimport sys\nn = 1240\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "935": {
            "code": "import math\nimport sys\nn = 395\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "936": {
            "code": "import math\nimport sys\nn = 283\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "937": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "938": {
            "code": "import math\nimport sys\nn = -26\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "939": {
            "code": "import math\nimport sys\nn = -39\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "940": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "941": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "942": {
            "code": "import math\nimport sys\nn = -86\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "943": {
            "code": "import math\nimport sys\nn = 786\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "944": {
            "code": "import math\nimport sys\nn = 1730\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "945": {
            "code": "import math\nimport sys\nn = 363\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "946": {
            "code": "import math\nimport sys\nn = 1913\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "947": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "948": {
            "code": "import math\nimport sys\nn = -41\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "949": {
            "code": "import math\nimport sys\nn = 362\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "950": {
            "code": "import math\nimport sys\nn = 1846\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "951": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "952": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "953": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "954": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "955": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "956": {
            "code": "import math\nimport sys\nn = 155\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "957": {
            "code": "import math\nimport sys\nn = 1883\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "958": {
            "code": "import math\nimport sys\nn = 757\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "959": {
            "code": "import math\nimport sys\nn = -36\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "960": {
            "code": "import math\nimport sys\nn = 1123\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "961": {
            "code": "import math\nimport sys\nn = 1402\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "962": {
            "code": "import math\nimport sys\nn = -65\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "963": {
            "code": "import math\nimport sys\nn = 1215\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "964": {
            "code": "import math\nimport sys\nn = 1132\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "965": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "966": {
            "code": "import math\nimport sys\nn = 1893\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "967": {
            "code": "import math\nimport sys\nn = 519\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "968": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "969": {
            "code": "import math\nimport sys\nn = 513\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "970": {
            "code": "import math\nimport sys\nn = 1568\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "971": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "972": {
            "code": "import math\nimport sys\nn = 700\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "973": {
            "code": "import math\nimport sys\nn = 33\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "974": {
            "code": "import math\nimport sys\nn = -52\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "975": {
            "code": "import math\nimport sys\nn = 730\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "976": {
            "code": "import math\nimport sys\nn = 413\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "977": {
            "code": "import math\nimport sys\nn = 654\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "978": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "979": {
            "code": "import math\nimport sys\nn = 791\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "980": {
            "code": "import math\nimport sys\nn = 1832\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "981": {
            "code": "import math\nimport sys\nn = -67\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "982": {
            "code": "import math\nimport sys\nn = -58\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "983": {
            "code": "import math\nimport sys\nn = 329\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "984": {
            "code": "import math\nimport sys\nn = 1782\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "985": {
            "code": "import math\nimport sys\nn = 1948\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "986": {
            "code": "import math\nimport sys\nn = 449\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "987": {
            "code": "import math\nimport sys\nn = 1744\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "988": {
            "code": "import math\nimport sys\nn = -90\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "989": {
            "code": "import math\nimport sys\nn = 1316\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "990": {
            "code": "import math\nimport sys\nn = 867\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "991": {
            "code": "import math\nimport sys\nn = 220\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "992": {
            "code": "import math\nimport sys\nn = 1981\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "993": {
            "code": "import math\nimport sys\nn = 1409\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "994": {
            "code": "import math\nimport sys\nn = -96\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "995": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "996": {
            "code": "import math\nimport sys\nn = 622\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "997": {
            "code": "import math\nimport sys\nn = 369\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "998": {
            "code": "import math\nimport sys\nn = 1747\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "999": {
            "code": "import math\nimport sys\nn = 1345\na = [1, 2, 1, 2, 1, 2, 1, 2, 1]\nflag = \"Init\"\nans = 0\nfor i in range(1, n):\n    if flag == \"Init\":\n        if a[i - 1] == a[i]:\n            pass\n        elif a[i - 1] > a[i]:\n            flag = \"-\"\n        else:\n            flag = \"+\"\n    elif flag == \"-\":\n        if a[i - 1] < a[i]:\n            ans += 1\n            flag = \"Init\"\n    else:\n        if a[i - 1] > a[i]:\n            ans += 1\n            flag = \"Init\"\nprint(ans + 1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0
            ]
        }
    }
}