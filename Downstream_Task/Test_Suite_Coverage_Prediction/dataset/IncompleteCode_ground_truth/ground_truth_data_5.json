{
    "736": {
        "0": {
            "code": "import math\nk = 1193\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "1": {
            "code": "import math\nk = 136\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "2": {
            "code": "import math\nk = 696\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "3": {
            "code": "import math\nk = -53\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "4": {
            "code": "import math\nk = 760\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "5": {
            "code": "import math\nk = 635\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "6": {
            "code": "import math\nk = -5\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "7": {
            "code": "import math\nk = 1486\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "8": {
            "code": "import math\nk = 897\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "9": {
            "code": "import math\nk = 1033\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "10": {
            "code": "import math\nk = 418\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "11": {
            "code": "import math\nk = 1241\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "12": {
            "code": "import math\nk = 1422\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "13": {
            "code": "import math\nk = 1605\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "14": {
            "code": "import math\nk = 1765\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "15": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "16": {
            "code": "import math\nk = 997\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "17": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "18": {
            "code": "import math\nk = 1815\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "19": {
            "code": "import math\nk = -4\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "20": {
            "code": "import math\nk = 815\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "21": {
            "code": "import math\nk = 373\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "22": {
            "code": "import math\nk = 1814\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "23": {
            "code": "import math\nk = 480\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "24": {
            "code": "import math\nk = -92\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "25": {
            "code": "import math\nk = 18\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "26": {
            "code": "import math\nk = 399\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "27": {
            "code": "import math\nk = -74\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "28": {
            "code": "import math\nk = -79\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "29": {
            "code": "import math\nk = 1990\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "30": {
            "code": "import math\nk = 771\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "31": {
            "code": "import math\nk = 1175\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "32": {
            "code": "import math\nk = 1579\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "33": {
            "code": "import math\nk = -51\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "34": {
            "code": "import math\nk = 1941\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "35": {
            "code": "import math\nk = 1812\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "36": {
            "code": "import math\nk = 568\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "37": {
            "code": "import math\nk = 1679\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "38": {
            "code": "import math\nk = 414\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "39": {
            "code": "import math\nk = 373\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "40": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "41": {
            "code": "import math\nk = 888\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "42": {
            "code": "import math\nk = 1318\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "43": {
            "code": "import math\nk = -99\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "44": {
            "code": "import math\nk = 1898\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "45": {
            "code": "import math\nk = -92\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "46": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "47": {
            "code": "import math\nk = -69\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "48": {
            "code": "import math\nk = 1587\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "49": {
            "code": "import math\nk = 425\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "50": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "51": {
            "code": "import math\nk = 450\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "52": {
            "code": "import math\nk = 1468\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "53": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "54": {
            "code": "import math\nk = 1963\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "55": {
            "code": "import math\nk = 1137\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "56": {
            "code": "import math\nk = -22\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "57": {
            "code": "import math\nk = 1958\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "58": {
            "code": "import math\nk = 337\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "59": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "60": {
            "code": "import math\nk = 1863\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "61": {
            "code": "import math\nk = 1578\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "62": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "63": {
            "code": "import math\nk = -86\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "64": {
            "code": "import math\nk = -97\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "65": {
            "code": "import math\nk = 1570\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "66": {
            "code": "import math\nk = 232\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "67": {
            "code": "import math\nk = 876\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "68": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "69": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "70": {
            "code": "import math\nk = -71\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "71": {
            "code": "import math\nk = 604\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "72": {
            "code": "import math\nk = 1328\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "73": {
            "code": "import math\nk = 626\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "74": {
            "code": "import math\nk = 465\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "75": {
            "code": "import math\nk = 361\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "76": {
            "code": "import math\nk = 521\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "77": {
            "code": "import math\nk = -99\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "78": {
            "code": "import math\nk = 641\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "79": {
            "code": "import math\nk = 885\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "80": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "81": {
            "code": "import math\nk = 1948\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "82": {
            "code": "import math\nk = 708\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "83": {
            "code": "import math\nk = 1531\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "84": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "85": {
            "code": "import math\nk = 401\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "86": {
            "code": "import math\nk = 792\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "87": {
            "code": "import math\nk = 1883\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "88": {
            "code": "import math\nk = 596\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "89": {
            "code": "import math\nk = 1181\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "90": {
            "code": "import math\nk = -89\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "91": {
            "code": "import math\nk = -36\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "92": {
            "code": "import math\nk = 896\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "93": {
            "code": "import math\nk = 1984\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "94": {
            "code": "import math\nk = 115\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "95": {
            "code": "import math\nk = 339\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "96": {
            "code": "import math\nk = -69\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "97": {
            "code": "import math\nk = 959\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "98": {
            "code": "import math\nk = 117\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "99": {
            "code": "import math\nk = 405\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "100": {
            "code": "import math\nk = 316\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "101": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "102": {
            "code": "import math\nk = 525\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "103": {
            "code": "import math\nk = 1541\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "104": {
            "code": "import math\nk = -67\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "105": {
            "code": "import math\nk = 2\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "106": {
            "code": "import math\nk = 367\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "107": {
            "code": "import math\nk = 961\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "108": {
            "code": "import math\nk = -52\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "109": {
            "code": "import math\nk = -73\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "110": {
            "code": "import math\nk = -74\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "111": {
            "code": "import math\nk = 348\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "112": {
            "code": "import math\nk = 707\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "113": {
            "code": "import math\nk = 157\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "114": {
            "code": "import math\nk = 891\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "115": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "116": {
            "code": "import math\nk = 307\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "117": {
            "code": "import math\nk = 562\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "118": {
            "code": "import math\nk = 422\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "119": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "120": {
            "code": "import math\nk = 1351\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "121": {
            "code": "import math\nk = 1262\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "122": {
            "code": "import math\nk = 185\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "123": {
            "code": "import math\nk = 51\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "124": {
            "code": "import math\nk = 1096\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "125": {
            "code": "import math\nk = 373\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "126": {
            "code": "import math\nk = 1006\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "127": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "128": {
            "code": "import math\nk = -39\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "129": {
            "code": "import math\nk = 1877\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "130": {
            "code": "import math\nk = 1870\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "131": {
            "code": "import math\nk = 583\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "132": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "133": {
            "code": "import math\nk = 1340\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "134": {
            "code": "import math\nk = 1890\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "135": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "136": {
            "code": "import math\nk = 85\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "137": {
            "code": "import math\nk = 878\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "138": {
            "code": "import math\nk = 1601\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "139": {
            "code": "import math\nk = 394\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "140": {
            "code": "import math\nk = 1922\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "141": {
            "code": "import math\nk = -89\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "142": {
            "code": "import math\nk = 216\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "143": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "144": {
            "code": "import math\nk = -26\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "145": {
            "code": "import math\nk = 1753\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "146": {
            "code": "import math\nk = 501\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "147": {
            "code": "import math\nk = -19\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "148": {
            "code": "import math\nk = 1946\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "149": {
            "code": "import math\nk = 253\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "150": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "151": {
            "code": "import math\nk = 381\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "152": {
            "code": "import math\nk = 18\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "153": {
            "code": "import math\nk = 808\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "154": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "155": {
            "code": "import math\nk = 408\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "156": {
            "code": "import math\nk = 454\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "157": {
            "code": "import math\nk = -86\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "158": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "159": {
            "code": "import math\nk = -82\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "160": {
            "code": "import math\nk = 709\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "161": {
            "code": "import math\nk = 1744\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "162": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "163": {
            "code": "import math\nk = 2\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "164": {
            "code": "import math\nk = 146\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "165": {
            "code": "import math\nk = -69\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "166": {
            "code": "import math\nk = 346\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "167": {
            "code": "import math\nk = 655\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "168": {
            "code": "import math\nk = 1130\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "169": {
            "code": "import math\nk = 166\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "170": {
            "code": "import math\nk = 907\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "171": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "172": {
            "code": "import math\nk = 1991\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "173": {
            "code": "import math\nk = 456\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "174": {
            "code": "import math\nk = 651\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "175": {
            "code": "import math\nk = 1874\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "176": {
            "code": "import math\nk = 1065\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "177": {
            "code": "import math\nk = 422\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "178": {
            "code": "import math\nk = 601\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "179": {
            "code": "import math\nk = 722\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "180": {
            "code": "import math\nk = 403\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "181": {
            "code": "import math\nk = 696\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "182": {
            "code": "import math\nk = 117\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "183": {
            "code": "import math\nk = 1890\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "184": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "185": {
            "code": "import math\nk = 361\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "186": {
            "code": "import math\nk = 1406\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "187": {
            "code": "import math\nk = 1993\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "188": {
            "code": "import math\nk = 331\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "189": {
            "code": "import math\nk = -76\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "190": {
            "code": "import math\nk = 1489\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "191": {
            "code": "import math\nk = 673\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "192": {
            "code": "import math\nk = 396\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "193": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "194": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "195": {
            "code": "import math\nk = 1703\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "196": {
            "code": "import math\nk = 1520\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "197": {
            "code": "import math\nk = 501\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "198": {
            "code": "import math\nk = 1693\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "199": {
            "code": "import math\nk = 330\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "200": {
            "code": "import math\nk = 424\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "201": {
            "code": "import math\nk = -82\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "202": {
            "code": "import math\nk = -95\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "203": {
            "code": "import math\nk = 911\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "204": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "205": {
            "code": "import math\nk = -22\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "206": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "207": {
            "code": "import math\nk = -85\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "208": {
            "code": "import math\nk = -64\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "209": {
            "code": "import math\nk = 383\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "210": {
            "code": "import math\nk = 1808\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "211": {
            "code": "import math\nk = 245\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "212": {
            "code": "import math\nk = 379\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "213": {
            "code": "import math\nk = 377\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "214": {
            "code": "import math\nk = -5\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "215": {
            "code": "import math\nk = 1056\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "216": {
            "code": "import math\nk = 598\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "217": {
            "code": "import math\nk = 1437\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "218": {
            "code": "import math\nk = 497\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "219": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "220": {
            "code": "import math\nk = 425\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "221": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "222": {
            "code": "import math\nk = -98\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "223": {
            "code": "import math\nk = 1318\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "224": {
            "code": "import math\nk = 2000\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "225": {
            "code": "import math\nk = 378\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "226": {
            "code": "import math\nk = 63\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "227": {
            "code": "import math\nk = 455\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "228": {
            "code": "import math\nk = -89\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "229": {
            "code": "import math\nk = 229\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "230": {
            "code": "import math\nk = 529\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "231": {
            "code": "import math\nk = -39\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "232": {
            "code": "import math\nk = 1190\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "233": {
            "code": "import math\nk = 352\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "234": {
            "code": "import math\nk = -97\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "235": {
            "code": "import math\nk = 166\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "236": {
            "code": "import math\nk = 1243\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "237": {
            "code": "import math\nk = 336\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "238": {
            "code": "import math\nk = 1504\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "239": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "240": {
            "code": "import math\nk = 1737\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "241": {
            "code": "import math\nk = 1417\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "242": {
            "code": "import math\nk = 1170\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "243": {
            "code": "import math\nk = 359\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "244": {
            "code": "import math\nk = 626\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "245": {
            "code": "import math\nk = 1459\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "246": {
            "code": "import math\nk = -100\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "247": {
            "code": "import math\nk = 1566\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "248": {
            "code": "import math\nk = -37\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "249": {
            "code": "import math\nk = 453\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "250": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "251": {
            "code": "import math\nk = 1340\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "252": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "253": {
            "code": "import math\nk = 1664\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "254": {
            "code": "import math\nk = 166\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "255": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "256": {
            "code": "import math\nk = 1455\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "257": {
            "code": "import math\nk = 1958\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "258": {
            "code": "import math\nk = 1356\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "259": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "260": {
            "code": "import math\nk = 1914\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "261": {
            "code": "import math\nk = 397\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "262": {
            "code": "import math\nk = -100\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "263": {
            "code": "import math\nk = 471\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "264": {
            "code": "import math\nk = 1846\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "265": {
            "code": "import math\nk = 1940\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "266": {
            "code": "import math\nk = 1544\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "267": {
            "code": "import math\nk = 1048\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "268": {
            "code": "import math\nk = 1141\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "269": {
            "code": "import math\nk = 1951\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "270": {
            "code": "import math\nk = -17\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "271": {
            "code": "import math\nk = 200\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "272": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "273": {
            "code": "import math\nk = -32\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "274": {
            "code": "import math\nk = -36\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "275": {
            "code": "import math\nk = -26\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "276": {
            "code": "import math\nk = 489\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "277": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "278": {
            "code": "import math\nk = 404\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "279": {
            "code": "import math\nk = 493\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "280": {
            "code": "import math\nk = 1934\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "281": {
            "code": "import math\nk = -89\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "282": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "283": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "284": {
            "code": "import math\nk = 95\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "285": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "286": {
            "code": "import math\nk = 565\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "287": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "288": {
            "code": "import math\nk = 417\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "289": {
            "code": "import math\nk = 1721\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "290": {
            "code": "import math\nk = 1763\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "291": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "292": {
            "code": "import math\nk = 1883\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "293": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "294": {
            "code": "import math\nk = 73\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "295": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "296": {
            "code": "import math\nk = 928\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "297": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "298": {
            "code": "import math\nk = 1264\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "299": {
            "code": "import math\nk = 426\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "300": {
            "code": "import math\nk = 1247\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "301": {
            "code": "import math\nk = 344\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "302": {
            "code": "import math\nk = 112\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "303": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "304": {
            "code": "import math\nk = 428\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "305": {
            "code": "import math\nk = 1008\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "306": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "307": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "308": {
            "code": "import math\nk = 894\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "309": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "310": {
            "code": "import math\nk = 1005\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "311": {
            "code": "import math\nk = 956\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "312": {
            "code": "import math\nk = 782\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "313": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "314": {
            "code": "import math\nk = 276\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "315": {
            "code": "import math\nk = -98\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "316": {
            "code": "import math\nk = 404\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "317": {
            "code": "import math\nk = 1158\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "318": {
            "code": "import math\nk = 994\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "319": {
            "code": "import math\nk = 311\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "320": {
            "code": "import math\nk = 1315\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "321": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "322": {
            "code": "import math\nk = 438\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "323": {
            "code": "import math\nk = 514\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "324": {
            "code": "import math\nk = 945\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "325": {
            "code": "import math\nk = 411\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "326": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "327": {
            "code": "import math\nk = -28\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "328": {
            "code": "import math\nk = 359\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "329": {
            "code": "import math\nk = 898\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "330": {
            "code": "import math\nk = 1172\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "331": {
            "code": "import math\nk = -57\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "332": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "333": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "334": {
            "code": "import math\nk = -31\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "335": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "336": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "337": {
            "code": "import math\nk = -17\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "338": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "339": {
            "code": "import math\nk = -26\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "340": {
            "code": "import math\nk = 305\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "341": {
            "code": "import math\nk = -69\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "342": {
            "code": "import math\nk = 954\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "343": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "344": {
            "code": "import math\nk = 1387\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "345": {
            "code": "import math\nk = 1411\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "346": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "347": {
            "code": "import math\nk = 361\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "348": {
            "code": "import math\nk = 360\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "349": {
            "code": "import math\nk = 352\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "350": {
            "code": "import math\nk = 1897\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "351": {
            "code": "import math\nk = -68\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "352": {
            "code": "import math\nk = 1153\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "353": {
            "code": "import math\nk = 424\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "354": {
            "code": "import math\nk = -56\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "355": {
            "code": "import math\nk = 455\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "356": {
            "code": "import math\nk = 841\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "357": {
            "code": "import math\nk = 178\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "358": {
            "code": "import math\nk = 584\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "359": {
            "code": "import math\nk = -25\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "360": {
            "code": "import math\nk = -86\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "361": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "362": {
            "code": "import math\nk = 1288\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "363": {
            "code": "import math\nk = 647\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "364": {
            "code": "import math\nk = -3\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "365": {
            "code": "import math\nk = 1953\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "366": {
            "code": "import math\nk = 561\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "367": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "368": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "369": {
            "code": "import math\nk = 1696\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "370": {
            "code": "import math\nk = 700\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "371": {
            "code": "import math\nk = -98\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "372": {
            "code": "import math\nk = 1133\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "373": {
            "code": "import math\nk = 766\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "374": {
            "code": "import math\nk = 596\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "375": {
            "code": "import math\nk = 378\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "376": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "377": {
            "code": "import math\nk = 1114\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "378": {
            "code": "import math\nk = 1025\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "379": {
            "code": "import math\nk = 476\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "380": {
            "code": "import math\nk = 192\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "381": {
            "code": "import math\nk = 1518\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "382": {
            "code": "import math\nk = -49\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "383": {
            "code": "import math\nk = 1966\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "384": {
            "code": "import math\nk = 1010\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "385": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "386": {
            "code": "import math\nk = 236\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "387": {
            "code": "import math\nk = 1956\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "388": {
            "code": "import math\nk = 830\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "389": {
            "code": "import math\nk = 413\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "390": {
            "code": "import math\nk = 401\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "391": {
            "code": "import math\nk = 859\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "392": {
            "code": "import math\nk = 1883\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "393": {
            "code": "import math\nk = 1933\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "394": {
            "code": "import math\nk = 1224\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "395": {
            "code": "import math\nk = 1666\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "396": {
            "code": "import math\nk = 422\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "397": {
            "code": "import math\nk = 404\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "398": {
            "code": "import math\nk = -39\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "399": {
            "code": "import math\nk = 270\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "400": {
            "code": "import math\nk = 95\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "401": {
            "code": "import math\nk = 412\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "402": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "403": {
            "code": "import math\nk = -27\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "404": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "405": {
            "code": "import math\nk = -26\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "406": {
            "code": "import math\nk = 166\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "407": {
            "code": "import math\nk = 1937\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "408": {
            "code": "import math\nk = 1490\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "409": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "410": {
            "code": "import math\nk = 1041\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "411": {
            "code": "import math\nk = 263\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "412": {
            "code": "import math\nk = -60\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "413": {
            "code": "import math\nk = 1007\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "414": {
            "code": "import math\nk = 1728\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "415": {
            "code": "import math\nk = 1947\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "416": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "417": {
            "code": "import math\nk = -38\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "418": {
            "code": "import math\nk = 400\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "419": {
            "code": "import math\nk = 386\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "420": {
            "code": "import math\nk = 739\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "421": {
            "code": "import math\nk = -35\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "422": {
            "code": "import math\nk = 385\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "423": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "424": {
            "code": "import math\nk = 1541\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "425": {
            "code": "import math\nk = 790\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "426": {
            "code": "import math\nk = 404\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "427": {
            "code": "import math\nk = 1027\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "428": {
            "code": "import math\nk = -92\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "429": {
            "code": "import math\nk = 418\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "430": {
            "code": "import math\nk = 245\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "431": {
            "code": "import math\nk = 722\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "432": {
            "code": "import math\nk = 450\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "433": {
            "code": "import math\nk = 1319\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "434": {
            "code": "import math\nk = 1393\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "435": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "436": {
            "code": "import math\nk = 1384\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "437": {
            "code": "import math\nk = 230\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "438": {
            "code": "import math\nk = 593\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "439": {
            "code": "import math\nk = -59\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "440": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "441": {
            "code": "import math\nk = 1327\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "442": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "443": {
            "code": "import math\nk = 1956\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "444": {
            "code": "import math\nk = 424\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "445": {
            "code": "import math\nk = 152\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "446": {
            "code": "import math\nk = 1880\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "447": {
            "code": "import math\nk = 1041\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "448": {
            "code": "import math\nk = 1628\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "449": {
            "code": "import math\nk = 307\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "450": {
            "code": "import math\nk = 1270\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "451": {
            "code": "import math\nk = 282\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "452": {
            "code": "import math\nk = 1091\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "453": {
            "code": "import math\nk = 1840\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "454": {
            "code": "import math\nk = 532\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "455": {
            "code": "import math\nk = 1883\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "456": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "457": {
            "code": "import math\nk = 456\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "458": {
            "code": "import math\nk = 668\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "459": {
            "code": "import math\nk = 1981\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "460": {
            "code": "import math\nk = 252\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "461": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "462": {
            "code": "import math\nk = 667\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "463": {
            "code": "import math\nk = 1477\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "464": {
            "code": "import math\nk = -67\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "465": {
            "code": "import math\nk = -14\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "466": {
            "code": "import math\nk = 508\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "467": {
            "code": "import math\nk = 442\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "468": {
            "code": "import math\nk = -9\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "469": {
            "code": "import math\nk = 1013\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "470": {
            "code": "import math\nk = 1956\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "471": {
            "code": "import math\nk = 804\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "472": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "473": {
            "code": "import math\nk = 890\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "474": {
            "code": "import math\nk = 1541\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "475": {
            "code": "import math\nk = 157\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "476": {
            "code": "import math\nk = 1887\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "477": {
            "code": "import math\nk = 545\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "478": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "479": {
            "code": "import math\nk = 19\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "480": {
            "code": "import math\nk = 117\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "481": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "482": {
            "code": "import math\nk = 221\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "483": {
            "code": "import math\nk = 1697\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "484": {
            "code": "import math\nk = 452\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "485": {
            "code": "import math\nk = 35\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "486": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "487": {
            "code": "import math\nk = -92\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "488": {
            "code": "import math\nk = 1684\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "489": {
            "code": "import math\nk = 1894\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "490": {
            "code": "import math\nk = 1985\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "491": {
            "code": "import math\nk = 1771\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "492": {
            "code": "import math\nk = 1857\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "493": {
            "code": "import math\nk = 392\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "494": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "495": {
            "code": "import math\nk = 1006\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "496": {
            "code": "import math\nk = -39\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "497": {
            "code": "import math\nk = -62\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "498": {
            "code": "import math\nk = 336\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "499": {
            "code": "import math\nk = 742\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "500": {
            "code": "import math\nk = -26\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "501": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "502": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "503": {
            "code": "import math\nk = 422\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "504": {
            "code": "import math\nk = -51\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "505": {
            "code": "import math\nk = 733\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "506": {
            "code": "import math\nk = 272\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "507": {
            "code": "import math\nk = 983\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "508": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "509": {
            "code": "import math\nk = 1641\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "510": {
            "code": "import math\nk = 1874\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "511": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "512": {
            "code": "import math\nk = 1478\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "513": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "514": {
            "code": "import math\nk = 1883\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "515": {
            "code": "import math\nk = 1714\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "516": {
            "code": "import math\nk = 476\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "517": {
            "code": "import math\nk = 497\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "518": {
            "code": "import math\nk = 1017\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "519": {
            "code": "import math\nk = 166\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "520": {
            "code": "import math\nk = 114\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "521": {
            "code": "import math\nk = -89\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "522": {
            "code": "import math\nk = 1532\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "523": {
            "code": "import math\nk = -65\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "524": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "525": {
            "code": "import math\nk = -93\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "526": {
            "code": "import math\nk = 1971\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "527": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "528": {
            "code": "import math\nk = -81\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "529": {
            "code": "import math\nk = 423\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "530": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "531": {
            "code": "import math\nk = 1036\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "532": {
            "code": "import math\nk = 1999\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "533": {
            "code": "import math\nk = 1964\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "534": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "535": {
            "code": "import math\nk = 466\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "536": {
            "code": "import math\nk = 520\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "537": {
            "code": "import math\nk = -75\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "538": {
            "code": "import math\nk = 1401\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "539": {
            "code": "import math\nk = -51\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "540": {
            "code": "import math\nk = -64\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "541": {
            "code": "import math\nk = 18\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "542": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "543": {
            "code": "import math\nk = -22\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "544": {
            "code": "import math\nk = -51\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "545": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "546": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "547": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "548": {
            "code": "import math\nk = 1698\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "549": {
            "code": "import math\nk = -60\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "550": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "551": {
            "code": "import math\nk = -57\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "552": {
            "code": "import math\nk = -50\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "553": {
            "code": "import math\nk = 1587\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "554": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "555": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "556": {
            "code": "import math\nk = 450\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "557": {
            "code": "import math\nk = 607\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "558": {
            "code": "import math\nk = 1884\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "559": {
            "code": "import math\nk = 1754\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "560": {
            "code": "import math\nk = -42\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "561": {
            "code": "import math\nk = 339\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "562": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "563": {
            "code": "import math\nk = 1659\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "564": {
            "code": "import math\nk = 367\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "565": {
            "code": "import math\nk = 70\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "566": {
            "code": "import math\nk = -69\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "567": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "568": {
            "code": "import math\nk = 370\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "569": {
            "code": "import math\nk = 177\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "570": {
            "code": "import math\nk = 1806\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "571": {
            "code": "import math\nk = -75\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "572": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "573": {
            "code": "import math\nk = 274\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "574": {
            "code": "import math\nk = 245\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "575": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "576": {
            "code": "import math\nk = 1892\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "577": {
            "code": "import math\nk = 1883\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "578": {
            "code": "import math\nk = 208\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "579": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "580": {
            "code": "import math\nk = -74\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "581": {
            "code": "import math\nk = 242\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "582": {
            "code": "import math\nk = 1884\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "583": {
            "code": "import math\nk = 1393\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "584": {
            "code": "import math\nk = 945\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "585": {
            "code": "import math\nk = 420\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "586": {
            "code": "import math\nk = 536\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "587": {
            "code": "import math\nk = -74\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "588": {
            "code": "import math\nk = 22\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "589": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "590": {
            "code": "import math\nk = 1447\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "591": {
            "code": "import math\nk = 1534\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "592": {
            "code": "import math\nk = 385\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "593": {
            "code": "import math\nk = 5\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "594": {
            "code": "import math\nk = 549\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "595": {
            "code": "import math\nk = 0\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "596": {
            "code": "import math\nk = 259\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "597": {
            "code": "import math\nk = 1234\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "598": {
            "code": "import math\nk = 1490\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "599": {
            "code": "import math\nk = 1223\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "600": {
            "code": "import math\nk = 1376\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "601": {
            "code": "import math\nk = 1747\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "602": {
            "code": "import math\nk = 1975\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "603": {
            "code": "import math\nk = 1573\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "604": {
            "code": "import math\nk = 1921\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "605": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "606": {
            "code": "import math\nk = 184\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "607": {
            "code": "import math\nk = 73\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "608": {
            "code": "import math\nk = 1994\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "609": {
            "code": "import math\nk = -100\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "610": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "611": {
            "code": "import math\nk = 412\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "612": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "613": {
            "code": "import math\nk = 420\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "614": {
            "code": "import math\nk = 497\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "615": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "616": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "617": {
            "code": "import math\nk = -96\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "618": {
            "code": "import math\nk = 745\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "619": {
            "code": "import math\nk = 285\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "620": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "621": {
            "code": "import math\nk = 626\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "622": {
            "code": "import math\nk = -63\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "623": {
            "code": "import math\nk = 1873\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "624": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "625": {
            "code": "import math\nk = -86\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "626": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "627": {
            "code": "import math\nk = 1706\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "628": {
            "code": "import math\nk = -92\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "629": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "630": {
            "code": "import math\nk = 1444\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "631": {
            "code": "import math\nk = 1383\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "632": {
            "code": "import math\nk = 128\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "633": {
            "code": "import math\nk = 863\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "634": {
            "code": "import math\nk = 361\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "635": {
            "code": "import math\nk = -7\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "636": {
            "code": "import math\nk = 1949\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "637": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "638": {
            "code": "import math\nk = -7\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "639": {
            "code": "import math\nk = -9\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "640": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "641": {
            "code": "import math\nk = -99\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "642": {
            "code": "import math\nk = 433\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "643": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "644": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "645": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "646": {
            "code": "import math\nk = 566\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "647": {
            "code": "import math\nk = 1956\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "648": {
            "code": "import math\nk = 1850\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "649": {
            "code": "import math\nk = 1417\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "650": {
            "code": "import math\nk = -96\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "651": {
            "code": "import math\nk = 1976\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "652": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "653": {
            "code": "import math\nk = 1619\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "654": {
            "code": "import math\nk = 356\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "655": {
            "code": "import math\nk = 20\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "656": {
            "code": "import math\nk = 1987\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "657": {
            "code": "import math\nk = -36\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "658": {
            "code": "import math\nk = 948\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "659": {
            "code": "import math\nk = 876\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "660": {
            "code": "import math\nk = -83\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "661": {
            "code": "import math\nk = 881\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "662": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "663": {
            "code": "import math\nk = 1932\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "664": {
            "code": "import math\nk = 431\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "665": {
            "code": "import math\nk = 1113\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "666": {
            "code": "import math\nk = -4\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "667": {
            "code": "import math\nk = 185\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "668": {
            "code": "import math\nk = 699\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "669": {
            "code": "import math\nk = 1947\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "670": {
            "code": "import math\nk = 1052\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "671": {
            "code": "import math\nk = 23\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "672": {
            "code": "import math\nk = -49\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "673": {
            "code": "import math\nk = 1467\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "674": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "675": {
            "code": "import math\nk = 1629\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "676": {
            "code": "import math\nk = 276\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "677": {
            "code": "import math\nk = 433\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "678": {
            "code": "import math\nk = 1843\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "679": {
            "code": "import math\nk = -13\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "680": {
            "code": "import math\nk = 2000\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "681": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "682": {
            "code": "import math\nk = 317\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "683": {
            "code": "import math\nk = 457\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "684": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "685": {
            "code": "import math\nk = -52\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "686": {
            "code": "import math\nk = -33\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "687": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "688": {
            "code": "import math\nk = 1258\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "689": {
            "code": "import math\nk = 1720\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "690": {
            "code": "import math\nk = 1114\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "691": {
            "code": "import math\nk = 1989\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "692": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "693": {
            "code": "import math\nk = 373\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "694": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "695": {
            "code": "import math\nk = 746\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "696": {
            "code": "import math\nk = 1942\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "697": {
            "code": "import math\nk = 3\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "698": {
            "code": "import math\nk = 1958\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "699": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "700": {
            "code": "import math\nk = 1958\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "701": {
            "code": "import math\nk = 1738\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "702": {
            "code": "import math\nk = -24\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "703": {
            "code": "import math\nk = 1834\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "704": {
            "code": "import math\nk = 121\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "705": {
            "code": "import math\nk = -68\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "706": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "707": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "708": {
            "code": "import math\nk = 1552\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "709": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "710": {
            "code": "import math\nk = 476\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "711": {
            "code": "import math\nk = -100\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "712": {
            "code": "import math\nk = 1341\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "713": {
            "code": "import math\nk = 773\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "714": {
            "code": "import math\nk = 1389\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "715": {
            "code": "import math\nk = -92\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "716": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "717": {
            "code": "import math\nk = 1915\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "718": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "719": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "720": {
            "code": "import math\nk = 1450\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "721": {
            "code": "import math\nk = -99\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "722": {
            "code": "import math\nk = 279\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "723": {
            "code": "import math\nk = 30\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "724": {
            "code": "import math\nk = 1989\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "725": {
            "code": "import math\nk = 173\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "726": {
            "code": "import math\nk = 1529\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "727": {
            "code": "import math\nk = 2\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "728": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "729": {
            "code": "import math\nk = -6\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "730": {
            "code": "import math\nk = 325\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "731": {
            "code": "import math\nk = 1737\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "732": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "733": {
            "code": "import math\nk = 582\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "734": {
            "code": "import math\nk = -86\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "735": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "736": {
            "code": "import math\nk = 1468\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "737": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "738": {
            "code": "import math\nk = 693\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "739": {
            "code": "import math\nk = 1659\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "740": {
            "code": "import math\nk = 532\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "741": {
            "code": "import math\nk = 14\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "742": {
            "code": "import math\nk = -11\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "743": {
            "code": "import math\nk = 106\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "744": {
            "code": "import math\nk = 1026\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "745": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "746": {
            "code": "import math\nk = 1990\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "747": {
            "code": "import math\nk = 1797\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "748": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "749": {
            "code": "import math\nk = 1895\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "750": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "751": {
            "code": "import math\nk = 225\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "752": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "753": {
            "code": "import math\nk = 1949\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "754": {
            "code": "import math\nk = 385\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "755": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "756": {
            "code": "import math\nk = 397\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "757": {
            "code": "import math\nk = 292\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "758": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "759": {
            "code": "import math\nk = 450\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "760": {
            "code": "import math\nk = 1168\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "761": {
            "code": "import math\nk = -99\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "762": {
            "code": "import math\nk = 84\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "763": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "764": {
            "code": "import math\nk = -74\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "765": {
            "code": "import math\nk = -85\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "766": {
            "code": "import math\nk = 1550\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "767": {
            "code": "import math\nk = 6\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "768": {
            "code": "import math\nk = -86\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "769": {
            "code": "import math\nk = 1929\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "770": {
            "code": "import math\nk = 445\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "771": {
            "code": "import math\nk = 584\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "772": {
            "code": "import math\nk = 1992\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "773": {
            "code": "import math\nk = 1337\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "774": {
            "code": "import math\nk = 709\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "775": {
            "code": "import math\nk = -39\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "776": {
            "code": "import math\nk = 1327\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "777": {
            "code": "import math\nk = -52\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "778": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "779": {
            "code": "import math\nk = 575\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "780": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "781": {
            "code": "import math\nk = 1970\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "782": {
            "code": "import math\nk = -100\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "783": {
            "code": "import math\nk = 97\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "784": {
            "code": "import math\nk = 1224\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "785": {
            "code": "import math\nk = -98\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "786": {
            "code": "import math\nk = 1999\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "787": {
            "code": "import math\nk = 1981\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "788": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "789": {
            "code": "import math\nk = 1731\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "790": {
            "code": "import math\nk = 1816\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "791": {
            "code": "import math\nk = 1901\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "792": {
            "code": "import math\nk = 1551\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "793": {
            "code": "import math\nk = 122\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "794": {
            "code": "import math\nk = 1901\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "795": {
            "code": "import math\nk = 1983\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "796": {
            "code": "import math\nk = 1990\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "797": {
            "code": "import math\nk = 217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "798": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "799": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "800": {
            "code": "import math\nk = 406\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "801": {
            "code": "import math\nk = -87\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "802": {
            "code": "import math\nk = 543\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "803": {
            "code": "import math\nk = 1975\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "804": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "805": {
            "code": "import math\nk = -100\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "806": {
            "code": "import math\nk = 1945\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "807": {
            "code": "import math\nk = 1993\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "808": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "809": {
            "code": "import math\nk = -41\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "810": {
            "code": "import math\nk = 1878\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "811": {
            "code": "import math\nk = 1900\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "812": {
            "code": "import math\nk = 539\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "813": {
            "code": "import math\nk = 461\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "814": {
            "code": "import math\nk = -99\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "815": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "816": {
            "code": "import math\nk = -67\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "817": {
            "code": "import math\nk = 1714\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "818": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "819": {
            "code": "import math\nk = 1033\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "820": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "821": {
            "code": "import math\nk = 1006\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "822": {
            "code": "import math\nk = 449\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "823": {
            "code": "import math\nk = 138\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "824": {
            "code": "import math\nk = 676\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "825": {
            "code": "import math\nk = 140\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "826": {
            "code": "import math\nk = 282\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "827": {
            "code": "import math\nk = 819\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "828": {
            "code": "import math\nk = -100\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "829": {
            "code": "import math\nk = 975\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "830": {
            "code": "import math\nk = -36\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "831": {
            "code": "import math\nk = 657\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "832": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "833": {
            "code": "import math\nk = 924\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "834": {
            "code": "import math\nk = 1779\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "835": {
            "code": "import math\nk = 1858\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "836": {
            "code": "import math\nk = 127\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "837": {
            "code": "import math\nk = -36\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "838": {
            "code": "import math\nk = 1863\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "839": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "840": {
            "code": "import math\nk = 815\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "841": {
            "code": "import math\nk = 678\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "842": {
            "code": "import math\nk = 1925\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "843": {
            "code": "import math\nk = 1399\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "844": {
            "code": "import math\nk = 1703\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "845": {
            "code": "import math\nk = 1698\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "846": {
            "code": "import math\nk = -63\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "847": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "848": {
            "code": "import math\nk = 1330\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "849": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "850": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "851": {
            "code": "import math\nk = 1593\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "852": {
            "code": "import math\nk = 1164\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "853": {
            "code": "import math\nk = 25\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "854": {
            "code": "import math\nk = 1755\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "855": {
            "code": "import math\nk = 393\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "856": {
            "code": "import math\nk = 1719\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "857": {
            "code": "import math\nk = 394\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "858": {
            "code": "import math\nk = 1694\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "859": {
            "code": "import math\nk = 1012\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "860": {
            "code": "import math\nk = -52\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "861": {
            "code": "import math\nk = 497\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "862": {
            "code": "import math\nk = 1487\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "863": {
            "code": "import math\nk = 1181\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "864": {
            "code": "import math\nk = 1028\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "865": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "866": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "867": {
            "code": "import math\nk = 843\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "868": {
            "code": "import math\nk = 1181\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "869": {
            "code": "import math\nk = 1410\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "870": {
            "code": "import math\nk = 710\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "871": {
            "code": "import math\nk = 773\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "872": {
            "code": "import math\nk = -100\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "873": {
            "code": "import math\nk = -22\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "874": {
            "code": "import math\nk = -55\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "875": {
            "code": "import math\nk = 1797\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "876": {
            "code": "import math\nk = 1609\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "877": {
            "code": "import math\nk = 1588\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "878": {
            "code": "import math\nk = 1217\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "879": {
            "code": "import math\nk = 859\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "880": {
            "code": "import math\nk = 375\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "881": {
            "code": "import math\nk = 1613\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "882": {
            "code": "import math\nk = 99\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "883": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "884": {
            "code": "import math\nk = 1333\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "885": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "886": {
            "code": "import math\nk = 51\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "887": {
            "code": "import math\nk = -39\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "888": {
            "code": "import math\nk = 1254\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "889": {
            "code": "import math\nk = 1911\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "890": {
            "code": "import math\nk = 1886\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "891": {
            "code": "import math\nk = 685\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "892": {
            "code": "import math\nk = 408\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "893": {
            "code": "import math\nk = 209\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "894": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "895": {
            "code": "import math\nk = 550\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "896": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "897": {
            "code": "import math\nk = 1273\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "898": {
            "code": "import math\nk = 821\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "899": {
            "code": "import math\nk = 957\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "900": {
            "code": "import math\nk = 1883\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "901": {
            "code": "import math\nk = -26\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "902": {
            "code": "import math\nk = -24\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "903": {
            "code": "import math\nk = 921\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "904": {
            "code": "import math\nk = 1242\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "905": {
            "code": "import math\nk = 1515\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "906": {
            "code": "import math\nk = 843\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "907": {
            "code": "import math\nk = 1497\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "908": {
            "code": "import math\nk = 1417\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "909": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "910": {
            "code": "import math\nk = 845\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "911": {
            "code": "import math\nk = -58\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "912": {
            "code": "import math\nk = 761\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "913": {
            "code": "import math\nk = 899\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "914": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "915": {
            "code": "import math\nk = 373\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "916": {
            "code": "import math\nk = 319\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "917": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "918": {
            "code": "import math\nk = 1992\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "919": {
            "code": "import math\nk = 470\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "920": {
            "code": "import math\nk = 363\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "921": {
            "code": "import math\nk = 1967\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "922": {
            "code": "import math\nk = 731\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "923": {
            "code": "import math\nk = 1896\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "924": {
            "code": "import math\nk = 917\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "925": {
            "code": "import math\nk = -41\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "926": {
            "code": "import math\nk = 855\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "927": {
            "code": "import math\nk = 111\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "928": {
            "code": "import math\nk = -39\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "929": {
            "code": "import math\nk = 1037\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "930": {
            "code": "import math\nk = 1923\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "931": {
            "code": "import math\nk = 395\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "932": {
            "code": "import math\nk = 734\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "933": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "934": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "935": {
            "code": "import math\nk = 1752\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "936": {
            "code": "import math\nk = -55\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "937": {
            "code": "import math\nk = 22\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "938": {
            "code": "import math\nk = 977\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "939": {
            "code": "import math\nk = 324\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "940": {
            "code": "import math\nk = 1993\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "941": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "942": {
            "code": "import math\nk = 1490\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "943": {
            "code": "import math\nk = 157\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "944": {
            "code": "import math\nk = 262\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "945": {
            "code": "import math\nk = 1075\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "946": {
            "code": "import math\nk = -7\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "947": {
            "code": "import math\nk = 409\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "948": {
            "code": "import math\nk = -98\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "949": {
            "code": "import math\nk = 1001\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "950": {
            "code": "import math\nk = -47\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "951": {
            "code": "import math\nk = 1602\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "952": {
            "code": "import math\nk = -46\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "953": {
            "code": "import math\nk = -83\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "954": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "955": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "956": {
            "code": "import math\nk = 905\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "957": {
            "code": "import math\nk = 1499\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "958": {
            "code": "import math\nk = 613\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "959": {
            "code": "import math\nk = 1909\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "960": {
            "code": "import math\nk = 1909\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "961": {
            "code": "import math\nk = 466\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "962": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "963": {
            "code": "import math\nk = 593\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "964": {
            "code": "import math\nk = 218\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "965": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "966": {
            "code": "import math\nk = -86\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "967": {
            "code": "import math\nk = -90\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "968": {
            "code": "import math\nk = 716\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "969": {
            "code": "import math\nk = -89\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "970": {
            "code": "import math\nk = -53\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "971": {
            "code": "import math\nk = 1084\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "972": {
            "code": "import math\nk = 290\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "973": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "974": {
            "code": "import math\nk = -72\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "975": {
            "code": "import math\nk = 438\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "976": {
            "code": "import math\nk = 1917\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "977": {
            "code": "import math\nk = -92\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "978": {
            "code": "import math\nk = 681\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "979": {
            "code": "import math\nk = 1910\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "980": {
            "code": "import math\nk = 246\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "981": {
            "code": "import math\nk = 1902\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "982": {
            "code": "import math\nk = 1522\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "983": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "984": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "985": {
            "code": "import math\nk = 157\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "986": {
            "code": "import math\nk = 6\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "987": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "988": {
            "code": "import math\nk = 280\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "989": {
            "code": "import math\nk = 1772\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "990": {
            "code": "import math\nk = 556\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "991": {
            "code": "import math\nk = 1881\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "992": {
            "code": "import math\nk = 369\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "993": {
            "code": "import math\nk = -26\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "994": {
            "code": "import math\nk = 1125\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "995": {
            "code": "import math\nk = 1865\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "996": {
            "code": "import math\nk = 1271\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        },
        "997": {
            "code": "import math\nk = 1936\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "998": {
            "code": "import math\nk = 675\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                1,
                1
            ]
        },
        "999": {
            "code": "import math\nk = 1567\nif(k%2)==0:\n    print(\"-1\")\nelse:\n    flag=0\n    for x in range(1,1000001):\n        if (7%(9*k)*(pow(10,x,k*9)-1)%(9*k))==0:\n            print(x)\n            flag=1\n            break\n    if flag==0:\n        print(-1)",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0
            ]
        }
    },
    "14510": {
        "0": {
            "code": "from math import factorial\nN = 740;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "1": {
            "code": "from math import factorial\nN = 1517;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "2": {
            "code": "from math import factorial\nN = 781;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "3": {
            "code": "from math import factorial\nN = 1939;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "4": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "5": {
            "code": "from math import factorial\nN = 1840;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "6": {
            "code": "from math import factorial\nN = 1319;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "7": {
            "code": "from math import factorial\nN = 1831;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "8": {
            "code": "from math import factorial\nN = 904;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "9": {
            "code": "from math import factorial\nN = 938;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "10": {
            "code": "from math import factorial\nN = 1422;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "11": {
            "code": "from math import factorial\nN = 1640;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "12": {
            "code": "from math import factorial\nN = -25;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "13": {
            "code": "from math import factorial\nN = 133;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "14": {
            "code": "from math import factorial\nN = 394;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "15": {
            "code": "from math import factorial\nN = 1628;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "16": {
            "code": "from math import factorial\nN = 1290;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "17": {
            "code": "from math import factorial\nN = 800;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "18": {
            "code": "from math import factorial\nN = 1909;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "19": {
            "code": "from math import factorial\nN = 1446;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "20": {
            "code": "from math import factorial\nN = 1278;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "21": {
            "code": "from math import factorial\nN = -74;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "22": {
            "code": "from math import factorial\nN = 1851;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "23": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "24": {
            "code": "from math import factorial\nN = 69;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "25": {
            "code": "from math import factorial\nN = 1220;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "26": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "27": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "28": {
            "code": "from math import factorial\nN = 230;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "29": {
            "code": "from math import factorial\nN = 174;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "30": {
            "code": "from math import factorial\nN = 1207;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "31": {
            "code": "from math import factorial\nN = 978;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "32": {
            "code": "from math import factorial\nN = -74;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "33": {
            "code": "from math import factorial\nN = 1428;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "34": {
            "code": "from math import factorial\nN = 286;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "35": {
            "code": "from math import factorial\nN = -61;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "36": {
            "code": "from math import factorial\nN = 829;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "37": {
            "code": "from math import factorial\nN = -35;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "38": {
            "code": "from math import factorial\nN = 773;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "39": {
            "code": "from math import factorial\nN = 722;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "40": {
            "code": "from math import factorial\nN = 1215;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "41": {
            "code": "from math import factorial\nN = 239;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "42": {
            "code": "from math import factorial\nN = 1399;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "43": {
            "code": "from math import factorial\nN = 1071;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "44": {
            "code": "from math import factorial\nN = 1064;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "45": {
            "code": "from math import factorial\nN = 455;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "46": {
            "code": "from math import factorial\nN = -3;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "47": {
            "code": "from math import factorial\nN = 603;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "48": {
            "code": "from math import factorial\nN = 1036;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "49": {
            "code": "from math import factorial\nN = 1904;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "50": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "51": {
            "code": "from math import factorial\nN = -54;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "52": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "53": {
            "code": "from math import factorial\nN = 943;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "54": {
            "code": "from math import factorial\nN = 140;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "55": {
            "code": "from math import factorial\nN = 361;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "56": {
            "code": "from math import factorial\nN = 1219;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "57": {
            "code": "from math import factorial\nN = -57;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "58": {
            "code": "from math import factorial\nN = -25;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "59": {
            "code": "from math import factorial\nN = 1002;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "60": {
            "code": "from math import factorial\nN = 697;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "61": {
            "code": "from math import factorial\nN = 380;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "62": {
            "code": "from math import factorial\nN = 521;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "63": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "64": {
            "code": "from math import factorial\nN = 493;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "65": {
            "code": "from math import factorial\nN = 137;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "66": {
            "code": "from math import factorial\nN = 1016;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "67": {
            "code": "from math import factorial\nN = 1755;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "68": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "69": {
            "code": "from math import factorial\nN = 184;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "70": {
            "code": "from math import factorial\nN = 1564;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "71": {
            "code": "from math import factorial\nN = 1495;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "72": {
            "code": "from math import factorial\nN = 395;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "73": {
            "code": "from math import factorial\nN = 784;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "74": {
            "code": "from math import factorial\nN = 217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "75": {
            "code": "from math import factorial\nN = 1714;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "76": {
            "code": "from math import factorial\nN = 1933;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "77": {
            "code": "from math import factorial\nN = 1137;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "78": {
            "code": "from math import factorial\nN = 698;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "79": {
            "code": "from math import factorial\nN = 2000;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "80": {
            "code": "from math import factorial\nN = -99;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "81": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "82": {
            "code": "from math import factorial\nN = 1495;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "83": {
            "code": "from math import factorial\nN = -65;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "84": {
            "code": "from math import factorial\nN = 157;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "85": {
            "code": "from math import factorial\nN = -39;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "86": {
            "code": "from math import factorial\nN = 1345;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "87": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "88": {
            "code": "from math import factorial\nN = 263;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "89": {
            "code": "from math import factorial\nN = 148;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "90": {
            "code": "from math import factorial\nN = 51;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "91": {
            "code": "from math import factorial\nN = 735;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "92": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "93": {
            "code": "from math import factorial\nN = -51;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "94": {
            "code": "from math import factorial\nN = 1919;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "95": {
            "code": "from math import factorial\nN = -36;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "96": {
            "code": "from math import factorial\nN = -36;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "97": {
            "code": "from math import factorial\nN = -98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "98": {
            "code": "from math import factorial\nN = 1087;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "99": {
            "code": "from math import factorial\nN = 1322;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "100": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "101": {
            "code": "from math import factorial\nN = 1380;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "102": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "103": {
            "code": "from math import factorial\nN = -98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "104": {
            "code": "from math import factorial\nN = 603;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "105": {
            "code": "from math import factorial\nN = 859;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "106": {
            "code": "from math import factorial\nN = 581;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "107": {
            "code": "from math import factorial\nN = 273;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "108": {
            "code": "from math import factorial\nN = 1322;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "109": {
            "code": "from math import factorial\nN = 1901;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "110": {
            "code": "from math import factorial\nN = 40;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "111": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "112": {
            "code": "from math import factorial\nN = 1159;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "113": {
            "code": "from math import factorial\nN = 1624;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "114": {
            "code": "from math import factorial\nN = 27;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "115": {
            "code": "from math import factorial\nN = 2000;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "116": {
            "code": "from math import factorial\nN = 939;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "117": {
            "code": "from math import factorial\nN = 420;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "118": {
            "code": "from math import factorial\nN = 422;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "119": {
            "code": "from math import factorial\nN = 98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "120": {
            "code": "from math import factorial\nN = 1587;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "121": {
            "code": "from math import factorial\nN = 1941;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "122": {
            "code": "from math import factorial\nN = 460;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "123": {
            "code": "from math import factorial\nN = 1859;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "124": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "125": {
            "code": "from math import factorial\nN = 655;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "126": {
            "code": "from math import factorial\nN = 985;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "127": {
            "code": "from math import factorial\nN = -37;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "128": {
            "code": "from math import factorial\nN = 26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "129": {
            "code": "from math import factorial\nN = 1990;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "130": {
            "code": "from math import factorial\nN = -7;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "131": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "132": {
            "code": "from math import factorial\nN = 95;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "133": {
            "code": "from math import factorial\nN = -7;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "134": {
            "code": "from math import factorial\nN = 1907;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "135": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "136": {
            "code": "from math import factorial\nN = 1731;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "137": {
            "code": "from math import factorial\nN = 1660;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "138": {
            "code": "from math import factorial\nN = 967;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "139": {
            "code": "from math import factorial\nN = 571;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "140": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "141": {
            "code": "from math import factorial\nN = 206;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "142": {
            "code": "from math import factorial\nN = 463;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "143": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "144": {
            "code": "from math import factorial\nN = 1905;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "145": {
            "code": "from math import factorial\nN = 536;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "146": {
            "code": "from math import factorial\nN = -99;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "147": {
            "code": "from math import factorial\nN = 51;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "148": {
            "code": "from math import factorial\nN = 500;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "149": {
            "code": "from math import factorial\nN = 1641;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "150": {
            "code": "from math import factorial\nN = -83;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "151": {
            "code": "from math import factorial\nN = -56;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "152": {
            "code": "from math import factorial\nN = -89;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "153": {
            "code": "from math import factorial\nN = 1437;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "154": {
            "code": "from math import factorial\nN = 1127;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "155": {
            "code": "from math import factorial\nN = 1911;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "156": {
            "code": "from math import factorial\nN = 1943;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "157": {
            "code": "from math import factorial\nN = 1882;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "158": {
            "code": "from math import factorial\nN = 1216;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "159": {
            "code": "from math import factorial\nN = 1436;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "160": {
            "code": "from math import factorial\nN = -38;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "161": {
            "code": "from math import factorial\nN = 1390;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "162": {
            "code": "from math import factorial\nN = 1933;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "163": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "164": {
            "code": "from math import factorial\nN = 335;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "165": {
            "code": "from math import factorial\nN = 13;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "166": {
            "code": "from math import factorial\nN = 1218;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "167": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "168": {
            "code": "from math import factorial\nN = 405;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "169": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "170": {
            "code": "from math import factorial\nN = -97;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "171": {
            "code": "from math import factorial\nN = -3;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "172": {
            "code": "from math import factorial\nN = 1719;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "173": {
            "code": "from math import factorial\nN = 792;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "174": {
            "code": "from math import factorial\nN = 166;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "175": {
            "code": "from math import factorial\nN = 1987;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "176": {
            "code": "from math import factorial\nN = 805;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "177": {
            "code": "from math import factorial\nN = 1437;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "178": {
            "code": "from math import factorial\nN = 405;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "179": {
            "code": "from math import factorial\nN = 414;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "180": {
            "code": "from math import factorial\nN = 1988;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "181": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "182": {
            "code": "from math import factorial\nN = 418;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "183": {
            "code": "from math import factorial\nN = 309;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "184": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "185": {
            "code": "from math import factorial\nN = 407;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "186": {
            "code": "from math import factorial\nN = 934;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "187": {
            "code": "from math import factorial\nN = 1789;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "188": {
            "code": "from math import factorial\nN = 1298;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "189": {
            "code": "from math import factorial\nN = -62;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "190": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "191": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "192": {
            "code": "from math import factorial\nN = 538;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "193": {
            "code": "from math import factorial\nN = 1936;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "194": {
            "code": "from math import factorial\nN = -74;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "195": {
            "code": "from math import factorial\nN = -56;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "196": {
            "code": "from math import factorial\nN = 842;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "197": {
            "code": "from math import factorial\nN = -98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "198": {
            "code": "from math import factorial\nN = 709;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "199": {
            "code": "from math import factorial\nN = 851;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "200": {
            "code": "from math import factorial\nN = 1808;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "201": {
            "code": "from math import factorial\nN = 1860;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "202": {
            "code": "from math import factorial\nN = -98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "203": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "204": {
            "code": "from math import factorial\nN = 978;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "205": {
            "code": "from math import factorial\nN = 38;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "206": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "207": {
            "code": "from math import factorial\nN = 1991;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "208": {
            "code": "from math import factorial\nN = 1291;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "209": {
            "code": "from math import factorial\nN = 356;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "210": {
            "code": "from math import factorial\nN = 1709;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "211": {
            "code": "from math import factorial\nN = 487;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "212": {
            "code": "from math import factorial\nN = 966;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "213": {
            "code": "from math import factorial\nN = 1757;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "214": {
            "code": "from math import factorial\nN = 609;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "215": {
            "code": "from math import factorial\nN = 370;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "216": {
            "code": "from math import factorial\nN = 130;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "217": {
            "code": "from math import factorial\nN = 396;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "218": {
            "code": "from math import factorial\nN = 442;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "219": {
            "code": "from math import factorial\nN = 256;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "220": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "221": {
            "code": "from math import factorial\nN = -41;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "222": {
            "code": "from math import factorial\nN = 246;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "223": {
            "code": "from math import factorial\nN = 714;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "224": {
            "code": "from math import factorial\nN = 1305;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "225": {
            "code": "from math import factorial\nN = 1721;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "226": {
            "code": "from math import factorial\nN = 207;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "227": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "228": {
            "code": "from math import factorial\nN = 553;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "229": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "230": {
            "code": "from math import factorial\nN = 136;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "231": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "232": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "233": {
            "code": "from math import factorial\nN = -96;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "234": {
            "code": "from math import factorial\nN = 1503;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "235": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "236": {
            "code": "from math import factorial\nN = 349;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "237": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "238": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "239": {
            "code": "from math import factorial\nN = 102;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "240": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "241": {
            "code": "from math import factorial\nN = 15;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "242": {
            "code": "from math import factorial\nN = 1662;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "243": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "244": {
            "code": "from math import factorial\nN = 1483;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "245": {
            "code": "from math import factorial\nN = -85;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "246": {
            "code": "from math import factorial\nN = 609;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "247": {
            "code": "from math import factorial\nN = 468;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "248": {
            "code": "from math import factorial\nN = 1805;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "249": {
            "code": "from math import factorial\nN = 217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "250": {
            "code": "from math import factorial\nN = -100;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "251": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "252": {
            "code": "from math import factorial\nN = -52;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "253": {
            "code": "from math import factorial\nN = 1862;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "254": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "255": {
            "code": "from math import factorial\nN = 409;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "256": {
            "code": "from math import factorial\nN = -70;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "257": {
            "code": "from math import factorial\nN = 1654;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "258": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "259": {
            "code": "from math import factorial\nN = 466;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "260": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "261": {
            "code": "from math import factorial\nN = 827;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "262": {
            "code": "from math import factorial\nN = 223;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "263": {
            "code": "from math import factorial\nN = 1755;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "264": {
            "code": "from math import factorial\nN = 981;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "265": {
            "code": "from math import factorial\nN = 1756;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "266": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "267": {
            "code": "from math import factorial\nN = 615;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "268": {
            "code": "from math import factorial\nN = -98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "269": {
            "code": "from math import factorial\nN = 1923;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "270": {
            "code": "from math import factorial\nN = 625;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "271": {
            "code": "from math import factorial\nN = -98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "272": {
            "code": "from math import factorial\nN = 22;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "273": {
            "code": "from math import factorial\nN = -12;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "274": {
            "code": "from math import factorial\nN = 1554;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "275": {
            "code": "from math import factorial\nN = 399;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "276": {
            "code": "from math import factorial\nN = 1915;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "277": {
            "code": "from math import factorial\nN = 1319;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "278": {
            "code": "from math import factorial\nN = 539;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "279": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "280": {
            "code": "from math import factorial\nN = 1253;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "281": {
            "code": "from math import factorial\nN = 1808;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "282": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "283": {
            "code": "from math import factorial\nN = 1597;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "284": {
            "code": "from math import factorial\nN = 152;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "285": {
            "code": "from math import factorial\nN = 1919;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "286": {
            "code": "from math import factorial\nN = 1905;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "287": {
            "code": "from math import factorial\nN = 1602;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "288": {
            "code": "from math import factorial\nN = 145;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "289": {
            "code": "from math import factorial\nN = 608;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "290": {
            "code": "from math import factorial\nN = -57;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "291": {
            "code": "from math import factorial\nN = -100;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "292": {
            "code": "from math import factorial\nN = -95;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "293": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "294": {
            "code": "from math import factorial\nN = 1049;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "295": {
            "code": "from math import factorial\nN = 1628;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "296": {
            "code": "from math import factorial\nN = 220;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "297": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "298": {
            "code": "from math import factorial\nN = 1600;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "299": {
            "code": "from math import factorial\nN = 476;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "300": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "301": {
            "code": "from math import factorial\nN = 1514;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "302": {
            "code": "from math import factorial\nN = 925;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "303": {
            "code": "from math import factorial\nN = -77;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "304": {
            "code": "from math import factorial\nN = 1090;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "305": {
            "code": "from math import factorial\nN = 142;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "306": {
            "code": "from math import factorial\nN = 1702;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "307": {
            "code": "from math import factorial\nN = 1498;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "308": {
            "code": "from math import factorial\nN = -46;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "309": {
            "code": "from math import factorial\nN = 1951;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "310": {
            "code": "from math import factorial\nN = -60;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "311": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "312": {
            "code": "from math import factorial\nN = 1464;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "313": {
            "code": "from math import factorial\nN = 1130;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "314": {
            "code": "from math import factorial\nN = 307;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "315": {
            "code": "from math import factorial\nN = 1265;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "316": {
            "code": "from math import factorial\nN = -41;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "317": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "318": {
            "code": "from math import factorial\nN = 367;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "319": {
            "code": "from math import factorial\nN = -94;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "320": {
            "code": "from math import factorial\nN = 1253;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "321": {
            "code": "from math import factorial\nN = -61;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "322": {
            "code": "from math import factorial\nN = 1929;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "323": {
            "code": "from math import factorial\nN = 5;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "324": {
            "code": "from math import factorial\nN = -31;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "325": {
            "code": "from math import factorial\nN = 1930;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "326": {
            "code": "from math import factorial\nN = -29;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "327": {
            "code": "from math import factorial\nN = 1755;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "328": {
            "code": "from math import factorial\nN = -75;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "329": {
            "code": "from math import factorial\nN = 818;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "330": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "331": {
            "code": "from math import factorial\nN = 185;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "332": {
            "code": "from math import factorial\nN = 157;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "333": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "334": {
            "code": "from math import factorial\nN = -36;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "335": {
            "code": "from math import factorial\nN = 221;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "336": {
            "code": "from math import factorial\nN = -1;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "337": {
            "code": "from math import factorial\nN = 1936;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "338": {
            "code": "from math import factorial\nN = 1005;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "339": {
            "code": "from math import factorial\nN = 1501;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "340": {
            "code": "from math import factorial\nN = 1595;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "341": {
            "code": "from math import factorial\nN = 806;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "342": {
            "code": "from math import factorial\nN = 987;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "343": {
            "code": "from math import factorial\nN = 2;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "344": {
            "code": "from math import factorial\nN = 372;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "345": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "346": {
            "code": "from math import factorial\nN = 1840;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "347": {
            "code": "from math import factorial\nN = 1870;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "348": {
            "code": "from math import factorial\nN = 24;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "349": {
            "code": "from math import factorial\nN = 1933;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "350": {
            "code": "from math import factorial\nN = 1821;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "351": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "352": {
            "code": "from math import factorial\nN = 1779;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "353": {
            "code": "from math import factorial\nN = 636;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "354": {
            "code": "from math import factorial\nN = 1552;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "355": {
            "code": "from math import factorial\nN = 820;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "356": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "357": {
            "code": "from math import factorial\nN = -98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "358": {
            "code": "from math import factorial\nN = 1071;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "359": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "360": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "361": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "362": {
            "code": "from math import factorial\nN = 766;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "363": {
            "code": "from math import factorial\nN = 370;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "364": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "365": {
            "code": "from math import factorial\nN = 1798;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "366": {
            "code": "from math import factorial\nN = 9;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "367": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "368": {
            "code": "from math import factorial\nN = 189;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "369": {
            "code": "from math import factorial\nN = 217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "370": {
            "code": "from math import factorial\nN = 217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "371": {
            "code": "from math import factorial\nN = 1271;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "372": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "373": {
            "code": "from math import factorial\nN = -74;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "374": {
            "code": "from math import factorial\nN = 1073;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "375": {
            "code": "from math import factorial\nN = 1052;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "376": {
            "code": "from math import factorial\nN = 1965;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "377": {
            "code": "from math import factorial\nN = 440;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "378": {
            "code": "from math import factorial\nN = 154;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "379": {
            "code": "from math import factorial\nN = 414;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "380": {
            "code": "from math import factorial\nN = -46;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "381": {
            "code": "from math import factorial\nN = 1312;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "382": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "383": {
            "code": "from math import factorial\nN = 894;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "384": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "385": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "386": {
            "code": "from math import factorial\nN = -72;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "387": {
            "code": "from math import factorial\nN = 977;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "388": {
            "code": "from math import factorial\nN = 748;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "389": {
            "code": "from math import factorial\nN = 1956;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "390": {
            "code": "from math import factorial\nN = 1723;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "391": {
            "code": "from math import factorial\nN = 1721;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "392": {
            "code": "from math import factorial\nN = -55;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "393": {
            "code": "from math import factorial\nN = 1981;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "394": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "395": {
            "code": "from math import factorial\nN = 597;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "396": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "397": {
            "code": "from math import factorial\nN = 1171;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "398": {
            "code": "from math import factorial\nN = -100;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "399": {
            "code": "from math import factorial\nN = 478;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "400": {
            "code": "from math import factorial\nN = 217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "401": {
            "code": "from math import factorial\nN = 1051;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "402": {
            "code": "from math import factorial\nN = 925;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "403": {
            "code": "from math import factorial\nN = 1790;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "404": {
            "code": "from math import factorial\nN = 1437;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "405": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "406": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "407": {
            "code": "from math import factorial\nN = 1971;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "408": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "409": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "410": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "411": {
            "code": "from math import factorial\nN = 1137;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "412": {
            "code": "from math import factorial\nN = -64;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "413": {
            "code": "from math import factorial\nN = 1082;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "414": {
            "code": "from math import factorial\nN = 1182;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "415": {
            "code": "from math import factorial\nN = 1857;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "416": {
            "code": "from math import factorial\nN = 1815;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "417": {
            "code": "from math import factorial\nN = 1217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "418": {
            "code": "from math import factorial\nN = 96;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "419": {
            "code": "from math import factorial\nN = 927;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "420": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "421": {
            "code": "from math import factorial\nN = 535;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "422": {
            "code": "from math import factorial\nN = 1868;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "423": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "424": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "425": {
            "code": "from math import factorial\nN = 450;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "426": {
            "code": "from math import factorial\nN = 1321;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "427": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "428": {
            "code": "from math import factorial\nN = 214;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "429": {
            "code": "from math import factorial\nN = 883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "430": {
            "code": "from math import factorial\nN = 1892;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "431": {
            "code": "from math import factorial\nN = 1874;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "432": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "433": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "434": {
            "code": "from math import factorial\nN = 999;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "435": {
            "code": "from math import factorial\nN = 674;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "436": {
            "code": "from math import factorial\nN = 424;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "437": {
            "code": "from math import factorial\nN = 1704;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "438": {
            "code": "from math import factorial\nN = 1197;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "439": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "440": {
            "code": "from math import factorial\nN = 455;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "441": {
            "code": "from math import factorial\nN = 84;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "442": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "443": {
            "code": "from math import factorial\nN = -63;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "444": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "445": {
            "code": "from math import factorial\nN = 610;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "446": {
            "code": "from math import factorial\nN = -74;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "447": {
            "code": "from math import factorial\nN = 986;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "448": {
            "code": "from math import factorial\nN = 497;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "449": {
            "code": "from math import factorial\nN = 263;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "450": {
            "code": "from math import factorial\nN = 1271;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "451": {
            "code": "from math import factorial\nN = 422;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "452": {
            "code": "from math import factorial\nN = 104;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "453": {
            "code": "from math import factorial\nN = 1920;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "454": {
            "code": "from math import factorial\nN = 2000;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "455": {
            "code": "from math import factorial\nN = 1422;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "456": {
            "code": "from math import factorial\nN = -61;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "457": {
            "code": "from math import factorial\nN = 1923;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "458": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "459": {
            "code": "from math import factorial\nN = 841;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "460": {
            "code": "from math import factorial\nN = 1549;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "461": {
            "code": "from math import factorial\nN = 1245;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "462": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "463": {
            "code": "from math import factorial\nN = 1245;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "464": {
            "code": "from math import factorial\nN = 1503;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "465": {
            "code": "from math import factorial\nN = 1100;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "466": {
            "code": "from math import factorial\nN = 774;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "467": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "468": {
            "code": "from math import factorial\nN = 1190;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "469": {
            "code": "from math import factorial\nN = 1594;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "470": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "471": {
            "code": "from math import factorial\nN = 1255;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "472": {
            "code": "from math import factorial\nN = 1952;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "473": {
            "code": "from math import factorial\nN = 835;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "474": {
            "code": "from math import factorial\nN = 420;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "475": {
            "code": "from math import factorial\nN = 361;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "476": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "477": {
            "code": "from math import factorial\nN = 217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "478": {
            "code": "from math import factorial\nN = 1841;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "479": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "480": {
            "code": "from math import factorial\nN = 386;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "481": {
            "code": "from math import factorial\nN = 1952;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "482": {
            "code": "from math import factorial\nN = 448;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "483": {
            "code": "from math import factorial\nN = 1831;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "484": {
            "code": "from math import factorial\nN = 395;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "485": {
            "code": "from math import factorial\nN = 1817;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "486": {
            "code": "from math import factorial\nN = -68;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "487": {
            "code": "from math import factorial\nN = 1982;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "488": {
            "code": "from math import factorial\nN = -42;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "489": {
            "code": "from math import factorial\nN = -100;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "490": {
            "code": "from math import factorial\nN = 168;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "491": {
            "code": "from math import factorial\nN = 1652;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "492": {
            "code": "from math import factorial\nN = -45;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "493": {
            "code": "from math import factorial\nN = 597;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "494": {
            "code": "from math import factorial\nN = 1490;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "495": {
            "code": "from math import factorial\nN = 1981;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "496": {
            "code": "from math import factorial\nN = -97;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "497": {
            "code": "from math import factorial\nN = 1861;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "498": {
            "code": "from math import factorial\nN = 1906;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "499": {
            "code": "from math import factorial\nN = 1728;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "500": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "501": {
            "code": "from math import factorial\nN = 983;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "502": {
            "code": "from math import factorial\nN = 546;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "503": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "504": {
            "code": "from math import factorial\nN = -75;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "505": {
            "code": "from math import factorial\nN = 588;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "506": {
            "code": "from math import factorial\nN = 1985;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "507": {
            "code": "from math import factorial\nN = 1933;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "508": {
            "code": "from math import factorial\nN = 606;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "509": {
            "code": "from math import factorial\nN = -62;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "510": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "511": {
            "code": "from math import factorial\nN = 112;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "512": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "513": {
            "code": "from math import factorial\nN = -64;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "514": {
            "code": "from math import factorial\nN = 749;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "515": {
            "code": "from math import factorial\nN = 512;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "516": {
            "code": "from math import factorial\nN = 393;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "517": {
            "code": "from math import factorial\nN = 1167;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "518": {
            "code": "from math import factorial\nN = 1853;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "519": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "520": {
            "code": "from math import factorial\nN = 1458;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "521": {
            "code": "from math import factorial\nN = 660;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "522": {
            "code": "from math import factorial\nN = 1993;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "523": {
            "code": "from math import factorial\nN = 217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "524": {
            "code": "from math import factorial\nN = 1224;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "525": {
            "code": "from math import factorial\nN = 1073;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "526": {
            "code": "from math import factorial\nN = 449;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "527": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "528": {
            "code": "from math import factorial\nN = 1135;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "529": {
            "code": "from math import factorial\nN = -7;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "530": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "531": {
            "code": "from math import factorial\nN = -22;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "532": {
            "code": "from math import factorial\nN = 64;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "533": {
            "code": "from math import factorial\nN = 863;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "534": {
            "code": "from math import factorial\nN = -32;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "535": {
            "code": "from math import factorial\nN = 141;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "536": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "537": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "538": {
            "code": "from math import factorial\nN = 1942;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "539": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "540": {
            "code": "from math import factorial\nN = 328;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "541": {
            "code": "from math import factorial\nN = 1597;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "542": {
            "code": "from math import factorial\nN = 2;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "543": {
            "code": "from math import factorial\nN = 1223;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "544": {
            "code": "from math import factorial\nN = 50;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "545": {
            "code": "from math import factorial\nN = -39;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "546": {
            "code": "from math import factorial\nN = 217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "547": {
            "code": "from math import factorial\nN = 1875;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "548": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "549": {
            "code": "from math import factorial\nN = 1501;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "550": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "551": {
            "code": "from math import factorial\nN = 417;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "552": {
            "code": "from math import factorial\nN = 1384;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "553": {
            "code": "from math import factorial\nN = 388;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "554": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "555": {
            "code": "from math import factorial\nN = 99;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "556": {
            "code": "from math import factorial\nN = 1601;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "557": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "558": {
            "code": "from math import factorial\nN = 223;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "559": {
            "code": "from math import factorial\nN = 16;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "560": {
            "code": "from math import factorial\nN = 95;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "561": {
            "code": "from math import factorial\nN = 1183;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "562": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "563": {
            "code": "from math import factorial\nN = 1891;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "564": {
            "code": "from math import factorial\nN = -81;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "565": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "566": {
            "code": "from math import factorial\nN = 1231;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "567": {
            "code": "from math import factorial\nN = 1545;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "568": {
            "code": "from math import factorial\nN = 501;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "569": {
            "code": "from math import factorial\nN = 1291;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "570": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "571": {
            "code": "from math import factorial\nN = 1099;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "572": {
            "code": "from math import factorial\nN = 573;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "573": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "574": {
            "code": "from math import factorial\nN = 459;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "575": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "576": {
            "code": "from math import factorial\nN = 707;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "577": {
            "code": "from math import factorial\nN = 263;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "578": {
            "code": "from math import factorial\nN = 1095;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "579": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "580": {
            "code": "from math import factorial\nN = 684;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "581": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "582": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "583": {
            "code": "from math import factorial\nN = 1686;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "584": {
            "code": "from math import factorial\nN = 520;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "585": {
            "code": "from math import factorial\nN = 182;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "586": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "587": {
            "code": "from math import factorial\nN = -74;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "588": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "589": {
            "code": "from math import factorial\nN = 485;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "590": {
            "code": "from math import factorial\nN = 1929;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "591": {
            "code": "from math import factorial\nN = 1159;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "592": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "593": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "594": {
            "code": "from math import factorial\nN = 1574;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "595": {
            "code": "from math import factorial\nN = 684;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "596": {
            "code": "from math import factorial\nN = 705;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "597": {
            "code": "from math import factorial\nN = 1755;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "598": {
            "code": "from math import factorial\nN = 1441;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "599": {
            "code": "from math import factorial\nN = 427;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "600": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "601": {
            "code": "from math import factorial\nN = 1577;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "602": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "603": {
            "code": "from math import factorial\nN = -41;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "604": {
            "code": "from math import factorial\nN = 1855;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "605": {
            "code": "from math import factorial\nN = 1135;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "606": {
            "code": "from math import factorial\nN = 582;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "607": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "608": {
            "code": "from math import factorial\nN = -7;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "609": {
            "code": "from math import factorial\nN = 1731;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "610": {
            "code": "from math import factorial\nN = -29;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "611": {
            "code": "from math import factorial\nN = 436;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "612": {
            "code": "from math import factorial\nN = 2000;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "613": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "614": {
            "code": "from math import factorial\nN = 1393;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "615": {
            "code": "from math import factorial\nN = 1688;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "616": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "617": {
            "code": "from math import factorial\nN = 208;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "618": {
            "code": "from math import factorial\nN = -98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "619": {
            "code": "from math import factorial\nN = 1964;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "620": {
            "code": "from math import factorial\nN = 373;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "621": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "622": {
            "code": "from math import factorial\nN = 503;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "623": {
            "code": "from math import factorial\nN = 184;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "624": {
            "code": "from math import factorial\nN = 606;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "625": {
            "code": "from math import factorial\nN = 940;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "626": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "627": {
            "code": "from math import factorial\nN = -35;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "628": {
            "code": "from math import factorial\nN = 1224;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "629": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "630": {
            "code": "from math import factorial\nN = -89;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "631": {
            "code": "from math import factorial\nN = 525;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "632": {
            "code": "from math import factorial\nN = 1380;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "633": {
            "code": "from math import factorial\nN = 496;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "634": {
            "code": "from math import factorial\nN = 1728;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "635": {
            "code": "from math import factorial\nN = -81;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "636": {
            "code": "from math import factorial\nN = -57;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "637": {
            "code": "from math import factorial\nN = 1958;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "638": {
            "code": "from math import factorial\nN = 705;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "639": {
            "code": "from math import factorial\nN = 495;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "640": {
            "code": "from math import factorial\nN = 1745;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "641": {
            "code": "from math import factorial\nN = -89;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "642": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "643": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "644": {
            "code": "from math import factorial\nN = 1264;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "645": {
            "code": "from math import factorial\nN = 571;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "646": {
            "code": "from math import factorial\nN = 1850;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "647": {
            "code": "from math import factorial\nN = 513;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "648": {
            "code": "from math import factorial\nN = 130;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "649": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "650": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "651": {
            "code": "from math import factorial\nN = 363;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "652": {
            "code": "from math import factorial\nN = 1717;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "653": {
            "code": "from math import factorial\nN = 1941;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "654": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "655": {
            "code": "from math import factorial\nN = 1989;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "656": {
            "code": "from math import factorial\nN = 1777;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "657": {
            "code": "from math import factorial\nN = 520;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "658": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "659": {
            "code": "from math import factorial\nN = 1182;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "660": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "661": {
            "code": "from math import factorial\nN = 1968;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "662": {
            "code": "from math import factorial\nN = 651;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "663": {
            "code": "from math import factorial\nN = 1516;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "664": {
            "code": "from math import factorial\nN = 601;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "665": {
            "code": "from math import factorial\nN = -89;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "666": {
            "code": "from math import factorial\nN = 1713;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "667": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "668": {
            "code": "from math import factorial\nN = 1038;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "669": {
            "code": "from math import factorial\nN = 1889;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "670": {
            "code": "from math import factorial\nN = 1893;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "671": {
            "code": "from math import factorial\nN = 152;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "672": {
            "code": "from math import factorial\nN = 1963;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "673": {
            "code": "from math import factorial\nN = 257;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "674": {
            "code": "from math import factorial\nN = 506;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "675": {
            "code": "from math import factorial\nN = 1673;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "676": {
            "code": "from math import factorial\nN = 1587;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "677": {
            "code": "from math import factorial\nN = 147;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "678": {
            "code": "from math import factorial\nN = 1649;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "679": {
            "code": "from math import factorial\nN = 1324;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "680": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "681": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "682": {
            "code": "from math import factorial\nN = 1022;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "683": {
            "code": "from math import factorial\nN = 586;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "684": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "685": {
            "code": "from math import factorial\nN = 1375;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "686": {
            "code": "from math import factorial\nN = 227;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "687": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "688": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "689": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "690": {
            "code": "from math import factorial\nN = 489;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "691": {
            "code": "from math import factorial\nN = 1219;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "692": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "693": {
            "code": "from math import factorial\nN = 1769;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "694": {
            "code": "from math import factorial\nN = 1689;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "695": {
            "code": "from math import factorial\nN = 678;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "696": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "697": {
            "code": "from math import factorial\nN = 15;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "698": {
            "code": "from math import factorial\nN = 1903;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "699": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "700": {
            "code": "from math import factorial\nN = 1234;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "701": {
            "code": "from math import factorial\nN = -100;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "702": {
            "code": "from math import factorial\nN = 880;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "703": {
            "code": "from math import factorial\nN = 1949;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "704": {
            "code": "from math import factorial\nN = 84;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "705": {
            "code": "from math import factorial\nN = 1259;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "706": {
            "code": "from math import factorial\nN = 144;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "707": {
            "code": "from math import factorial\nN = 414;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "708": {
            "code": "from math import factorial\nN = 446;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "709": {
            "code": "from math import factorial\nN = 1649;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "710": {
            "code": "from math import factorial\nN = 452;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "711": {
            "code": "from math import factorial\nN = 975;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "712": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "713": {
            "code": "from math import factorial\nN = 903;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "714": {
            "code": "from math import factorial\nN = 1722;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "715": {
            "code": "from math import factorial\nN = 870;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "716": {
            "code": "from math import factorial\nN = 491;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "717": {
            "code": "from math import factorial\nN = -65;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "718": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "719": {
            "code": "from math import factorial\nN = 613;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "720": {
            "code": "from math import factorial\nN = 294;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "721": {
            "code": "from math import factorial\nN = 934;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "722": {
            "code": "from math import factorial\nN = 1280;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "723": {
            "code": "from math import factorial\nN = 1384;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "724": {
            "code": "from math import factorial\nN = 749;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "725": {
            "code": "from math import factorial\nN = 568;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "726": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "727": {
            "code": "from math import factorial\nN = 551;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "728": {
            "code": "from math import factorial\nN = 1108;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "729": {
            "code": "from math import factorial\nN = 948;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "730": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "731": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "732": {
            "code": "from math import factorial\nN = 1106;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "733": {
            "code": "from math import factorial\nN = 646;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "734": {
            "code": "from math import factorial\nN = 1913;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "735": {
            "code": "from math import factorial\nN = 84;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "736": {
            "code": "from math import factorial\nN = 381;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "737": {
            "code": "from math import factorial\nN = 359;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "738": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "739": {
            "code": "from math import factorial\nN = 829;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "740": {
            "code": "from math import factorial\nN = 273;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "741": {
            "code": "from math import factorial\nN = -98;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "742": {
            "code": "from math import factorial\nN = -99;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "743": {
            "code": "from math import factorial\nN = 257;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "744": {
            "code": "from math import factorial\nN = 13;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "745": {
            "code": "from math import factorial\nN = 1755;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "746": {
            "code": "from math import factorial\nN = -4;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "747": {
            "code": "from math import factorial\nN = 109;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "748": {
            "code": "from math import factorial\nN = -36;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "749": {
            "code": "from math import factorial\nN = 88;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "750": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "751": {
            "code": "from math import factorial\nN = 679;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "752": {
            "code": "from math import factorial\nN = 867;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "753": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "754": {
            "code": "from math import factorial\nN = -4;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "755": {
            "code": "from math import factorial\nN = 1990;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "756": {
            "code": "from math import factorial\nN = -99;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "757": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "758": {
            "code": "from math import factorial\nN = 82;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "759": {
            "code": "from math import factorial\nN = 1230;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "760": {
            "code": "from math import factorial\nN = -61;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "761": {
            "code": "from math import factorial\nN = 478;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "762": {
            "code": "from math import factorial\nN = 703;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "763": {
            "code": "from math import factorial\nN = 9;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "764": {
            "code": "from math import factorial\nN = -45;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "765": {
            "code": "from math import factorial\nN = -89;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "766": {
            "code": "from math import factorial\nN = -97;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "767": {
            "code": "from math import factorial\nN = 1122;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "768": {
            "code": "from math import factorial\nN = 372;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "769": {
            "code": "from math import factorial\nN = 817;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "770": {
            "code": "from math import factorial\nN = 530;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "771": {
            "code": "from math import factorial\nN = 192;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "772": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "773": {
            "code": "from math import factorial\nN = 932;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "774": {
            "code": "from math import factorial\nN = 765;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "775": {
            "code": "from math import factorial\nN = -42;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "776": {
            "code": "from math import factorial\nN = 1953;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "777": {
            "code": "from math import factorial\nN = 394;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "778": {
            "code": "from math import factorial\nN = 1204;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "779": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "780": {
            "code": "from math import factorial\nN = 501;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "781": {
            "code": "from math import factorial\nN = -13;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "782": {
            "code": "from math import factorial\nN = 1025;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "783": {
            "code": "from math import factorial\nN = 429;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "784": {
            "code": "from math import factorial\nN = 1941;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "785": {
            "code": "from math import factorial\nN = 296;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "786": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "787": {
            "code": "from math import factorial\nN = -36;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "788": {
            "code": "from math import factorial\nN = -60;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "789": {
            "code": "from math import factorial\nN = 1536;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "790": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "791": {
            "code": "from math import factorial\nN = 1049;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "792": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "793": {
            "code": "from math import factorial\nN = 367;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "794": {
            "code": "from math import factorial\nN = 20;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "795": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "796": {
            "code": "from math import factorial\nN = 419;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "797": {
            "code": "from math import factorial\nN = 1755;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "798": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "799": {
            "code": "from math import factorial\nN = 1974;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "800": {
            "code": "from math import factorial\nN = 1943;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "801": {
            "code": "from math import factorial\nN = 1319;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "802": {
            "code": "from math import factorial\nN = -39;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "803": {
            "code": "from math import factorial\nN = 1837;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "804": {
            "code": "from math import factorial\nN = 605;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "805": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "806": {
            "code": "from math import factorial\nN = 500;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "807": {
            "code": "from math import factorial\nN = -57;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "808": {
            "code": "from math import factorial\nN = 559;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "809": {
            "code": "from math import factorial\nN = 1434;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "810": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "811": {
            "code": "from math import factorial\nN = -89;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "812": {
            "code": "from math import factorial\nN = 768;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "813": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "814": {
            "code": "from math import factorial\nN = 1201;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "815": {
            "code": "from math import factorial\nN = 1819;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "816": {
            "code": "from math import factorial\nN = -85;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "817": {
            "code": "from math import factorial\nN = 1435;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "818": {
            "code": "from math import factorial\nN = 819;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "819": {
            "code": "from math import factorial\nN = 141;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "820": {
            "code": "from math import factorial\nN = 1986;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "821": {
            "code": "from math import factorial\nN = 1751;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "822": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "823": {
            "code": "from math import factorial\nN = 1774;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "824": {
            "code": "from math import factorial\nN = 1755;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "825": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "826": {
            "code": "from math import factorial\nN = 954;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "827": {
            "code": "from math import factorial\nN = 1538;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "828": {
            "code": "from math import factorial\nN = 1121;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "829": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "830": {
            "code": "from math import factorial\nN = 2000;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "831": {
            "code": "from math import factorial\nN = 396;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "832": {
            "code": "from math import factorial\nN = -40;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "833": {
            "code": "from math import factorial\nN = 601;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "834": {
            "code": "from math import factorial\nN = 2;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "835": {
            "code": "from math import factorial\nN = -60;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "836": {
            "code": "from math import factorial\nN = 1312;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "837": {
            "code": "from math import factorial\nN = 1476;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "838": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "839": {
            "code": "from math import factorial\nN = 1582;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "840": {
            "code": "from math import factorial\nN = 1673;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "841": {
            "code": "from math import factorial\nN = 304;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "842": {
            "code": "from math import factorial\nN = 1820;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "843": {
            "code": "from math import factorial\nN = 1576;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "844": {
            "code": "from math import factorial\nN = -94;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "845": {
            "code": "from math import factorial\nN = 1731;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "846": {
            "code": "from math import factorial\nN = -96;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "847": {
            "code": "from math import factorial\nN = -13;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "848": {
            "code": "from math import factorial\nN = 137;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "849": {
            "code": "from math import factorial\nN = 827;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "850": {
            "code": "from math import factorial\nN = -86;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "851": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "852": {
            "code": "from math import factorial\nN = 971;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "853": {
            "code": "from math import factorial\nN = -62;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "854": {
            "code": "from math import factorial\nN = 978;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "855": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "856": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "857": {
            "code": "from math import factorial\nN = 756;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "858": {
            "code": "from math import factorial\nN = 486;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "859": {
            "code": "from math import factorial\nN = 814;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "860": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "861": {
            "code": "from math import factorial\nN = 973;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "862": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "863": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "864": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "865": {
            "code": "from math import factorial\nN = 1070;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "866": {
            "code": "from math import factorial\nN = -86;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "867": {
            "code": "from math import factorial\nN = 1507;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "868": {
            "code": "from math import factorial\nN = 446;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "869": {
            "code": "from math import factorial\nN = 361;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "870": {
            "code": "from math import factorial\nN = 1735;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "871": {
            "code": "from math import factorial\nN = 66;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "872": {
            "code": "from math import factorial\nN = 394;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "873": {
            "code": "from math import factorial\nN = 52;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "874": {
            "code": "from math import factorial\nN = 1890;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "875": {
            "code": "from math import factorial\nN = 1755;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "876": {
            "code": "from math import factorial\nN = 196;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "877": {
            "code": "from math import factorial\nN = 705;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "878": {
            "code": "from math import factorial\nN = 1262;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "879": {
            "code": "from math import factorial\nN = 412;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "880": {
            "code": "from math import factorial\nN = -65;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "881": {
            "code": "from math import factorial\nN = 316;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "882": {
            "code": "from math import factorial\nN = 627;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "883": {
            "code": "from math import factorial\nN = -41;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "884": {
            "code": "from math import factorial\nN = 372;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "885": {
            "code": "from math import factorial\nN = 1816;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "886": {
            "code": "from math import factorial\nN = 217;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "887": {
            "code": "from math import factorial\nN = 1004;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "888": {
            "code": "from math import factorial\nN = 397;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "889": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "890": {
            "code": "from math import factorial\nN = 1482;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "891": {
            "code": "from math import factorial\nN = -37;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "892": {
            "code": "from math import factorial\nN = 366;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "893": {
            "code": "from math import factorial\nN = 1644;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "894": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "895": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "896": {
            "code": "from math import factorial\nN = -92;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "897": {
            "code": "from math import factorial\nN = 355;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "898": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "899": {
            "code": "from math import factorial\nN = 495;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "900": {
            "code": "from math import factorial\nN = -86;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "901": {
            "code": "from math import factorial\nN = 1017;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "902": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "903": {
            "code": "from math import factorial\nN = 524;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "904": {
            "code": "from math import factorial\nN = 1051;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "905": {
            "code": "from math import factorial\nN = -69;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "906": {
            "code": "from math import factorial\nN = 1948;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "907": {
            "code": "from math import factorial\nN = 1535;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "908": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "909": {
            "code": "from math import factorial\nN = 356;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "910": {
            "code": "from math import factorial\nN = 408;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "911": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "912": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "913": {
            "code": "from math import factorial\nN = 1593;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "914": {
            "code": "from math import factorial\nN = 610;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "915": {
            "code": "from math import factorial\nN = 293;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "916": {
            "code": "from math import factorial\nN = 1285;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "917": {
            "code": "from math import factorial\nN = 1487;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "918": {
            "code": "from math import factorial\nN = 156;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "919": {
            "code": "from math import factorial\nN = 261;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "920": {
            "code": "from math import factorial\nN = 1409;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "921": {
            "code": "from math import factorial\nN = 254;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "922": {
            "code": "from math import factorial\nN = 1908;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "923": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "924": {
            "code": "from math import factorial\nN = -50;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "925": {
            "code": "from math import factorial\nN = 1371;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "926": {
            "code": "from math import factorial\nN = 272;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "927": {
            "code": "from math import factorial\nN = -26;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "928": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "929": {
            "code": "from math import factorial\nN = 613;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "930": {
            "code": "from math import factorial\nN = 887;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "931": {
            "code": "from math import factorial\nN = -80;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "932": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "933": {
            "code": "from math import factorial\nN = 425;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "934": {
            "code": "from math import factorial\nN = -67;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "935": {
            "code": "from math import factorial\nN = 1883;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "936": {
            "code": "from math import factorial\nN = 252;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "937": {
            "code": "from math import factorial\nN = -64;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "938": {
            "code": "from math import factorial\nN = 237;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "939": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "940": {
            "code": "from math import factorial\nN = 814;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "941": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "942": {
            "code": "from math import factorial\nN = 417;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "943": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "944": {
            "code": "from math import factorial\nN = 690;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "945": {
            "code": "from math import factorial\nN = 724;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "946": {
            "code": "from math import factorial\nN = 1893;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "947": {
            "code": "from math import factorial\nN = 485;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "948": {
            "code": "from math import factorial\nN = 423;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "949": {
            "code": "from math import factorial\nN = 48;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "950": {
            "code": "from math import factorial\nN = 559;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "951": {
            "code": "from math import factorial\nN = 719;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "952": {
            "code": "from math import factorial\nN = 591;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "953": {
            "code": "from math import factorial\nN = 1844;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "954": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "955": {
            "code": "from math import factorial\nN = 922;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "956": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "957": {
            "code": "from math import factorial\nN = 549;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "958": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "959": {
            "code": "from math import factorial\nN = 1875;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "960": {
            "code": "from math import factorial\nN = 1180;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "961": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "962": {
            "code": "from math import factorial\nN = 1897;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "963": {
            "code": "from math import factorial\nN = 1973;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "964": {
            "code": "from math import factorial\nN = 1737;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "965": {
            "code": "from math import factorial\nN = 166;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "966": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "967": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "968": {
            "code": "from math import factorial\nN = -58;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "969": {
            "code": "from math import factorial\nN = 994;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "970": {
            "code": "from math import factorial\nN = 1827;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "971": {
            "code": "from math import factorial\nN = 163;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "972": {
            "code": "from math import factorial\nN = 1501;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "973": {
            "code": "from math import factorial\nN = 1690;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "974": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "975": {
            "code": "from math import factorial\nN = 1193;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "976": {
            "code": "from math import factorial\nN = 286;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "977": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "978": {
            "code": "from math import factorial\nN = 182;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "979": {
            "code": "from math import factorial\nN = 465;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "980": {
            "code": "from math import factorial\nN = 1604;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "981": {
            "code": "from math import factorial\nN = 1654;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "982": {
            "code": "from math import factorial\nN = 1980;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "983": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "984": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "985": {
            "code": "from math import factorial\nN = 918;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "986": {
            "code": "from math import factorial\nN = 1392;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "987": {
            "code": "from math import factorial\nN = 767;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "988": {
            "code": "from math import factorial\nN = 99;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "989": {
            "code": "from math import factorial\nN = 369;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "990": {
            "code": "from math import factorial\nN = -35;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "991": {
            "code": "from math import factorial\nN = 375;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "992": {
            "code": "from math import factorial\nN = 1998;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "993": {
            "code": "from math import factorial\nN = 1790;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "994": {
            "code": "from math import factorial\nN = 1154;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "995": {
            "code": "from math import factorial\nN = -90;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "996": {
            "code": "from math import factorial\nN = 1229;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "997": {
            "code": "from math import factorial\nN = -100;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0
            ]
        },
        "998": {
            "code": "from math import factorial\nN = 1984;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "999": {
            "code": "from math import factorial\nN = 1589;P = 0\nA = [1, 1, 1]\nnum_k=0\nnum_g=0\nfor i in range(N):\n    if A[i]%2==0:\n        num_g+=1\n    else:\n        num_k+=1\nn=num_k//2\nans_k=0\nfor i in range(0,n*2+1,2):\n    ans_k+=factorial(num_k)/factorial(i)/factorial(num_k-i)\nans_g=2**(num_g)\nans=int(ans_k*ans_g)\nif P==0:\n    print(ans)\nelse:\n    ans=2**N-ans\n    print(ans)",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "2410": {
        "0": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "1": {
            "code": "n = 1506;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "2": {
            "code": "n = 4;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "3": {
            "code": "n = 1033;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "4": {
            "code": "n = -54;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "5": {
            "code": "n = 1689;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "6": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "7": {
            "code": "n = 1261;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "8": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "9": {
            "code": "n = 1421;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "10": {
            "code": "n = 946;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "11": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "12": {
            "code": "n = 433;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "13": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "14": {
            "code": "n = 1422;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "15": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "16": {
            "code": "n = 527;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "17": {
            "code": "n = 1537;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "18": {
            "code": "n = 1370;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "19": {
            "code": "n = 228;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "20": {
            "code": "n = -88;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "21": {
            "code": "n = 1692;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "22": {
            "code": "n = 1325;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "23": {
            "code": "n = 1293;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "24": {
            "code": "n = 1987;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "25": {
            "code": "n = 603;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "26": {
            "code": "n = 518;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "27": {
            "code": "n = 889;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "28": {
            "code": "n = 626;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "29": {
            "code": "n = 518;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "30": {
            "code": "n = 385;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "31": {
            "code": "n = 16;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "32": {
            "code": "n = 241;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "33": {
            "code": "n = 1933;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "34": {
            "code": "n = 1088;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "35": {
            "code": "n = 149;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "36": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "37": {
            "code": "n = 1268;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "38": {
            "code": "n = 1746;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "39": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "40": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "41": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "42": {
            "code": "n = 1173;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "43": {
            "code": "n = 1693;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "44": {
            "code": "n = 853;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "45": {
            "code": "n = 1983;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "46": {
            "code": "n = 152;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "47": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "48": {
            "code": "n = -55;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "49": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "50": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "51": {
            "code": "n = 1436;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "52": {
            "code": "n = 1970;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "53": {
            "code": "n = 910;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "54": {
            "code": "n = -55;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "55": {
            "code": "n = 166;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "56": {
            "code": "n = -39;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "57": {
            "code": "n = 23;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "58": {
            "code": "n = -65;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "59": {
            "code": "n = 825;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "60": {
            "code": "n = 1047;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "61": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "62": {
            "code": "n = 1081;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "63": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "64": {
            "code": "n = 1428;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "65": {
            "code": "n = 1752;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "66": {
            "code": "n = 1114;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "67": {
            "code": "n = -6;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "68": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "69": {
            "code": "n = -34;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "70": {
            "code": "n = 1370;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "71": {
            "code": "n = -84;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "72": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "73": {
            "code": "n = 1437;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "74": {
            "code": "n = 1994;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "75": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "76": {
            "code": "n = 501;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "77": {
            "code": "n = 135;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "78": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "79": {
            "code": "n = 1158;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "80": {
            "code": "n = -54;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "81": {
            "code": "n = 1339;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "82": {
            "code": "n = 2000;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "83": {
            "code": "n = 1778;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "84": {
            "code": "n = 545;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "85": {
            "code": "n = 1175;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "86": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "87": {
            "code": "n = -11;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "88": {
            "code": "n = 25;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "89": {
            "code": "n = 1008;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "90": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "91": {
            "code": "n = 272;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "92": {
            "code": "n = 1043;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "93": {
            "code": "n = 154;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "94": {
            "code": "n = 1583;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "95": {
            "code": "n = 265;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "96": {
            "code": "n = 1674;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "97": {
            "code": "n = 1958;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "98": {
            "code": "n = 581;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "99": {
            "code": "n = 315;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "100": {
            "code": "n = 1570;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "101": {
            "code": "n = 1536;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "102": {
            "code": "n = 1980;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "103": {
            "code": "n = 24;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "104": {
            "code": "n = 225;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "105": {
            "code": "n = -76;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "106": {
            "code": "n = 685;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "107": {
            "code": "n = 412;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "108": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "109": {
            "code": "n = 1269;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "110": {
            "code": "n = 1907;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "111": {
            "code": "n = 735;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "112": {
            "code": "n = 316;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "113": {
            "code": "n = 229;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "114": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "115": {
            "code": "n = 1168;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "116": {
            "code": "n = 479;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "117": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "118": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "119": {
            "code": "n = 1784;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "120": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "121": {
            "code": "n = -22;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "122": {
            "code": "n = 605;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "123": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "124": {
            "code": "n = -51;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "125": {
            "code": "n = 1469;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "126": {
            "code": "n = 413;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "127": {
            "code": "n = 1367;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "128": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "129": {
            "code": "n = 1140;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "130": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "131": {
            "code": "n = 286;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "132": {
            "code": "n = 1823;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "133": {
            "code": "n = 424;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "134": {
            "code": "n = 1497;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "135": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "136": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "137": {
            "code": "n = 755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "138": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "139": {
            "code": "n = 342;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "140": {
            "code": "n = -23;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "141": {
            "code": "n = 809;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "142": {
            "code": "n = 1437;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "143": {
            "code": "n = -51;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "144": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "145": {
            "code": "n = 452;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "146": {
            "code": "n = 416;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "147": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "148": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "149": {
            "code": "n = 1880;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "150": {
            "code": "n = 1904;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "151": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "152": {
            "code": "n = 1540;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "153": {
            "code": "n = 568;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "154": {
            "code": "n = 302;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "155": {
            "code": "n = 314;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "156": {
            "code": "n = 412;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "157": {
            "code": "n = 176;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "158": {
            "code": "n = 1217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "159": {
            "code": "n = 1178;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "160": {
            "code": "n = 188;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "161": {
            "code": "n = 1767;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "162": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "163": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "164": {
            "code": "n = 240;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "165": {
            "code": "n = 513;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "166": {
            "code": "n = 1912;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "167": {
            "code": "n = 1781;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "168": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "169": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "170": {
            "code": "n = 1402;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "171": {
            "code": "n = 1982;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "172": {
            "code": "n = 198;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "173": {
            "code": "n = -44;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "174": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "175": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "176": {
            "code": "n = -45;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "177": {
            "code": "n = 1601;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "178": {
            "code": "n = 373;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "179": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "180": {
            "code": "n = 1862;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "181": {
            "code": "n = 1181;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "182": {
            "code": "n = 834;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "183": {
            "code": "n = 1814;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "184": {
            "code": "n = 1224;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "185": {
            "code": "n = 1477;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "186": {
            "code": "n = 870;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "187": {
            "code": "n = 9;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "188": {
            "code": "n = -56;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "189": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "190": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "191": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "192": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "193": {
            "code": "n = 316;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "194": {
            "code": "n = -60;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "195": {
            "code": "n = 536;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "196": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "197": {
            "code": "n = 885;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "198": {
            "code": "n = 242;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "199": {
            "code": "n = 297;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "200": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "201": {
            "code": "n = -64;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "202": {
            "code": "n = 1397;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "203": {
            "code": "n = 1587;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "204": {
            "code": "n = 546;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "205": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "206": {
            "code": "n = 166;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "207": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "208": {
            "code": "n = 168;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "209": {
            "code": "n = 757;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "210": {
            "code": "n = 208;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "211": {
            "code": "n = 800;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "212": {
            "code": "n = 583;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "213": {
            "code": "n = 1052;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "214": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "215": {
            "code": "n = -87;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "216": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "217": {
            "code": "n = 1956;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "218": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "219": {
            "code": "n = 1821;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "220": {
            "code": "n = 798;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "221": {
            "code": "n = -94;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "222": {
            "code": "n = 961;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "223": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "224": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "225": {
            "code": "n = 1852;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "226": {
            "code": "n = 1006;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "227": {
            "code": "n = 942;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "228": {
            "code": "n = 1398;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "229": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "230": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "231": {
            "code": "n = 2000;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "232": {
            "code": "n = 374;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "233": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "234": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "235": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "236": {
            "code": "n = 605;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "237": {
            "code": "n = 1208;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "238": {
            "code": "n = 1242;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "239": {
            "code": "n = 1992;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "240": {
            "code": "n = 1710;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "241": {
            "code": "n = 1879;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "242": {
            "code": "n = 370;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "243": {
            "code": "n = 1516;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "244": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "245": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "246": {
            "code": "n = 1092;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "247": {
            "code": "n = 1791;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "248": {
            "code": "n = 1601;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "249": {
            "code": "n = -56;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "250": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "251": {
            "code": "n = 1939;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "252": {
            "code": "n = 422;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "253": {
            "code": "n = 76;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "254": {
            "code": "n = -71;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "255": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "256": {
            "code": "n = 1984;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "257": {
            "code": "n = -4;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "258": {
            "code": "n = 949;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "259": {
            "code": "n = -84;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "260": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "261": {
            "code": "n = 370;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "262": {
            "code": "n = 481;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "263": {
            "code": "n = 474;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "264": {
            "code": "n = 1232;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "265": {
            "code": "n = -81;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "266": {
            "code": "n = 1240;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "267": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "268": {
            "code": "n = -57;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "269": {
            "code": "n = 963;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "270": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "271": {
            "code": "n = 1026;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "272": {
            "code": "n = 1077;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "273": {
            "code": "n = 599;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "274": {
            "code": "n = 497;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "275": {
            "code": "n = 481;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "276": {
            "code": "n = -58;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "277": {
            "code": "n = 1893;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "278": {
            "code": "n = 400;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "279": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "280": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "281": {
            "code": "n = 287;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "282": {
            "code": "n = 1853;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "283": {
            "code": "n = 176;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "284": {
            "code": "n = 1895;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "285": {
            "code": "n = -56;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "286": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "287": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "288": {
            "code": "n = -58;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "289": {
            "code": "n = 1055;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "290": {
            "code": "n = 905;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "291": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "292": {
            "code": "n = 1391;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "293": {
            "code": "n = 398;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "294": {
            "code": "n = 401;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "295": {
            "code": "n = 1372;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "296": {
            "code": "n = 1201;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "297": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "298": {
            "code": "n = 26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "299": {
            "code": "n = 129;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "300": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "301": {
            "code": "n = 1384;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "302": {
            "code": "n = 600;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "303": {
            "code": "n = 13;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "304": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "305": {
            "code": "n = 1752;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "306": {
            "code": "n = 1330;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "307": {
            "code": "n = 1957;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "308": {
            "code": "n = 358;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "309": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "310": {
            "code": "n = -70;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "311": {
            "code": "n = 426;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "312": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "313": {
            "code": "n = -91;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "314": {
            "code": "n = 766;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "315": {
            "code": "n = 520;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "316": {
            "code": "n = 1932;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "317": {
            "code": "n = 551;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "318": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "319": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "320": {
            "code": "n = 533;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "321": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "322": {
            "code": "n = -35;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "323": {
            "code": "n = 1975;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "324": {
            "code": "n = 704;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "325": {
            "code": "n = 1973;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "326": {
            "code": "n = 1541;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "327": {
            "code": "n = 107;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "328": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "329": {
            "code": "n = 979;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "330": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "331": {
            "code": "n = 803;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "332": {
            "code": "n = 235;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "333": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "334": {
            "code": "n = 1074;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "335": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "336": {
            "code": "n = 846;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "337": {
            "code": "n = 894;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "338": {
            "code": "n = 724;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "339": {
            "code": "n = 472;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "340": {
            "code": "n = 1136;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "341": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "342": {
            "code": "n = 189;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "343": {
            "code": "n = 1602;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "344": {
            "code": "n = 925;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "345": {
            "code": "n = 1747;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "346": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "347": {
            "code": "n = 759;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "348": {
            "code": "n = 1341;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "349": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "350": {
            "code": "n = 584;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "351": {
            "code": "n = 1331;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "352": {
            "code": "n = 197;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "353": {
            "code": "n = 724;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "354": {
            "code": "n = -81;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "355": {
            "code": "n = 249;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "356": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "357": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "358": {
            "code": "n = 1786;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "359": {
            "code": "n = 1885;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "360": {
            "code": "n = 25;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "361": {
            "code": "n = 395;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "362": {
            "code": "n = -56;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "363": {
            "code": "n = -9;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "364": {
            "code": "n = 837;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "365": {
            "code": "n = 1224;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "366": {
            "code": "n = 154;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "367": {
            "code": "n = 1401;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "368": {
            "code": "n = 319;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "369": {
            "code": "n = 514;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "370": {
            "code": "n = 556;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "371": {
            "code": "n = -59;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "372": {
            "code": "n = 1337;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "373": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "374": {
            "code": "n = 1956;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "375": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "376": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "377": {
            "code": "n = 1492;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "378": {
            "code": "n = 487;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "379": {
            "code": "n = 1855;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "380": {
            "code": "n = 1799;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "381": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "382": {
            "code": "n = 661;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "383": {
            "code": "n = 594;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "384": {
            "code": "n = -73;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "385": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "386": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "387": {
            "code": "n = 1891;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "388": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "389": {
            "code": "n = 1578;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "390": {
            "code": "n = 448;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "391": {
            "code": "n = 362;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "392": {
            "code": "n = 731;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "393": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "394": {
            "code": "n = 1378;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "395": {
            "code": "n = 1027;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "396": {
            "code": "n = 74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "397": {
            "code": "n = 1074;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "398": {
            "code": "n = 69;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "399": {
            "code": "n = 1634;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "400": {
            "code": "n = 599;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "401": {
            "code": "n = 857;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "402": {
            "code": "n = 614;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "403": {
            "code": "n = 1230;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "404": {
            "code": "n = 1162;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "405": {
            "code": "n = 638;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "406": {
            "code": "n = -53;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "407": {
            "code": "n = 427;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "408": {
            "code": "n = -7;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "409": {
            "code": "n = -34;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "410": {
            "code": "n = 176;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "411": {
            "code": "n = 1688;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "412": {
            "code": "n = 1243;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "413": {
            "code": "n = 370;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "414": {
            "code": "n = 1507;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "415": {
            "code": "n = 1977;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "416": {
            "code": "n = 1941;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "417": {
            "code": "n = 1206;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "418": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "419": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "420": {
            "code": "n = 360;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "421": {
            "code": "n = 669;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "422": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "423": {
            "code": "n = 1274;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "424": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "425": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "426": {
            "code": "n = -91;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "427": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "428": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "429": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "430": {
            "code": "n = 1693;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "431": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "432": {
            "code": "n = 1618;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "433": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "434": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "435": {
            "code": "n = 1992;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "436": {
            "code": "n = 31;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "437": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "438": {
            "code": "n = 1689;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "439": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "440": {
            "code": "n = -41;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "441": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "442": {
            "code": "n = -36;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "443": {
            "code": "n = 607;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "444": {
            "code": "n = -56;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "445": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "446": {
            "code": "n = 1977;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "447": {
            "code": "n = 1375;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "448": {
            "code": "n = 1446;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "449": {
            "code": "n = -79;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "450": {
            "code": "n = 908;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "451": {
            "code": "n = 1991;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "452": {
            "code": "n = -59;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "453": {
            "code": "n = 537;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "454": {
            "code": "n = 1293;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "455": {
            "code": "n = 1913;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "456": {
            "code": "n = 385;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "457": {
            "code": "n = 1874;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "458": {
            "code": "n = 1427;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "459": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "460": {
            "code": "n = 1961;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "461": {
            "code": "n = 26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "462": {
            "code": "n = 1435;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "463": {
            "code": "n = 573;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "464": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "465": {
            "code": "n = 552;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "466": {
            "code": "n = 1655;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "467": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "468": {
            "code": "n = 884;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "469": {
            "code": "n = 1452;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "470": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "471": {
            "code": "n = -100;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "472": {
            "code": "n = 441;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "473": {
            "code": "n = -4;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "474": {
            "code": "n = 607;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "475": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "476": {
            "code": "n = 1888;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "477": {
            "code": "n = 192;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "478": {
            "code": "n = 364;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "479": {
            "code": "n = 1928;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "480": {
            "code": "n = 524;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "481": {
            "code": "n = 1742;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "482": {
            "code": "n = 923;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "483": {
            "code": "n = 565;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "484": {
            "code": "n = 1881;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "485": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "486": {
            "code": "n = 748;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "487": {
            "code": "n = 1644;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "488": {
            "code": "n = 1230;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "489": {
            "code": "n = 552;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "490": {
            "code": "n = 1536;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "491": {
            "code": "n = -18;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "492": {
            "code": "n = 435;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "493": {
            "code": "n = 1985;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "494": {
            "code": "n = -37;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "495": {
            "code": "n = 626;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "496": {
            "code": "n = 12;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "497": {
            "code": "n = -87;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "498": {
            "code": "n = 645;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "499": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "500": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "501": {
            "code": "n = 1273;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "502": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "503": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "504": {
            "code": "n = 22;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "505": {
            "code": "n = 18;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "506": {
            "code": "n = 1837;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "507": {
            "code": "n = 779;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "508": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "509": {
            "code": "n = 1657;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "510": {
            "code": "n = 843;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "511": {
            "code": "n = 993;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "512": {
            "code": "n = 597;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "513": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "514": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "515": {
            "code": "n = 1181;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "516": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "517": {
            "code": "n = 1986;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "518": {
            "code": "n = 370;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "519": {
            "code": "n = 1515;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "520": {
            "code": "n = -52;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "521": {
            "code": "n = 605;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "522": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "523": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "524": {
            "code": "n = 1212;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "525": {
            "code": "n = 187;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "526": {
            "code": "n = 1151;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "527": {
            "code": "n = 30;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "528": {
            "code": "n = 1304;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "529": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "530": {
            "code": "n = 906;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "531": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "532": {
            "code": "n = 1910;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "533": {
            "code": "n = 40;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "534": {
            "code": "n = 1523;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "535": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "536": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "537": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "538": {
            "code": "n = 1488;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "539": {
            "code": "n = 1474;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "540": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "541": {
            "code": "n = 314;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "542": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "543": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "544": {
            "code": "n = 12;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "545": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "546": {
            "code": "n = -33;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "547": {
            "code": "n = 1099;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "548": {
            "code": "n = 1075;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "549": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "550": {
            "code": "n = 1466;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "551": {
            "code": "n = 1797;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "552": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "553": {
            "code": "n = 775;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "554": {
            "code": "n = -58;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "555": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "556": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "557": {
            "code": "n = 625;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "558": {
            "code": "n = 1433;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "559": {
            "code": "n = 600;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "560": {
            "code": "n = 282;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "561": {
            "code": "n = 520;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "562": {
            "code": "n = 817;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "563": {
            "code": "n = 670;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "564": {
            "code": "n = 859;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "565": {
            "code": "n = 1044;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "566": {
            "code": "n = -65;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "567": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "568": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "569": {
            "code": "n = -4;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "570": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "571": {
            "code": "n = 625;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "572": {
            "code": "n = 1321;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "573": {
            "code": "n = 210;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "574": {
            "code": "n = 878;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "575": {
            "code": "n = 1827;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "576": {
            "code": "n = 446;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "577": {
            "code": "n = 964;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "578": {
            "code": "n = 497;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "579": {
            "code": "n = 408;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "580": {
            "code": "n = 185;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "581": {
            "code": "n = 1919;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "582": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "583": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "584": {
            "code": "n = 876;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "585": {
            "code": "n = 1181;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "586": {
            "code": "n = 6;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "587": {
            "code": "n = 1284;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "588": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "589": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "590": {
            "code": "n = 1071;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "591": {
            "code": "n = 1383;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "592": {
            "code": "n = 864;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "593": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "594": {
            "code": "n = 170;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "595": {
            "code": "n = -33;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "596": {
            "code": "n = 798;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "597": {
            "code": "n = 1886;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "598": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "599": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "600": {
            "code": "n = 354;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "601": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "602": {
            "code": "n = 403;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "603": {
            "code": "n = 889;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "604": {
            "code": "n = 600;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "605": {
            "code": "n = 1769;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "606": {
            "code": "n = 1600;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "607": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "608": {
            "code": "n = 1948;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "609": {
            "code": "n = 634;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "610": {
            "code": "n = 1158;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "611": {
            "code": "n = 271;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "612": {
            "code": "n = 930;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "613": {
            "code": "n = -20;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "614": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "615": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "616": {
            "code": "n = 119;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "617": {
            "code": "n = -35;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "618": {
            "code": "n = 626;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "619": {
            "code": "n = 1890;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "620": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "621": {
            "code": "n = 1442;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "622": {
            "code": "n = 166;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "623": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "624": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "625": {
            "code": "n = 1659;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "626": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "627": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "628": {
            "code": "n = 166;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "629": {
            "code": "n = 121;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "630": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "631": {
            "code": "n = 1778;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "632": {
            "code": "n = 454;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "633": {
            "code": "n = 385;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "634": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "635": {
            "code": "n = 1267;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "636": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "637": {
            "code": "n = 1859;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "638": {
            "code": "n = 677;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "639": {
            "code": "n = 1803;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "640": {
            "code": "n = 285;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "641": {
            "code": "n = -27;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "642": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "643": {
            "code": "n = -37;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "644": {
            "code": "n = 521;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "645": {
            "code": "n = -51;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "646": {
            "code": "n = 1321;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "647": {
            "code": "n = 1901;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "648": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "649": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "650": {
            "code": "n = -87;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "651": {
            "code": "n = -55;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "652": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "653": {
            "code": "n = 1435;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "654": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "655": {
            "code": "n = 1323;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "656": {
            "code": "n = 755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "657": {
            "code": "n = -42;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "658": {
            "code": "n = 157;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "659": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "660": {
            "code": "n = 1687;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "661": {
            "code": "n = 1800;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "662": {
            "code": "n = 1780;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "663": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "664": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "665": {
            "code": "n = 1803;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "666": {
            "code": "n = 451;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "667": {
            "code": "n = 23;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "668": {
            "code": "n = 0;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "669": {
            "code": "n = 1859;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "670": {
            "code": "n = -56;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "671": {
            "code": "n = -54;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "672": {
            "code": "n = 1827;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "673": {
            "code": "n = 1932;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "674": {
            "code": "n = 1935;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "675": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "676": {
            "code": "n = 891;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "677": {
            "code": "n = 1446;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "678": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "679": {
            "code": "n = 85;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "680": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "681": {
            "code": "n = 919;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "682": {
            "code": "n = -68;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "683": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "684": {
            "code": "n = 1404;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "685": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "686": {
            "code": "n = 1850;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "687": {
            "code": "n = 841;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "688": {
            "code": "n = 1709;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "689": {
            "code": "n = 1547;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "690": {
            "code": "n = -53;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "691": {
            "code": "n = -100;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "692": {
            "code": "n = 707;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "693": {
            "code": "n = 42;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "694": {
            "code": "n = 608;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "695": {
            "code": "n = 1716;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "696": {
            "code": "n = 392;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "697": {
            "code": "n = 496;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "698": {
            "code": "n = -62;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "699": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "700": {
            "code": "n = 25;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "701": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "702": {
            "code": "n = 164;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "703": {
            "code": "n = 1881;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "704": {
            "code": "n = 705;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "705": {
            "code": "n = 1411;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "706": {
            "code": "n = 673;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "707": {
            "code": "n = 132;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "708": {
            "code": "n = 567;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "709": {
            "code": "n = -36;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "710": {
            "code": "n = -79;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "711": {
            "code": "n = 1973;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "712": {
            "code": "n = 1182;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "713": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "714": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "715": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "716": {
            "code": "n = 707;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "717": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "718": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "719": {
            "code": "n = 1372;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "720": {
            "code": "n = 1924;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "721": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "722": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "723": {
            "code": "n = -54;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "724": {
            "code": "n = 1718;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "725": {
            "code": "n = 203;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "726": {
            "code": "n = 806;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "727": {
            "code": "n = 1333;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "728": {
            "code": "n = -22;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "729": {
            "code": "n = 1152;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "730": {
            "code": "n = 1410;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "731": {
            "code": "n = 9;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "732": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "733": {
            "code": "n = 51;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "734": {
            "code": "n = 573;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "735": {
            "code": "n = 1838;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "736": {
            "code": "n = 1978;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "737": {
            "code": "n = 1251;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "738": {
            "code": "n = 701;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "739": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "740": {
            "code": "n = 1859;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "741": {
            "code": "n = 1129;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "742": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "743": {
            "code": "n = 589;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "744": {
            "code": "n = 228;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "745": {
            "code": "n = 900;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "746": {
            "code": "n = 434;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "747": {
            "code": "n = -50;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "748": {
            "code": "n = 391;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "749": {
            "code": "n = 61;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "750": {
            "code": "n = 404;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "751": {
            "code": "n = 370;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "752": {
            "code": "n = 615;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "753": {
            "code": "n = 535;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "754": {
            "code": "n = 394;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "755": {
            "code": "n = 1990;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "756": {
            "code": "n = 1959;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "757": {
            "code": "n = 1949;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "758": {
            "code": "n = -58;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "759": {
            "code": "n = 545;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "760": {
            "code": "n = -62;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "761": {
            "code": "n = 1516;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "762": {
            "code": "n = 722;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "763": {
            "code": "n = 683;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "764": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "765": {
            "code": "n = 112;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "766": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "767": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "768": {
            "code": "n = 400;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "769": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "770": {
            "code": "n = 536;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "771": {
            "code": "n = 91;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "772": {
            "code": "n = 0;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "773": {
            "code": "n = 888;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "774": {
            "code": "n = 1284;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "775": {
            "code": "n = 1291;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "776": {
            "code": "n = 455;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "777": {
            "code": "n = 333;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "778": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "779": {
            "code": "n = 2000;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "780": {
            "code": "n = 532;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "781": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "782": {
            "code": "n = 0;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "783": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "784": {
            "code": "n = 834;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "785": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "786": {
            "code": "n = 1975;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "787": {
            "code": "n = 455;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "788": {
            "code": "n = -88;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "789": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "790": {
            "code": "n = 17;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "791": {
            "code": "n = 1995;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "792": {
            "code": "n = 1999;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "793": {
            "code": "n = 6;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "794": {
            "code": "n = 587;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "795": {
            "code": "n = 1350;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "796": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "797": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "798": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "799": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "800": {
            "code": "n = 216;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "801": {
            "code": "n = -50;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "802": {
            "code": "n = 1447;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "803": {
            "code": "n = 1269;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "804": {
            "code": "n = 1079;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "805": {
            "code": "n = -5;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "806": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "807": {
            "code": "n = 835;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "808": {
            "code": "n = 481;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "809": {
            "code": "n = 294;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "810": {
            "code": "n = 372;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "811": {
            "code": "n = 986;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "812": {
            "code": "n = 257;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "813": {
            "code": "n = 593;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "814": {
            "code": "n = 366;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "815": {
            "code": "n = -100;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "816": {
            "code": "n = 1906;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "817": {
            "code": "n = 782;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "818": {
            "code": "n = 149;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "819": {
            "code": "n = 548;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "820": {
            "code": "n = -100;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "821": {
            "code": "n = 1650;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "822": {
            "code": "n = 1475;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "823": {
            "code": "n = 16;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "824": {
            "code": "n = 1896;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "825": {
            "code": "n = 766;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "826": {
            "code": "n = -65;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "827": {
            "code": "n = 1519;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "828": {
            "code": "n = 1699;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "829": {
            "code": "n = -82;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "830": {
            "code": "n = 1902;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "831": {
            "code": "n = 1135;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "832": {
            "code": "n = 1956;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "833": {
            "code": "n = 581;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "834": {
            "code": "n = 117;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "835": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "836": {
            "code": "n = -93;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "837": {
            "code": "n = 361;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "838": {
            "code": "n = 361;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "839": {
            "code": "n = 1262;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "840": {
            "code": "n = 647;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "841": {
            "code": "n = 523;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "842": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "843": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "844": {
            "code": "n = 83;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "845": {
            "code": "n = 1994;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "846": {
            "code": "n = 1757;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "847": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "848": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "849": {
            "code": "n = 367;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "850": {
            "code": "n = -35;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "851": {
            "code": "n = 1515;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "852": {
            "code": "n = 385;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "853": {
            "code": "n = 1840;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "854": {
            "code": "n = 403;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "855": {
            "code": "n = 1281;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "856": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "857": {
            "code": "n = 485;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "858": {
            "code": "n = 288;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "859": {
            "code": "n = 283;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "860": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "861": {
            "code": "n = 44;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "862": {
            "code": "n = 660;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "863": {
            "code": "n = 1991;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "864": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "865": {
            "code": "n = 1704;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "866": {
            "code": "n = 185;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "867": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "868": {
            "code": "n = 473;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "869": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "870": {
            "code": "n = 385;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "871": {
            "code": "n = -30;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "872": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "873": {
            "code": "n = 1393;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "874": {
            "code": "n = 779;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "875": {
            "code": "n = 1329;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "876": {
            "code": "n = 787;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "877": {
            "code": "n = 1461;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "878": {
            "code": "n = 1895;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "879": {
            "code": "n = 1885;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "880": {
            "code": "n = 31;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "881": {
            "code": "n = 814;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "882": {
            "code": "n = 720;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "883": {
            "code": "n = -62;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "884": {
            "code": "n = 723;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "885": {
            "code": "n = 1094;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "886": {
            "code": "n = 1632;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "887": {
            "code": "n = -59;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "888": {
            "code": "n = 1681;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "889": {
            "code": "n = 1986;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "890": {
            "code": "n = 1690;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "891": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "892": {
            "code": "n = -87;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "893": {
            "code": "n = 1853;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "894": {
            "code": "n = 561;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "895": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "896": {
            "code": "n = 455;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "897": {
            "code": "n = 1217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "898": {
            "code": "n = 1699;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "899": {
            "code": "n = -94;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "900": {
            "code": "n = -64;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "901": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "902": {
            "code": "n = -96;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "903": {
            "code": "n = -61;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "904": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "905": {
            "code": "n = 1139;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "906": {
            "code": "n = 452;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "907": {
            "code": "n = 1210;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "908": {
            "code": "n = 709;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "909": {
            "code": "n = 607;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "910": {
            "code": "n = 1546;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "911": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "912": {
            "code": "n = 406;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "913": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "914": {
            "code": "n = 1806;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "915": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "916": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "917": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "918": {
            "code": "n = 593;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "919": {
            "code": "n = -52;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "920": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "921": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "922": {
            "code": "n = 1553;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "923": {
            "code": "n = 193;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "924": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "925": {
            "code": "n = 630;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "926": {
            "code": "n = 399;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "927": {
            "code": "n = 1205;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "928": {
            "code": "n = 267;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "929": {
            "code": "n = 373;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "930": {
            "code": "n = 491;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "931": {
            "code": "n = 307;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "932": {
            "code": "n = 1838;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "933": {
            "code": "n = 622;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "934": {
            "code": "n = 1602;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "935": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "936": {
            "code": "n = 449;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "937": {
            "code": "n = -11;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "938": {
            "code": "n = 249;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "939": {
            "code": "n = 1980;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "940": {
            "code": "n = 93;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "941": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "942": {
            "code": "n = 413;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "943": {
            "code": "n = 548;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "944": {
            "code": "n = -54;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "945": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "946": {
            "code": "n = 925;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "947": {
            "code": "n = 452;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "948": {
            "code": "n = 17;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "949": {
            "code": "n = 192;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "950": {
            "code": "n = 1479;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "951": {
            "code": "n = 450;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "952": {
            "code": "n = -62;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "953": {
            "code": "n = 1249;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "954": {
            "code": "n = 456;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "955": {
            "code": "n = 1670;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "956": {
            "code": "n = 514;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "957": {
            "code": "n = -42;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "958": {
            "code": "n = 1894;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "959": {
            "code": "n = -22;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "960": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "961": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "962": {
            "code": "n = 848;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "963": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "964": {
            "code": "n = 732;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "965": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "966": {
            "code": "n = 1747;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "967": {
            "code": "n = 152;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "968": {
            "code": "n = 856;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "969": {
            "code": "n = 1615;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "970": {
            "code": "n = 904;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "971": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "972": {
            "code": "n = 1301;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "973": {
            "code": "n = 728;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "974": {
            "code": "n = 1717;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "975": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "976": {
            "code": "n = 418;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "977": {
            "code": "n = 1749;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "978": {
            "code": "n = 1242;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "979": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "980": {
            "code": "n = -58;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "981": {
            "code": "n = 1285;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "982": {
            "code": "n = 401;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "983": {
            "code": "n = 1663;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "984": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "985": {
            "code": "n = 6;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "986": {
            "code": "n = 1467;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "987": {
            "code": "n = -50;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "988": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "989": {
            "code": "n = 1909;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "990": {
            "code": "n = 1467;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "991": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "992": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "993": {
            "code": "n = 166;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "994": {
            "code": "n = 450;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "995": {
            "code": "n = 1997;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "996": {
            "code": "n = -39;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "997": {
            "code": "n = 605;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "998": {
            "code": "n = 470;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "999": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    "2412": {
        "0": {
            "code": "n = 528;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "1": {
            "code": "n = 377;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "2": {
            "code": "n = 229;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "3": {
            "code": "n = 1746;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "4": {
            "code": "n = 516;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "5": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "6": {
            "code": "n = 826;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "7": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "8": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "9": {
            "code": "n = 2000;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "10": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "11": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "12": {
            "code": "n = 1896;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "13": {
            "code": "n = 576;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "14": {
            "code": "n = 1958;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "15": {
            "code": "n = 1850;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "16": {
            "code": "n = 17;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "17": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "18": {
            "code": "n = 1005;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "19": {
            "code": "n = 1643;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "20": {
            "code": "n = 1899;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "21": {
            "code": "n = 1649;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "22": {
            "code": "n = 286;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "23": {
            "code": "n = -36;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "24": {
            "code": "n = 1871;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "25": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "26": {
            "code": "n = 1598;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "27": {
            "code": "n = 15;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "28": {
            "code": "n = 477;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "29": {
            "code": "n = 535;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "30": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "31": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "32": {
            "code": "n = 336;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "33": {
            "code": "n = -24;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "34": {
            "code": "n = 1757;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "35": {
            "code": "n = 1424;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "36": {
            "code": "n = 14;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "37": {
            "code": "n = 1276;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "38": {
            "code": "n = 1436;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "39": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "40": {
            "code": "n = 185;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "41": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "42": {
            "code": "n = 635;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "43": {
            "code": "n = -84;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "44": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "45": {
            "code": "n = 802;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "46": {
            "code": "n = 330;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "47": {
            "code": "n = 471;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "48": {
            "code": "n = 1224;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "49": {
            "code": "n = 1899;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "50": {
            "code": "n = 1002;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "51": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "52": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "53": {
            "code": "n = -7;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "54": {
            "code": "n = 1827;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "55": {
            "code": "n = 563;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "56": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "57": {
            "code": "n = 1291;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "58": {
            "code": "n = 1956;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "59": {
            "code": "n = 464;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "60": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "61": {
            "code": "n = -55;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "62": {
            "code": "n = 653;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "63": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "64": {
            "code": "n = 263;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "65": {
            "code": "n = 1421;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "66": {
            "code": "n = 1065;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "67": {
            "code": "n = -55;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "68": {
            "code": "n = 1686;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "69": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "70": {
            "code": "n = -42;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "71": {
            "code": "n = 1993;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "72": {
            "code": "n = 316;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "73": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "74": {
            "code": "n = 1892;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "75": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "76": {
            "code": "n = 1792;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "77": {
            "code": "n = 1419;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "78": {
            "code": "n = 1749;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "79": {
            "code": "n = 256;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "80": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "81": {
            "code": "n = -68;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "82": {
            "code": "n = -62;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "83": {
            "code": "n = -63;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "84": {
            "code": "n = 1676;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "85": {
            "code": "n = -35;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "86": {
            "code": "n = 1457;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "87": {
            "code": "n = 334;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "88": {
            "code": "n = 1793;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "89": {
            "code": "n = 1851;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "90": {
            "code": "n = 485;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "91": {
            "code": "n = 763;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "92": {
            "code": "n = -59;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "93": {
            "code": "n = 1204;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "94": {
            "code": "n = -70;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "95": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "96": {
            "code": "n = -35;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "97": {
            "code": "n = 12;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "98": {
            "code": "n = 1330;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "99": {
            "code": "n = 583;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "100": {
            "code": "n = 99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "101": {
            "code": "n = -36;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "102": {
            "code": "n = 223;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "103": {
            "code": "n = 204;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "104": {
            "code": "n = 1581;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "105": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "106": {
            "code": "n = 1366;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "107": {
            "code": "n = 1922;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "108": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "109": {
            "code": "n = 851;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "110": {
            "code": "n = 1507;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "111": {
            "code": "n = -46;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "112": {
            "code": "n = -71;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "113": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "114": {
            "code": "n = 1348;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "115": {
            "code": "n = 770;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "116": {
            "code": "n = 1528;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "117": {
            "code": "n = -81;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "118": {
            "code": "n = 834;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "119": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "120": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "121": {
            "code": "n = 86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "122": {
            "code": "n = 241;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "123": {
            "code": "n = 1424;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "124": {
            "code": "n = 166;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "125": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "126": {
            "code": "n = -35;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "127": {
            "code": "n = 1403;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "128": {
            "code": "n = -91;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "129": {
            "code": "n = 788;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "130": {
            "code": "n = 508;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "131": {
            "code": "n = -59;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "132": {
            "code": "n = 406;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "133": {
            "code": "n = -36;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "134": {
            "code": "n = 465;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "135": {
            "code": "n = 521;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "136": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "137": {
            "code": "n = 934;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "138": {
            "code": "n = 736;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "139": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "140": {
            "code": "n = 1944;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "141": {
            "code": "n = 1961;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "142": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "143": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "144": {
            "code": "n = 427;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "145": {
            "code": "n = 1437;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "146": {
            "code": "n = -37;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "147": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "148": {
            "code": "n = 487;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "149": {
            "code": "n = 1330;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "150": {
            "code": "n = 722;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "151": {
            "code": "n = 663;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "152": {
            "code": "n = 1335;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "153": {
            "code": "n = 653;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "154": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "155": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "156": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "157": {
            "code": "n = 225;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "158": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "159": {
            "code": "n = 1374;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "160": {
            "code": "n = 1638;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "161": {
            "code": "n = 19;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "162": {
            "code": "n = 616;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "163": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "164": {
            "code": "n = 52;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "165": {
            "code": "n = 931;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "166": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "167": {
            "code": "n = 925;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "168": {
            "code": "n = 660;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "169": {
            "code": "n = 1383;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "170": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "171": {
            "code": "n = 1137;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "172": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "173": {
            "code": "n = 1448;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "174": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "175": {
            "code": "n = 614;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "176": {
            "code": "n = -88;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "177": {
            "code": "n = 1632;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "178": {
            "code": "n = 1043;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "179": {
            "code": "n = -58;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "180": {
            "code": "n = -3;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "181": {
            "code": "n = 1771;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "182": {
            "code": "n = 1940;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "183": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "184": {
            "code": "n = 1892;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "185": {
            "code": "n = 654;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "186": {
            "code": "n = -75;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "187": {
            "code": "n = -7;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "188": {
            "code": "n = 168;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "189": {
            "code": "n = 1081;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "190": {
            "code": "n = 2000;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "191": {
            "code": "n = 1808;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "192": {
            "code": "n = 211;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "193": {
            "code": "n = 294;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "194": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "195": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "196": {
            "code": "n = 443;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "197": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "198": {
            "code": "n = 415;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "199": {
            "code": "n = 1975;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "200": {
            "code": "n = 715;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "201": {
            "code": "n = -57;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "202": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "203": {
            "code": "n = 1953;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "204": {
            "code": "n = 121;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "205": {
            "code": "n = 401;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "206": {
            "code": "n = -55;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "207": {
            "code": "n = 722;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "208": {
            "code": "n = 586;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "209": {
            "code": "n = 163;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "210": {
            "code": "n = 365;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "211": {
            "code": "n = 233;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "212": {
            "code": "n = 247;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "213": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "214": {
            "code": "n = 1571;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "215": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "216": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "217": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "218": {
            "code": "n = 414;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "219": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "220": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "221": {
            "code": "n = 1305;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "222": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "223": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "224": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "225": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "226": {
            "code": "n = 1536;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "227": {
            "code": "n = 1949;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "228": {
            "code": "n = 883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "229": {
            "code": "n = 1607;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "230": {
            "code": "n = 401;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "231": {
            "code": "n = 1372;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "232": {
            "code": "n = 807;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "233": {
            "code": "n = 167;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "234": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "235": {
            "code": "n = 307;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "236": {
            "code": "n = -67;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "237": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "238": {
            "code": "n = 533;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "239": {
            "code": "n = 1123;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "240": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "241": {
            "code": "n = -63;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "242": {
            "code": "n = 1557;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "243": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "244": {
            "code": "n = 1078;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "245": {
            "code": "n = 1296;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "246": {
            "code": "n = -21;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "247": {
            "code": "n = 1773;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "248": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "249": {
            "code": "n = 1939;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "250": {
            "code": "n = 286;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "251": {
            "code": "n = 1244;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "252": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "253": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "254": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "255": {
            "code": "n = 524;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "256": {
            "code": "n = -55;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "257": {
            "code": "n = -46;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "258": {
            "code": "n = 1773;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "259": {
            "code": "n = 1528;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "260": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "261": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "262": {
            "code": "n = 359;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "263": {
            "code": "n = 1393;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "264": {
            "code": "n = 1071;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "265": {
            "code": "n = 196;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "266": {
            "code": "n = 88;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "267": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "268": {
            "code": "n = 1985;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "269": {
            "code": "n = 1819;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "270": {
            "code": "n = 590;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "271": {
            "code": "n = 537;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "272": {
            "code": "n = 563;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "273": {
            "code": "n = 1593;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "274": {
            "code": "n = 1426;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "275": {
            "code": "n = 521;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "276": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "277": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "278": {
            "code": "n = 988;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "279": {
            "code": "n = 961;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "280": {
            "code": "n = 549;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "281": {
            "code": "n = 157;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "282": {
            "code": "n = 181;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "283": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "284": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "285": {
            "code": "n = 660;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "286": {
            "code": "n = 1303;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "287": {
            "code": "n = 815;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "288": {
            "code": "n = 613;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "289": {
            "code": "n = 501;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "290": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "291": {
            "code": "n = 1329;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "292": {
            "code": "n = -38;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "293": {
            "code": "n = 1874;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "294": {
            "code": "n = 1864;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "295": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "296": {
            "code": "n = 822;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "297": {
            "code": "n = 1425;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "298": {
            "code": "n = 640;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "299": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "300": {
            "code": "n = 635;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "301": {
            "code": "n = 1721;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "302": {
            "code": "n = 279;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "303": {
            "code": "n = 1733;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "304": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "305": {
            "code": "n = 431;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "306": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "307": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "308": {
            "code": "n = 527;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "309": {
            "code": "n = 470;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "310": {
            "code": "n = 1314;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "311": {
            "code": "n = -87;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "312": {
            "code": "n = 370;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "313": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "314": {
            "code": "n = 1789;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "315": {
            "code": "n = 402;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "316": {
            "code": "n = 1587;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "317": {
            "code": "n = 1753;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "318": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "319": {
            "code": "n = 403;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "320": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "321": {
            "code": "n = 45;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "322": {
            "code": "n = 1809;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "323": {
            "code": "n = 286;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "324": {
            "code": "n = 433;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "325": {
            "code": "n = 964;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "326": {
            "code": "n = 1911;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "327": {
            "code": "n = 1319;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "328": {
            "code": "n = 1209;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "329": {
            "code": "n = 623;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "330": {
            "code": "n = -80;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "331": {
            "code": "n = 1769;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "332": {
            "code": "n = 1788;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "333": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "334": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "335": {
            "code": "n = -54;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "336": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "337": {
            "code": "n = 815;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "338": {
            "code": "n = 190;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "339": {
            "code": "n = 752;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "340": {
            "code": "n = 1268;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "341": {
            "code": "n = 1188;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "342": {
            "code": "n = -64;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "343": {
            "code": "n = 722;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "344": {
            "code": "n = 523;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "345": {
            "code": "n = -42;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "346": {
            "code": "n = 1590;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "347": {
            "code": "n = 601;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "348": {
            "code": "n = 1842;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "349": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "350": {
            "code": "n = 684;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "351": {
            "code": "n = 359;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "352": {
            "code": "n = 1619;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "353": {
            "code": "n = 1774;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "354": {
            "code": "n = 1047;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "355": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "356": {
            "code": "n = 574;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "357": {
            "code": "n = 160;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "358": {
            "code": "n = 1619;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "359": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "360": {
            "code": "n = 1144;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "361": {
            "code": "n = 947;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "362": {
            "code": "n = 1181;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "363": {
            "code": "n = 1449;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "364": {
            "code": "n = 16;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "365": {
            "code": "n = 26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "366": {
            "code": "n = 1637;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "367": {
            "code": "n = 1731;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "368": {
            "code": "n = 624;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "369": {
            "code": "n = -33;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "370": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "371": {
            "code": "n = 1814;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "372": {
            "code": "n = 57;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "373": {
            "code": "n = 1444;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "374": {
            "code": "n = -17;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "375": {
            "code": "n = 470;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "376": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "377": {
            "code": "n = 835;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "378": {
            "code": "n = 1058;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "379": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "380": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "381": {
            "code": "n = 241;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "382": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "383": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "384": {
            "code": "n = -39;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "385": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "386": {
            "code": "n = 1979;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "387": {
            "code": "n = -30;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "388": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "389": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "390": {
            "code": "n = 145;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "391": {
            "code": "n = 385;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "392": {
            "code": "n = 768;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "393": {
            "code": "n = 1915;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "394": {
            "code": "n = 703;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "395": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "396": {
            "code": "n = 1216;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "397": {
            "code": "n = 111;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "398": {
            "code": "n = 1952;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "399": {
            "code": "n = 444;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "400": {
            "code": "n = 117;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "401": {
            "code": "n = 1615;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "402": {
            "code": "n = 46;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "403": {
            "code": "n = 81;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "404": {
            "code": "n = 1943;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "405": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "406": {
            "code": "n = 20;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "407": {
            "code": "n = 595;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "408": {
            "code": "n = 1966;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "409": {
            "code": "n = -85;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "410": {
            "code": "n = -62;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "411": {
            "code": "n = 1476;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "412": {
            "code": "n = 819;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "413": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "414": {
            "code": "n = 1478;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "415": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "416": {
            "code": "n = 607;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "417": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "418": {
            "code": "n = 372;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "419": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "420": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "421": {
            "code": "n = 376;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "422": {
            "code": "n = -64;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "423": {
            "code": "n = -93;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "424": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "425": {
            "code": "n = 501;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "426": {
            "code": "n = 139;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "427": {
            "code": "n = -41;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "428": {
            "code": "n = 1856;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "429": {
            "code": "n = 655;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "430": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "431": {
            "code": "n = -100;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "432": {
            "code": "n = 1695;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "433": {
            "code": "n = 1074;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "434": {
            "code": "n = 1090;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "435": {
            "code": "n = 732;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "436": {
            "code": "n = 1556;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "437": {
            "code": "n = 1099;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "438": {
            "code": "n = 1179;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "439": {
            "code": "n = 231;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "440": {
            "code": "n = -6;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "441": {
            "code": "n = 419;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "442": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "443": {
            "code": "n = 625;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "444": {
            "code": "n = 1226;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "445": {
            "code": "n = 272;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "446": {
            "code": "n = 1219;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "447": {
            "code": "n = 1718;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "448": {
            "code": "n = -42;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "449": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "450": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "451": {
            "code": "n = -13;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "452": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "453": {
            "code": "n = -58;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "454": {
            "code": "n = 373;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "455": {
            "code": "n = 1355;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "456": {
            "code": "n = 701;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "457": {
            "code": "n = 1984;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "458": {
            "code": "n = 1165;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "459": {
            "code": "n = 862;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "460": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "461": {
            "code": "n = 380;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "462": {
            "code": "n = 1784;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "463": {
            "code": "n = 595;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "464": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "465": {
            "code": "n = -62;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "466": {
            "code": "n = -85;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "467": {
            "code": "n = 1370;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "468": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "469": {
            "code": "n = 260;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "470": {
            "code": "n = 16;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "471": {
            "code": "n = 793;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "472": {
            "code": "n = 1851;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "473": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "474": {
            "code": "n = 75;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "475": {
            "code": "n = 1801;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "476": {
            "code": "n = 1277;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "477": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "478": {
            "code": "n = 1695;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "479": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "480": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "481": {
            "code": "n = -100;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "482": {
            "code": "n = 626;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "483": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "484": {
            "code": "n = 197;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "485": {
            "code": "n = 1262;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "486": {
            "code": "n = 480;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "487": {
            "code": "n = 879;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "488": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "489": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "490": {
            "code": "n = -27;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "491": {
            "code": "n = 1114;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "492": {
            "code": "n = 1635;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "493": {
            "code": "n = 402;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "494": {
            "code": "n = 725;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "495": {
            "code": "n = 1942;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "496": {
            "code": "n = 810;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "497": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "498": {
            "code": "n = 361;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "499": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "500": {
            "code": "n = -100;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "501": {
            "code": "n = 1748;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "502": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "503": {
            "code": "n = 751;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "504": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "505": {
            "code": "n = 92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "506": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "507": {
            "code": "n = 635;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "508": {
            "code": "n = 1077;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "509": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "510": {
            "code": "n = -58;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "511": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "512": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "513": {
            "code": "n = 1746;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "514": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "515": {
            "code": "n = 831;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "516": {
            "code": "n = 1426;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "517": {
            "code": "n = -60;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "518": {
            "code": "n = 814;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "519": {
            "code": "n = 1821;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "520": {
            "code": "n = 43;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "521": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "522": {
            "code": "n = 299;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "523": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "524": {
            "code": "n = 529;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "525": {
            "code": "n = 1390;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "526": {
            "code": "n = 224;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "527": {
            "code": "n = -67;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "528": {
            "code": "n = 124;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "529": {
            "code": "n = 16;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "530": {
            "code": "n = 1053;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "531": {
            "code": "n = 1569;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "532": {
            "code": "n = 1238;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "533": {
            "code": "n = 96;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "534": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "535": {
            "code": "n = -54;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "536": {
            "code": "n = -36;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "537": {
            "code": "n = 1910;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "538": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "539": {
            "code": "n = 493;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "540": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "541": {
            "code": "n = -60;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "542": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "543": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "544": {
            "code": "n = 1944;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "545": {
            "code": "n = -96;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "546": {
            "code": "n = 302;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "547": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "548": {
            "code": "n = 1404;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "549": {
            "code": "n = 460;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "550": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "551": {
            "code": "n = 379;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "552": {
            "code": "n = 1167;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "553": {
            "code": "n = 1220;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "554": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "555": {
            "code": "n = 415;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "556": {
            "code": "n = 452;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "557": {
            "code": "n = 411;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "558": {
            "code": "n = 1893;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "559": {
            "code": "n = 1921;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "560": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "561": {
            "code": "n = 645;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "562": {
            "code": "n = 728;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "563": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "564": {
            "code": "n = 976;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "565": {
            "code": "n = 179;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "566": {
            "code": "n = 829;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "567": {
            "code": "n = 505;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "568": {
            "code": "n = 407;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "569": {
            "code": "n = 1963;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "570": {
            "code": "n = 1392;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "571": {
            "code": "n = 794;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "572": {
            "code": "n = -42;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "573": {
            "code": "n = 949;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "574": {
            "code": "n = 1223;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "575": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "576": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "577": {
            "code": "n = 1693;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "578": {
            "code": "n = 657;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "579": {
            "code": "n = 188;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "580": {
            "code": "n = 500;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "581": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "582": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "583": {
            "code": "n = 1861;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "584": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "585": {
            "code": "n = 214;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "586": {
            "code": "n = 355;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "587": {
            "code": "n = 1224;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "588": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "589": {
            "code": "n = 386;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "590": {
            "code": "n = 209;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "591": {
            "code": "n = 372;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "592": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "593": {
            "code": "n = 1611;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "594": {
            "code": "n = 1661;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "595": {
            "code": "n = 1079;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "596": {
            "code": "n = 185;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "597": {
            "code": "n = 1873;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "598": {
            "code": "n = 710;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "599": {
            "code": "n = 1134;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "600": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "601": {
            "code": "n = 1547;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "602": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "603": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "604": {
            "code": "n = 667;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "605": {
            "code": "n = 1776;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "606": {
            "code": "n = 1689;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "607": {
            "code": "n = 9;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "608": {
            "code": "n = 497;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "609": {
            "code": "n = 1371;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "610": {
            "code": "n = 501;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "611": {
            "code": "n = 306;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "612": {
            "code": "n = 149;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "613": {
            "code": "n = 875;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "614": {
            "code": "n = 1014;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "615": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "616": {
            "code": "n = 377;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "617": {
            "code": "n = 71;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "618": {
            "code": "n = 983;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "619": {
            "code": "n = -28;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "620": {
            "code": "n = 1822;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "621": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "622": {
            "code": "n = 456;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "623": {
            "code": "n = 375;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "624": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "625": {
            "code": "n = 60;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "626": {
            "code": "n = 956;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "627": {
            "code": "n = 419;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "628": {
            "code": "n = 433;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "629": {
            "code": "n = 279;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "630": {
            "code": "n = 626;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "631": {
            "code": "n = 574;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "632": {
            "code": "n = 528;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "633": {
            "code": "n = 552;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "634": {
            "code": "n = -57;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "635": {
            "code": "n = 820;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "636": {
            "code": "n = 1693;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "637": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "638": {
            "code": "n = 422;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "639": {
            "code": "n = 1217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "640": {
            "code": "n = 450;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "641": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "642": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "643": {
            "code": "n = 1123;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "644": {
            "code": "n = 44;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "645": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "646": {
            "code": "n = 385;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "647": {
            "code": "n = 237;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "648": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "649": {
            "code": "n = 1902;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "650": {
            "code": "n = 1547;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "651": {
            "code": "n = 157;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "652": {
            "code": "n = 117;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "653": {
            "code": "n = 1581;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "654": {
            "code": "n = -39;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "655": {
            "code": "n = 412;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "656": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "657": {
            "code": "n = 1319;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "658": {
            "code": "n = 953;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "659": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "660": {
            "code": "n = 186;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "661": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "662": {
            "code": "n = -74;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "663": {
            "code": "n = 1285;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "664": {
            "code": "n = 461;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "665": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "666": {
            "code": "n = 217;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "667": {
            "code": "n = 1975;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "668": {
            "code": "n = 1408;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "669": {
            "code": "n = 1185;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "670": {
            "code": "n = -42;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "671": {
            "code": "n = 36;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "672": {
            "code": "n = 1644;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "673": {
            "code": "n = 527;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "674": {
            "code": "n = 910;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "675": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "676": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "677": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "678": {
            "code": "n = 138;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "679": {
            "code": "n = 1750;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "680": {
            "code": "n = -35;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "681": {
            "code": "n = 147;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "682": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "683": {
            "code": "n = 931;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "684": {
            "code": "n = 209;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "685": {
            "code": "n = 1430;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "686": {
            "code": "n = 595;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "687": {
            "code": "n = -37;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "688": {
            "code": "n = 1943;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "689": {
            "code": "n = 711;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "690": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "691": {
            "code": "n = 675;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "692": {
            "code": "n = 642;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "693": {
            "code": "n = 524;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "694": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "695": {
            "code": "n = 267;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "696": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "697": {
            "code": "n = 240;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "698": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "699": {
            "code": "n = -26;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "700": {
            "code": "n = -84;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "701": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "702": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "703": {
            "code": "n = -18;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "704": {
            "code": "n = 1429;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "705": {
            "code": "n = 1955;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "706": {
            "code": "n = 1490;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "707": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "708": {
            "code": "n = -55;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "709": {
            "code": "n = 301;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "710": {
            "code": "n = 157;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "711": {
            "code": "n = 174;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "712": {
            "code": "n = 400;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "713": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "714": {
            "code": "n = 1399;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "715": {
            "code": "n = 1864;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "716": {
            "code": "n = 1447;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "717": {
            "code": "n = 1597;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "718": {
            "code": "n = 1444;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "719": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "720": {
            "code": "n = 146;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "721": {
            "code": "n = 384;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "722": {
            "code": "n = 1284;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "723": {
            "code": "n = -21;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "724": {
            "code": "n = -99;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "725": {
            "code": "n = 119;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "726": {
            "code": "n = 1967;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "727": {
            "code": "n = 185;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "728": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "729": {
            "code": "n = 242;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "730": {
            "code": "n = 1121;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "731": {
            "code": "n = -34;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "732": {
            "code": "n = 1066;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "733": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "734": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "735": {
            "code": "n = 498;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "736": {
            "code": "n = 1284;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "737": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "738": {
            "code": "n = 552;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "739": {
            "code": "n = 1431;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "740": {
            "code": "n = 1499;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "741": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "742": {
            "code": "n = 314;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "743": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "744": {
            "code": "n = 1345;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "745": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "746": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "747": {
            "code": "n = 141;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "748": {
            "code": "n = 1448;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "749": {
            "code": "n = 359;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "750": {
            "code": "n = 978;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "751": {
            "code": "n = 166;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "752": {
            "code": "n = 994;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "753": {
            "code": "n = 1876;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "754": {
            "code": "n = 387;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "755": {
            "code": "n = 992;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "756": {
            "code": "n = 408;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "757": {
            "code": "n = 927;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "758": {
            "code": "n = 886;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "759": {
            "code": "n = 1359;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "760": {
            "code": "n = 356;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "761": {
            "code": "n = 1543;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "762": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "763": {
            "code": "n = 201;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "764": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "765": {
            "code": "n = 2000;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "766": {
            "code": "n = -39;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "767": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "768": {
            "code": "n = 183;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "769": {
            "code": "n = -100;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "770": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "771": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "772": {
            "code": "n = -62;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "773": {
            "code": "n = 1158;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "774": {
            "code": "n = 1288;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "775": {
            "code": "n = 1024;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "776": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "777": {
            "code": "n = 296;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "778": {
            "code": "n = 572;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "779": {
            "code": "n = 511;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "780": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "781": {
            "code": "n = 1894;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "782": {
            "code": "n = 1879;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "783": {
            "code": "n = -37;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "784": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "785": {
            "code": "n = 1853;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "786": {
            "code": "n = -95;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "787": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "788": {
            "code": "n = 817;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "789": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "790": {
            "code": "n = 1095;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "791": {
            "code": "n = 865;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "792": {
            "code": "n = 167;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "793": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "794": {
            "code": "n = 1979;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "795": {
            "code": "n = 1332;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "796": {
            "code": "n = -7;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "797": {
            "code": "n = -68;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "798": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "799": {
            "code": "n = 900;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "800": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "801": {
            "code": "n = -98;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "802": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "803": {
            "code": "n = 1825;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "804": {
            "code": "n = 1728;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "805": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "806": {
            "code": "n = 938;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "807": {
            "code": "n = 277;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "808": {
            "code": "n = 1819;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "809": {
            "code": "n = 1850;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "810": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "811": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "812": {
            "code": "n = 936;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "813": {
            "code": "n = 402;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "814": {
            "code": "n = 699;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "815": {
            "code": "n = 1058;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "816": {
            "code": "n = 1569;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "817": {
            "code": "n = 1849;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "818": {
            "code": "n = 1284;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "819": {
            "code": "n = -70;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "820": {
            "code": "n = 1083;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "821": {
            "code": "n = 750;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "822": {
            "code": "n = 1250;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "823": {
            "code": "n = -55;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "824": {
            "code": "n = -51;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "825": {
            "code": "n = 406;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "826": {
            "code": "n = 1008;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "827": {
            "code": "n = 872;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "828": {
            "code": "n = 51;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "829": {
            "code": "n = 484;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "830": {
            "code": "n = 1516;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "831": {
            "code": "n = 484;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "832": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "833": {
            "code": "n = 6;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "834": {
            "code": "n = -75;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "835": {
            "code": "n = 1685;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "836": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "837": {
            "code": "n = -89;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "838": {
            "code": "n = -57;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "839": {
            "code": "n = 1778;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "840": {
            "code": "n = -2;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "841": {
            "code": "n = 869;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "842": {
            "code": "n = 146;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "843": {
            "code": "n = 1694;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "844": {
            "code": "n = 386;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "845": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "846": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "847": {
            "code": "n = 426;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "848": {
            "code": "n = 522;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "849": {
            "code": "n = 17;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "850": {
            "code": "n = 635;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "851": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "852": {
            "code": "n = 7;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "853": {
            "code": "n = 1224;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "854": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "855": {
            "code": "n = 1996;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "856": {
            "code": "n = 1164;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "857": {
            "code": "n = 1014;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "858": {
            "code": "n = 1544;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "859": {
            "code": "n = 1331;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "860": {
            "code": "n = 590;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "861": {
            "code": "n = -88;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "862": {
            "code": "n = 417;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "863": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "864": {
            "code": "n = 1860;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "865": {
            "code": "n = 719;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "866": {
            "code": "n = -87;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "867": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "868": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "869": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "870": {
            "code": "n = 880;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "871": {
            "code": "n = 254;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "872": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "873": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "874": {
            "code": "n = 1852;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "875": {
            "code": "n = 277;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "876": {
            "code": "n = -68;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "877": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "878": {
            "code": "n = 1349;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "879": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "880": {
            "code": "n = 1807;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "881": {
            "code": "n = 398;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "882": {
            "code": "n = 708;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "883": {
            "code": "n = 1956;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "884": {
            "code": "n = 1036;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "885": {
            "code": "n = 2000;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "886": {
            "code": "n = -53;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "887": {
            "code": "n = 519;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "888": {
            "code": "n = 95;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "889": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "890": {
            "code": "n = 722;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "891": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "892": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "893": {
            "code": "n = 1680;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "894": {
            "code": "n = 738;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "895": {
            "code": "n = 398;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "896": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "897": {
            "code": "n = 131;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "898": {
            "code": "n = 1632;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "899": {
            "code": "n = 1120;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "900": {
            "code": "n = -70;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "901": {
            "code": "n = -42;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "902": {
            "code": "n = 1790;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "903": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "904": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "905": {
            "code": "n = 497;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "906": {
            "code": "n = -59;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "907": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "908": {
            "code": "n = 1490;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "909": {
            "code": "n = 1673;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "910": {
            "code": "n = -58;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "911": {
            "code": "n = 484;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "912": {
            "code": "n = -54;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "913": {
            "code": "n = 127;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "914": {
            "code": "n = 1710;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "915": {
            "code": "n = -67;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "916": {
            "code": "n = 1287;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "917": {
            "code": "n = -70;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "918": {
            "code": "n = -63;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "919": {
            "code": "n = 152;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "920": {
            "code": "n = 1476;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "921": {
            "code": "n = 79;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "922": {
            "code": "n = 864;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "923": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "924": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "925": {
            "code": "n = 878;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "926": {
            "code": "n = 788;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "927": {
            "code": "n = 395;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "928": {
            "code": "n = 1245;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "929": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "930": {
            "code": "n = 1763;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "931": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "932": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "933": {
            "code": "n = 470;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "934": {
            "code": "n = 396;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "935": {
            "code": "n = 2000;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "936": {
            "code": "n = -9;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "937": {
            "code": "n = 0;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "938": {
            "code": "n = 346;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "939": {
            "code": "n = 1378;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "940": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "941": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "942": {
            "code": "n = 1456;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "943": {
            "code": "n = 1598;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "944": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "945": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "946": {
            "code": "n = 1746;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "947": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "948": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "949": {
            "code": "n = 773;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "950": {
            "code": "n = 1883;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "951": {
            "code": "n = 329;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "952": {
            "code": "n = 1592;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "953": {
            "code": "n = 484;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "954": {
            "code": "n = 785;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "955": {
            "code": "n = 1813;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "956": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "957": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "958": {
            "code": "n = 1764;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "959": {
            "code": "n = 1950;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "960": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "961": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "962": {
            "code": "n = 1399;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "963": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "964": {
            "code": "n = 1956;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "965": {
            "code": "n = 1148;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "966": {
            "code": "n = -51;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "967": {
            "code": "n = 1393;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "968": {
            "code": "n = 1909;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "969": {
            "code": "n = 455;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "970": {
            "code": "n = 466;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "971": {
            "code": "n = 152;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "972": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "973": {
            "code": "n = 362;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "974": {
            "code": "n = 1755;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "975": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "976": {
            "code": "n = -57;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "977": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "978": {
            "code": "n = -86;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "979": {
            "code": "n = -73;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "980": {
            "code": "n = -90;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "981": {
            "code": "n = 1731;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "982": {
            "code": "n = 973;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "983": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "984": {
            "code": "n = 44;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "985": {
            "code": "n = 1373;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "986": {
            "code": "n = 1857;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "987": {
            "code": "n = 607;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "988": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "989": {
            "code": "n = 1601;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "990": {
            "code": "n = -53;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "991": {
            "code": "n = 1296;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "992": {
            "code": "n = 75;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "993": {
            "code": "n = 1744;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "994": {
            "code": "n = 1888;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "995": {
            "code": "n = 1438;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "996": {
            "code": "n = -92;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "997": {
            "code": "n = 812;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "998": {
            "code": "n = 369;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "999": {
            "code": "n = 489;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))",
            "execution_array": [
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    "2444": {
        "0": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 433;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "1": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "2": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 361;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "3": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "4": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1911;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "5": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 57;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "6": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1558;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "7": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "8": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 719;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "9": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "10": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 367;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "11": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 397;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "12": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -36;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "13": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "14": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "15": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "16": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1632;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "17": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "18": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "19": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1477;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "20": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1277;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "21": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -53;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "22": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -72;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "23": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 552;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "24": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "25": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1798;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "26": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 552;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "27": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1981;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "28": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 607;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "29": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 407;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "30": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -55;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "31": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1751;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "32": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 400;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "33": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1676;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "34": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 304;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "35": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "36": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 317;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "37": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -56;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "38": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -51;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "39": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "40": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 870;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "41": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1468;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "42": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "43": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1334;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "44": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1899;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "45": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -18;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "46": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "47": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 379;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "48": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 41;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "49": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -29;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "50": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 819;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "51": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1799;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "52": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 297;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "53": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "54": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1251;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "55": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -9;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "56": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "57": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1698;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "58": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 986;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "59": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "60": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1649;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "61": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 888;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "62": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 450;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "63": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 461;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "64": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1847;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "65": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 972;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "66": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "67": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "68": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 833;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "69": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 439;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "70": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -35;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "71": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "72": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "73": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1958;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "74": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "75": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -75;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "76": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1900;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "77": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1392;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "78": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1988;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "79": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1819;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "80": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "81": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 72;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "82": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -57;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "83": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1088;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "84": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -12;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "85": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1976;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "86": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 160;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "87": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "88": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1732;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "89": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "90": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 6;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "91": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -62;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "92": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 481;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "93": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "94": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 0;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "95": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 412;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "96": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "97": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -61;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "98": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 2;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "99": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1224;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "100": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1516;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "101": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "102": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1597;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "103": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1626;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "104": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1578;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "105": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "106": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "107": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "108": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "109": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 36;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "110": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1393;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "111": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 918;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "112": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 455;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "113": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 485;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "114": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 157;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "115": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 870;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "116": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1251;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "117": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -76;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "118": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1834;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "119": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1876;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "120": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 193;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "121": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1921;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "122": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 774;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "123": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -62;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "124": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -36;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "125": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "126": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "127": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "128": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 362;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "129": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 185;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "130": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "131": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "132": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1753;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "133": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1791;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "134": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -61;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "135": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 452;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "136": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "137": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -53;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "138": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "139": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 62;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "140": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -39;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "141": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "142": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "143": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 392;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "144": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "145": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 549;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "146": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "147": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1991;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "148": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1413;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "149": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1982;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "150": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 660;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "151": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 210;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "152": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 133;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "153": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 404;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "154": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "155": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "156": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 37;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "157": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "158": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 38;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "159": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "160": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 483;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "161": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1694;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "162": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -10;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "163": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "164": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "165": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 236;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "166": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "167": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "168": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "169": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "170": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1750;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "171": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1283;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "172": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 433;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "173": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "174": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "175": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1133;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "176": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "177": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -59;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "178": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1793;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "179": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "180": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "181": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "182": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "183": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1740;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "184": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1426;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "185": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -22;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "186": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "187": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1173;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "188": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 907;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "189": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "190": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 35;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "191": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 591;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "192": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 916;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "193": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "194": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1882;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "195": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -54;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "196": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "197": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "198": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "199": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1737;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "200": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1314;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "201": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 22;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "202": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 767;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "203": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 264;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "204": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 406;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "205": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1578;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "206": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1914;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "207": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 196;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "208": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 510;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "209": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 193;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "210": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 433;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "211": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1098;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "212": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1220;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "213": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -36;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "214": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "215": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "216": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1006;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "217": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 971;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "218": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 367;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "219": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 394;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "220": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 955;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "221": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1920;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "222": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 613;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "223": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 537;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "224": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "225": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "226": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -87;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "227": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1887;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "228": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 429;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "229": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 23;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "230": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 361;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "231": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1422;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "232": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "233": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 418;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "234": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 370;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "235": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 495;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "236": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "237": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "238": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "239": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 153;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "240": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 245;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "241": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "242": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1505;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "243": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1133;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "244": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1641;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "245": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1363;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "246": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -64;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "247": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1473;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "248": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -4;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "249": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "250": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1224;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "251": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "252": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1931;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "253": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -57;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "254": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1375;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "255": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 842;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "256": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 593;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "257": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 22;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "258": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 601;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "259": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 481;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "260": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1282;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "261": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 210;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "262": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 493;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "263": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1336;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "264": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "265": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 925;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "266": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1641;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "267": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "268": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 491;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "269": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1848;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "270": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 377;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "271": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1890;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "272": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 598;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "273": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1576;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "274": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "275": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1226;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "276": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 313;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "277": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "278": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1994;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "279": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "280": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1659;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "281": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1509;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "282": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -80;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "283": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "284": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 170;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "285": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 391;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "286": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 494;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "287": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "288": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 870;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "289": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1959;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "290": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 610;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "291": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1864;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "292": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1729;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "293": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "294": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 898;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "295": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1611;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "296": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 924;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "297": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1033;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "298": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "299": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1605;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "300": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 831;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "301": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -50;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "302": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 237;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "303": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 374;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "304": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "305": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -93;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "306": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "307": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -46;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "308": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1086;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "309": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 60;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "310": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "311": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "312": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 141;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "313": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1829;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "314": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1908;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "315": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 431;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "316": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 101;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "317": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "318": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1867;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "319": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1521;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "320": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -18;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "321": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 331;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "322": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1811;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "323": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -50;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "324": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 368;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "325": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 757;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "326": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 434;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "327": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1093;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "328": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 414;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "329": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1322;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "330": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1733;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "331": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "332": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1209;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "333": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "334": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "335": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 396;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "336": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 450;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "337": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1157;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "338": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 499;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "339": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1688;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "340": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1096;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "341": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1634;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "342": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1313;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "343": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 972;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "344": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "345": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "346": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1074;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "347": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "348": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 187;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "349": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "350": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1150;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "351": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "352": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1780;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "353": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -95;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "354": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1436;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "355": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "356": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 2000;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "357": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "358": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1971;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "359": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 236;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "360": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "361": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "362": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "363": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "364": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 914;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "365": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 157;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "366": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 134;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "367": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -68;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "368": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1230;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "369": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 536;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "370": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 435;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "371": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1185;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "372": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "373": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1038;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "374": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1494;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "375": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 166;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "376": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1091;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "377": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1771;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "378": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 422;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "379": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 38;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "380": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 145;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "381": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -32;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "382": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1424;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "383": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "384": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1069;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "385": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1996;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "386": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 2;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "387": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1370;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "388": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "389": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "390": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 225;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "391": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -29;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "392": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 157;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "393": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "394": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "395": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "396": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 367;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "397": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1983;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "398": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1537;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "399": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 152;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "400": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1078;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "401": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 399;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "402": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "403": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "404": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -55;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "405": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "406": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 187;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "407": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 772;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "408": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "409": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 478;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "410": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1345;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "411": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1835;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "412": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "413": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1004;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "414": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 47;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "415": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "416": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "417": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 105;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "418": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "419": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1830;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "420": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 992;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "421": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -44;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "422": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "423": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 748;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "424": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "425": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1991;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "426": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -60;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "427": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "428": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "429": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -31;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "430": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "431": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -79;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "432": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -32;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "433": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 279;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "434": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "435": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1391;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "436": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "437": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 273;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "438": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1960;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "439": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 171;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "440": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -76;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "441": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "442": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "443": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "444": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 520;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "445": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 710;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "446": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1054;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "447": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "448": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "449": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "450": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "451": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1665;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "452": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "453": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "454": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1850;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "455": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1889;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "456": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 455;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "457": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 224;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "458": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1043;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "459": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1333;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "460": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 2000;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "461": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "462": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "463": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "464": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "465": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -66;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "466": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1963;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "467": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 500;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "468": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1967;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "469": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1850;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "470": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1355;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "471": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 166;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "472": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "473": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "474": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -93;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "475": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 228;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "476": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 485;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "477": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1058;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "478": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "479": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "480": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1203;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "481": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -62;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "482": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "483": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "484": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "485": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 715;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "486": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1169;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "487": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1681;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "488": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 692;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "489": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "490": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 263;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "491": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -55;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "492": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 659;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "493": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 395;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "494": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1188;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "495": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "496": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1479;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "497": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -39;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "498": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "499": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1981;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "500": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 414;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "501": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 50;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "502": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1903;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "503": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 396;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "504": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1380;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "505": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 769;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "506": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 787;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "507": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "508": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 606;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "509": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "510": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 29;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "511": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 151;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "512": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 843;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "513": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1259;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "514": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1901;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "515": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1700;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "516": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "517": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 673;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "518": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 417;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "519": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "520": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 150;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "521": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1494;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "522": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1502;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "523": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 219;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "524": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "525": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 943;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "526": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1439;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "527": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "528": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1496;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "529": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -82;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "530": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "531": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "532": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1795;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "533": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "534": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1917;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "535": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1418;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "536": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1921;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "537": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "538": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1670;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "539": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1452;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "540": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 617;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "541": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 120;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "542": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1437;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "543": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 2000;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "544": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 751;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "545": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1779;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "546": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1791;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "547": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 543;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "548": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1390;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "549": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1924;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "550": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -35;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "551": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 248;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "552": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1574;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "553": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 204;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "554": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1851;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "555": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 497;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "556": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1046;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "557": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 141;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "558": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 409;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "559": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1189;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "560": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 899;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "561": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1722;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "562": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1541;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "563": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 477;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "564": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1457;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "565": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -12;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "566": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -50;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "567": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 522;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "568": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 407;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "569": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 664;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "570": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 538;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "571": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1243;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "572": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1576;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "573": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "574": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "575": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 479;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "576": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -34;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "577": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1251;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "578": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 954;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "579": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 375;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "580": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1742;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "581": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -56;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "582": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1235;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "583": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "584": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "585": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 32;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "586": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 427;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "587": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -37;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "588": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1980;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "589": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "590": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 990;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "591": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "592": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1554;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "593": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 77;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "594": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "595": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1110;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "596": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 894;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "597": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1779;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "598": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1731;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "599": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1913;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "600": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 971;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "601": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 449;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "602": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1880;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "603": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 424;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "604": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "605": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 450;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "606": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 242;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "607": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "608": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 514;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "609": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -42;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "610": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1623;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "611": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1525;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "612": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1422;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "613": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -49;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "614": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -86;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "615": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 401;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "616": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 422;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "617": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1129;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "618": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1968;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "619": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 851;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "620": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "621": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 453;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "622": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "623": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -81;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "624": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1869;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "625": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "626": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "627": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1202;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "628": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1507;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "629": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "630": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -35;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "631": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 95;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "632": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1401;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "633": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1024;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "634": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1736;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "635": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 630;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "636": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -91;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "637": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 405;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "638": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -11;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "639": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1928;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "640": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 145;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "641": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 457;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "642": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 39;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "643": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "644": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1164;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "645": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "646": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1768;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "647": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "648": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 613;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "649": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1552;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "650": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "651": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1693;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "652": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1746;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "653": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1746;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "654": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -56;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "655": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "656": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -37;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "657": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "658": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1810;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "659": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 432;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "660": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -42;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "661": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1905;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "662": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -4;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "663": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -23;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "664": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 184;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "665": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "666": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -54;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "667": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 250;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "668": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -59;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "669": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -60;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "670": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "671": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "672": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 394;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "673": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1340;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "674": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "675": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1920;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "676": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "677": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "678": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1919;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "679": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 475;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "680": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "681": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1143;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "682": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1304;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "683": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1877;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "684": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "685": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 473;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "686": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 768;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "687": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1049;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "688": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 225;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "689": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 416;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "690": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1867;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "691": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "692": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1087;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "693": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 443;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "694": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "695": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1915;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "696": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1980;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "697": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "698": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 359;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "699": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1821;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "700": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1675;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "701": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -59;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "702": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 705;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "703": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1255;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "704": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1745;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "705": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1952;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "706": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "707": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 848;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "708": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1008;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "709": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 574;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "710": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 959;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "711": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "712": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -77;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "713": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 522;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "714": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 836;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "715": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1591;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "716": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "717": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "718": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 520;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "719": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 969;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "720": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -61;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "721": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -41;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "722": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "723": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 372;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "724": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1899;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "725": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1373;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "726": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1307;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "727": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "728": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "729": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1536;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "730": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1292;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "731": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 592;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "732": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "733": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 842;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "734": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 294;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "735": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -93;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "736": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -60;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "737": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -89;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "738": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "739": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1414;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "740": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1622;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "741": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "742": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 507;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "743": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "744": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -64;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "745": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1341;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "746": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 557;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "747": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "748": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1233;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "749": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 144;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "750": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 166;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "751": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 157;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "752": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1885;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "753": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "754": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1560;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "755": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "756": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 940;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "757": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 740;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "758": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1400;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "759": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -79;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "760": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "761": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 908;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "762": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 672;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "763": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "764": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1246;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "765": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1152;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "766": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "767": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 249;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "768": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 111;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "769": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 701;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "770": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -52;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "771": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1553;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "772": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1556;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "773": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 960;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "774": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 118;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "775": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "776": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1983;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "777": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 626;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "778": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 336;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "779": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -25;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "780": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1797;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "781": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 408;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "782": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1799;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "783": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1958;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "784": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 595;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "785": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 131;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "786": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 544;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "787": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1218;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "788": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1441;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "789": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "790": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "791": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 101;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "792": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1756;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "793": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "794": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "795": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1858;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "796": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 264;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "797": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "798": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 175;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "799": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 359;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "800": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "801": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 925;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "802": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "803": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "804": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 955;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "805": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 217;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "806": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1716;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "807": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1755;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "808": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 60;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "809": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "810": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1463;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "811": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1899;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "812": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1400;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "813": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "814": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1900;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "815": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1321;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "816": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "817": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 79;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "818": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1152;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "819": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 897;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "820": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "821": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 7;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "822": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 301;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "823": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -39;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "824": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -20;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "825": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 256;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "826": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -30;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "827": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1713;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "828": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1318;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "829": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "830": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 653;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "831": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "832": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 403;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "833": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 752;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "834": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1745;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "835": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1689;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "836": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -45;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "837": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1962;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "838": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "839": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1392;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "840": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1624;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "841": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "842": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 373;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "843": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 582;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "844": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 41;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "845": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -41;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "846": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -79;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "847": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1916;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "848": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "849": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -11;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "850": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "851": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 670;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "852": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 594;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "853": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 49;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "854": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1717;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "855": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -74;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "856": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "857": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -41;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "858": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 704;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "859": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1828;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "860": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 771;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "861": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 236;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "862": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 759;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "863": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 40;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "864": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 205;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "865": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1184;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "866": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 47;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "867": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "868": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "869": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1535;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "870": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 127;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "871": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -61;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "872": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -62;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "873": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1964;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "874": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "875": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "876": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -93;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "877": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 785;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "878": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 208;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "879": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 862;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "880": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 471;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "881": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -26;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "882": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        },
        "883": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 562;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "884": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1488;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "885": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1610;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "886": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1997;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "887": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 443;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "888": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 349;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "889": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 911;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "890": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "891": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 23;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "892": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1248;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "893": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1583;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "894": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 754;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "895": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1466;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "896": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1972;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "897": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -7;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "898": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 220;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "899": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -55;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "900": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1561;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "901": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 259;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "902": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1190;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "903": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1859;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "904": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 330;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "905": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "906": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1382;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "907": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 408;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "908": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1883;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "909": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 525;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "910": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 827;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "911": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 460;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "912": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "913": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1397;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "914": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1602;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "915": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 486;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "916": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1485;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "917": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "918": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1880;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "919": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 394;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "920": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 723;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "921": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 546;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "922": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "923": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 768;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "924": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "925": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 195;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "926": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "927": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1578;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "928": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1940;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "929": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1224;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "930": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1692;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "931": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1576;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "932": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1777;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "933": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1012;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "934": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1919;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "935": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 161;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "936": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1423;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "937": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -36;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "938": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -100;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "939": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1238;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "940": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "941": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1288;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "942": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "943": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 59;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "944": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 527;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "945": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 379;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "946": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1138;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "947": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 455;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "948": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 579;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "949": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1781;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "950": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "951": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -99;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "952": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1985;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "953": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1995;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "954": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "955": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -16;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "956": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 498;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "957": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "958": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -92;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "959": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1925;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "960": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 695;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "961": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1958;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "962": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "963": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 407;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "964": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -18;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "965": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 779;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "966": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1203;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "967": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "968": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 652;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "969": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "970": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1025;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "971": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "972": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1224;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "973": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "974": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 406;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "975": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 592;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "976": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 695;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "977": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 311;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "978": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 829;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "979": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "980": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 721;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "981": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -90;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "982": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1948;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "983": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 369;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "984": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1910;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "985": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1693;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "986": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -18;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "987": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 183;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "988": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1728;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "989": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -98;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "990": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 878;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "991": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1614;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "992": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 989;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "993": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = -58;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "994": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 877;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "995": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1057;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "996": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 1344;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "997": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 692;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "998": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 359;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        },
        "999": {
            "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 411;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))",
            "execution_array": [
                1,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    }
}