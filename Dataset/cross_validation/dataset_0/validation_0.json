{"3999": {"id": 3999, "code": "import math\nimport sys\nreadline = sys.stdin.readline\ndef main():\n    h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\n    print((max(0, (h2 - h1) * 60 + (m2 - m1) - k)))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "4000": {"id": 4000, "code": "import math\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nif h2 < h1:\n    h2 += 24\nif m2 < m1:\n    h2 -= 1\n    m2 += 60\nallMin = (h2 - h1) * 60 + (m2 - m1)\nres = allMin - k\nif res < 0:\n    res = 0\nprint(res)", "coverage": [">", ">", ">", "!", ">", "!", "!", ">", ">", ">", "!", ">"]}, "4001": {"id": 4001, "code": "import math\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nif h2 < h1:\n    h2 += 24\nif m2 < m1:\n    h2 -= 1\n    m2 += 60\nallMin = (h2 - h1) * 60 + (m2 - m1)\nres = allMin - k\nif res < 0:\n    res = 0\nprint(res)", "coverage": [">", ">", ">", "!", ">", "!", "!", ">", ">", ">", "!", ">"]}, "4002": {"id": 4002, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nhm1=60*h1+m1\nhm2=60*h2+m2\nans=hm2-hm1-k\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4003": {"id": 4003, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nhm1=60*h1+m1\nhm2=60*h2+m2\nans=hm2-hm1-k\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4004": {"id": 4004, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nM_all = (H2 *60 + M2) - (H1 *60 + M1) - K\nif M_all <= 0:\n    print('0')\nelse:\n    print(M_all)", "coverage": [">", ">", ">", "!", "!", ">"]}, "4005": {"id": 4005, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nM_all = (H2 *60 + M2) - (H1 *60 + M1) - K\nif M_all <= 0:\n    print('0')\nelse:\n    print(M_all)", "coverage": [">", ">", ">", ">", "!", "!"]}, "4006": {"id": 4006, "code": "import datetime\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nend = datetime.datetime(2020,6,6,h2,m2)\nstart = datetime.datetime(2020,6,6,h1,m1)\nsub = end-start-datetime.timedelta(minutes=k)\nprint(sub.seconds//60)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4007": {"id": 4007, "code": "import datetime\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nend = datetime.datetime(2020,6,6,h2,m2)\nstart = datetime.datetime(2020,6,6,h1,m1)\nsub = end-start-datetime.timedelta(minutes=k)\nprint(sub.seconds//60)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4008": {"id": 4008, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nt1=H1*60+M1\nt2=H2*60+M2\nprint(t2-K-t1)", "coverage": [">", ">", ">", ">"]}, "4009": {"id": 4009, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nt1=H1*60+M1\nt2=H2*60+M2\nprint(t2-K-t1)", "coverage": [">", ">", ">", ">"]}, "4010": {"id": 4010, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nall=0\nif m2>=m1:\n    all += (h2-h1)*60 + (m2-m1)\n    all -= k\nelse:\n    all += (h2-1-h1)*60 + (m2+60-m1)\n    all -= k\nprint(all)", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "4011": {"id": 4011, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nall=0\nif m2>=m1:\n    all += (h2-h1)*60 + (m2-m1)\n    all -= k\nelse:\n    all += (h2-1-h1)*60 + (m2+60-m1)\n    all -= k\nprint(all)", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "4012": {"id": 4012, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nprint((H2 * 60 + M2) - (H1 * 60 + M1) - K)", "coverage": [">", ">"]}, "4013": {"id": 4013, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nprint((H2 * 60 + M2) - (H1 * 60 + M1) - K)", "coverage": [">", ">"]}, "4014": {"id": 4014, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\ntime = (H2-H1)*60+M2-M1\nprint(time-K)", "coverage": [">", ">", ">"]}, "4015": {"id": 4015, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\ntime = (H2-H1)*60+M2-M1\nprint(time-K)", "coverage": [">", ">", ">"]}, "4016": {"id": 4016, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\nl=(60*c+d)-(60*a+b)\nans=l-e\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "4017": {"id": 4017, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\nl=(60*c+d)-(60*a+b)\nans=l-e\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "4018": {"id": 4018, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nprint(h2*60+m2-h1*60-m1-k)", "coverage": [">", ">"]}, "4019": {"id": 4019, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nprint(h2*60+m2-h1*60-m1-k)", "coverage": [">", ">"]}, "4020": {"id": 4020, "code": "x1 = 10;y1 = 0;x2 = 15;y2 = 0;t = 30\nprint((x2-x1)*60+(y2-y1)-t)", "coverage": [">", ">"]}, "4021": {"id": 4021, "code": "x1 = 10;y1 = 0;x2 = 12;y2 = 0;t = 120\nprint((x2-x1)*60+(y2-y1)-t)", "coverage": [">", ">"]}, "4022": {"id": 4022, "code": "a = [10, 0, 15, 0, 30]\nb = (a[2] * 60 + a[3]) - (a[0] * 60 + a[1])\nprint(b - a[4])", "coverage": [">", ">", ">"]}, "4023": {"id": 4023, "code": "a = [10, 0, 12, 0, 120]\nb = (a[2] * 60 + a[3]) - (a[0] * 60 + a[1])\nprint(b - a[4])", "coverage": [">", ">", ">"]}, "4024": {"id": 4024, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\nx = abs(a - c) * 60 - b + d - e\nif x < 0:\n    print(0)\nelse:\n    print(x)", "coverage": [">", ">", ">", "!", "!", ">"]}, "4025": {"id": 4025, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\nx = abs(a - c) * 60 - b + d - e\nif x < 0:\n    print(0)\nelse:\n    print(x)", "coverage": [">", ">", ">", "!", "!", ">"]}, "4026": {"id": 4026, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nans2=h2*60+m2\nans1=h1*60+m1\nprint(ans2-ans1-k)", "coverage": [">", ">", ">", ">"]}, "4027": {"id": 4027, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nans2=h2*60+m2\nans1=h1*60+m1\nprint(ans2-ans1-k)", "coverage": [">", ">", ">", ">"]}, "4028": {"id": 4028, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nif m2 >= m1:\n    time = (h2 - h1)*60 + m2 - m1\nelif m2 < m1:\n    time = (h2 - h1 - 1) * 60 + m2 + 60 - m1\nprint(time-k)", "coverage": [">", ">", ">", "!", "!", ">"]}, "4029": {"id": 4029, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nif m2 >= m1:\n    time = (h2 - h1)*60 + m2 - m1\nelif m2 < m1:\n    time = (h2 - h1 - 1) * 60 + m2 + 60 - m1\nprint(time-k)", "coverage": [">", ">", ">", "!", "!", ">"]}, "4030": {"id": 4030, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\n    time1 = H1*60 + M1\n    time2 = H2*60 + M2\n    time = time2-time1\n    ans = time-K\n    return ans\nprint(main())", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "4031": {"id": 4031, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\n    time1 = H1*60 + M1\n    time2 = H2*60 + M2\n    time = time2-time1\n    ans = time-K\n    return ans\nprint(main())", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "4032": {"id": 4032, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nM1 += H1*60\nM2 += H2*60\nprint(M2-M1-K)", "coverage": [">", ">", ">", ">"]}, "4033": {"id": 4033, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nM1 += H1*60\nM2 += H2*60\nprint(M2-M1-K)", "coverage": [">", ">", ">", ">"]}, "4034": {"id": 4034, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nm1 = 60*H1 + M1\nm2 = 60*H2 + M2\nprint(m2-m1-K)", "coverage": [">", ">", ">", ">"]}, "4035": {"id": 4035, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nm1 = 60*H1 + M1\nm2 = 60*H2 + M2\nprint(m2-m1-K)", "coverage": [">", ">", ">", ">"]}, "4036": {"id": 4036, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\na = 60*h2 + m2\nb = 60*h1 + m1\nprint(a-b-k)", "coverage": [">", ">", ">", ">"]}, "4037": {"id": 4037, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\na = 60*h2 + m2\nb = 60*h1 + m1\nprint(a-b-k)", "coverage": [">", ">", ">", ">"]}, "4038": {"id": 4038, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nif h1 > h2:\n    h2 +=24\nh = h2 - h1\nm = m2 - m1\nif m < 0:\n    m = m + 60\n    h = h - 1\ntime = h*60 + m \nprint(time - k)", "coverage": [">", ">", "!", ">", ">", ">", "!", "!", ">", ">"]}, "4039": {"id": 4039, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nif h1 > h2:\n    h2 +=24\nh = h2 - h1\nm = m2 - m1\nif m < 0:\n    m = m + 60\n    h = h - 1\ntime = h*60 + m \nprint(time - k)", "coverage": [">", ">", "!", ">", ">", ">", "!", "!", ">", ">"]}, "4040": {"id": 4040, "code": "a = 10;b = 0;c = 15;d = 0;K = 30\nhour = (c-a) * 60\nmin = d - b\nans = hour + min - K\nprint(ans) ", "coverage": [">", ">", ">", ">", ">"]}, "4041": {"id": 4041, "code": "a = 10;b = 0;c = 12;d = 0;K = 120\nhour = (c-a) * 60\nmin = d - b\nans = hour + min - K\nprint(ans) ", "coverage": [">", ">", ">", ">", ">"]}, "4042": {"id": 4042, "code": "H = ['10', '0', '15', '0', '30']\nsdy =0\nif int(H[2]) >= int(H[0]):\n  sdy = int(H[2])*60 +int(H[3])-int(H[0])*60 -int(H[1]) - int(H[4])\nelse:\n  H[2] = (int(H[2])+24)\n  sdy = int(H[2])*60 +int(H[3])-int(H[0])*60 -int(H[1]) - int(H[4])\nif int(sdy) < 0:\n  sdy = 0\nprint(sdy)", "coverage": [">", ">", ">", ">", "!", "!", "!", ">", "!", ">"]}, "4043": {"id": 4043, "code": "H = ['10', '0', '12', '0', '120']\nsdy =0\nif int(H[2]) >= int(H[0]):\n  sdy = int(H[2])*60 +int(H[3])-int(H[0])*60 -int(H[1]) - int(H[4])\nelse:\n  H[2] = (int(H[2])+24)\n  sdy = int(H[2])*60 +int(H[3])-int(H[0])*60 -int(H[1]) - int(H[4])\nif int(sdy) < 0:\n  sdy = 0\nprint(sdy)", "coverage": [">", ">", ">", ">", "!", "!", "!", ">", "!", ">"]}, "4044": {"id": 4044, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nHM1=H1*60+M1\nHM2=H2*60+M2\nprint(max(HM2-HM1-K,0))", "coverage": [">", ">", ">", ">"]}, "4045": {"id": 4045, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nHM1=H1*60+M1\nHM2=H2*60+M2\nprint(max(HM2-HM1-K,0))", "coverage": [">", ">", ">", ">"]}, "4046": {"id": 4046, "code": "from sys import stdin\nH1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nprint(((H2-H1)*60 + (M2-M1)) - K)", "coverage": [">", ">", ">"]}, "4047": {"id": 4047, "code": "from sys import stdin\nH1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nprint(((H2-H1)*60 + (M2-M1)) - K)", "coverage": [">", ">", ">"]}, "4048": {"id": 4048, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\nh = c-a\nm = d-b\nif m < 0 :\n    h = h-1\n    m = 60 + m\nprint(h * 60 + m - e)", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "4049": {"id": 4049, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\nh = c-a\nm = d-b\nif m < 0 :\n    h = h-1\n    m = 60 + m\nprint(h * 60 + m - e)", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "4050": {"id": 4050, "code": "import math\nS = [10, 0, 15, 0, 30]\na = (S[2]-S[0])*60+(S[3]-S[1])\nb = a - S[4]\nif(b>0):\n  print(b)\nelse:\n  print(0)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "4051": {"id": 4051, "code": "import math\nS = [10, 0, 12, 0, 120]\na = (S[2]-S[0])*60+(S[3]-S[1])\nb = a - S[4]\nif(b>0):\n  print(b)\nelse:\n  print(0)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "4052": {"id": 4052, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\ns = h1*60+m1\nt = h2*60+m2\nans = t-s-k\nprint (ans)", "coverage": [">", ">", ">", ">", ">"]}, "4053": {"id": 4053, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\ns = h1*60+m1\nt = h2*60+m2\nans = t-s-k\nprint (ans)", "coverage": [">", ">", ">", ">", ">"]}, "4054": {"id": 4054, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\na = m2 - m1\nif a < 0:\n    mm = (h2 - h1 - 1) * 60 + (60 + a)\nelse:\n    mm = (h2 - h1) * 60 + a\nprint(0 if mm - k <= 0 else mm - k)", "coverage": [">", ">", ">", "!", "!", ">", ">"]}, "4055": {"id": 4055, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\na = m2 - m1\nif a < 0:\n    mm = (h2 - h1 - 1) * 60 + (60 + a)\nelse:\n    mm = (h2 - h1) * 60 + a\nprint(0 if mm - k <= 0 else mm - k)", "coverage": [">", ">", ">", "!", "!", ">", ">"]}, "4056": {"id": 4056, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nh = (h2 * 60 + m2) - (h1 * 60 + m1)\nans = h - k\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "4057": {"id": 4057, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nh = (h2 * 60 + m2) - (h1 * 60 + m1)\nans = h - k\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "4058": {"id": 4058, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nt1 = h1 * 60 + m1\nt2 = h2 * 60 + m2\nif t2 > t1:\n\tawake = t2 - t1\nelse:\n    awake = 24 * 60 - t1 + t2\nprint(awake - k)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "4059": {"id": 4059, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nt1 = h1 * 60 + m1\nt2 = h2 * 60 + m2\nif t2 > t1:\n\tawake = t2 - t1\nelse:\n    awake = 24 * 60 - t1 + t2\nprint(awake - k)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "4060": {"id": 4060, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nprint(H2*60+M2-H1*60-M1-K)", "coverage": [">", ">"]}, "4061": {"id": 4061, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nprint(H2*60+M2-H1*60-M1-K)", "coverage": [">", ">"]}, "4062": {"id": 4062, "code": "a = 10;b = 0;c = 15;d = 0;k = 30\np = a*60 + b\nq = c*60 + d\nans = q-p-k\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4063": {"id": 4063, "code": "a = 10;b = 0;c = 12;d = 0;k = 120\np = a*60 + b\nq = c*60 + d\nans = q-p-k\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4064": {"id": 4064, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\ns = h1*60+m1\nt = h2*60+m2\nans = t-s-k\nprint (max(ans,0))", "coverage": [">", ">", ">", ">", ">"]}, "4065": {"id": 4065, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\ns = h1*60+m1\nt = h2*60+m2\nans = t-s-k\nprint (max(ans,0))", "coverage": [">", ">", ">", ">", ">"]}, "4066": {"id": 4066, "code": "HMK = [10, 0, 15, 0, 30]\nH1 = HMK[0]\nM1 = HMK[1]\nH2 = HMK[2]\nM2 = HMK[3]\nK = HMK[4]\nif H2 < H1:\n\tH2 += 24\nans = ((H2 - H1) * 60 + (M2 - M1)) - K\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">"]}, "4067": {"id": 4067, "code": "HMK = [10, 0, 12, 0, 120]\nH1 = HMK[0]\nM1 = HMK[1]\nH2 = HMK[2]\nM2 = HMK[3]\nK = HMK[4]\nif H2 < H1:\n\tH2 += 24\nans = ((H2 - H1) * 60 + (M2 - M1)) - K\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">"]}, "4068": {"id": 4068, "code": "A = [10, 0, 15, 0, 30]\nprint((A[2]*60+A[3])-(A[0]*60+A[1])-A[4])", "coverage": [">", ">"]}, "4069": {"id": 4069, "code": "A = [10, 0, 12, 0, 120]\nprint((A[2]*60+A[3])-(A[0]*60+A[1])-A[4])", "coverage": [">", ">"]}, "4070": {"id": 4070, "code": "H1 = 10;H2 = 0;H3 = 15;H4 = 0;K = 30\nup = H1*60 + H2\ndown = H3*60 + H4\nprint(down - up - K)", "coverage": [">", ">", ">", ">"]}, "4071": {"id": 4071, "code": "H1 = 10;H2 = 0;H3 = 12;H4 = 0;K = 120\nup = H1*60 + H2\ndown = H3*60 + H4\nprint(down - up - K)", "coverage": [">", ">", ">", ">"]}, "4072": {"id": 4072, "code": "h = 10;m = 0;a = 15;b = 0;k = 30\nh_to_min = h * 60\na_to_min = a * 60\nre1 = a_to_min - h_to_min\nre2 = b - m\nre = re1 + re2\nprint(re-k)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4073": {"id": 4073, "code": "h = 10;m = 0;a = 12;b = 0;k = 120\nh_to_min = h * 60\na_to_min = a * 60\nre1 = a_to_min - h_to_min\nre2 = b - m\nre = re1 + re2\nprint(re-k)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4074": {"id": 4074, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\n    t1 = 60*H1 + M1\n    t2 = 60*H2 + M2\n    d = 0\n    if t1 <= t2:\n        d = t2 - t1\n    else:\n        d = 60*24 - t1 + t2\n    print(max(0, d - K))\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "4075": {"id": 4075, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\n    t1 = 60*H1 + M1\n    t2 = 60*H2 + M2\n    d = 0\n    if t1 <= t2:\n        d = t2 - t1\n    else:\n        d = 60*24 - t1 + t2\n    print(max(0, d - K))\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "4076": {"id": 4076, "code": "import sys\nreadline = sys.stdin.buffer.readline\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nprint(60 * (h2 - h1) + m2 - m1 - k)", "coverage": [">", ">", ">", ">"]}, "4077": {"id": 4077, "code": "import sys\nreadline = sys.stdin.buffer.readline\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nprint(60 * (h2 - h1) + m2 - m1 - k)", "coverage": [">", ">", ">", ">"]}, "4078": {"id": 4078, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\ntime1 = h1 * 60 + m1\ntime2 = h2 * 60 + m2\nprint(max(time2 - k - time1, 0))", "coverage": [">", ">", ">", ">"]}, "4079": {"id": 4079, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\ntime1 = h1 * 60 + m1\ntime2 = h2 * 60 + m2\nprint(max(time2 - k - time1, 0))", "coverage": [">", ">", ">", ">"]}, "4080": {"id": 4080, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nwake_time = h2*60 + m2 - (h1 *60 + m1);\nif wake_time > k:\n    print(wake_time - k);\nelse:\n    print(0);", "coverage": [">", ">", ">", ">", "!", "!"]}, "4081": {"id": 4081, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nwake_time = h2*60 + m2 - (h1 *60 + m1);\nif wake_time > k:\n    print(wake_time - k);\nelse:\n    print(0);", "coverage": [">", ">", ">", "!", "!", ">"]}, "4082": {"id": 4082, "code": "H = 10;M = 0;h = 15;m = 0;k = 30\nprint(60*(h-H) + (m-M) - k)", "coverage": [">", ">"]}, "4083": {"id": 4083, "code": "H = 10;M = 0;h = 12;m = 0;k = 120\nprint(60*(h-H) + (m-M) - k)", "coverage": [">", ">"]}, "4084": {"id": 4084, "code": "string = \"10 0 15 0 30\"\nnums = string.split(' ')\nhour = int(nums[2]) - int(nums[0])\nminute = int(nums[3]) - int(nums[1])\ntime = hour * 60 + minute - int(nums[4])\nprint(time)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4085": {"id": 4085, "code": "string = \"10 0 12 0 120\"\nnums = string.split(' ')\nhour = int(nums[2]) - int(nums[0])\nminute = int(nums[3]) - int(nums[1])\ntime = hour * 60 + minute - int(nums[4])\nprint(time)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4086": {"id": 4086, "code": "sh = 10;sm = 0;eh = 15;em = 0;t = 30\nprint((eh-sh)*60+em-sm-t)", "coverage": [">", ">"]}, "4087": {"id": 4087, "code": "sh = 10;sm = 0;eh = 12;em = 0;t = 120\nprint((eh-sh)*60+em-sm-t)", "coverage": [">", ">"]}, "4088": {"id": 4088, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nt1, t2 = h1*60+m1, h2*60+m2\nif t1 > t2:\n    t2 += 60*24\nans = t2-t1-k\nprint(ans)", "coverage": [">", ">", ">", "!", ">", ">"]}, "4089": {"id": 4089, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nt1, t2 = h1*60+m1, h2*60+m2\nif t1 > t2:\n    t2 += 60*24\nans = t2-t1-k\nprint(ans)", "coverage": [">", ">", ">", "!", ">", ">"]}, "4090": {"id": 4090, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nokiteiru = (h2*60+m2)-(h1*60+m1)\nprint(okiteiru - k)", "coverage": [">", ">", ">"]}, "4091": {"id": 4091, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nokiteiru = (h2*60+m2)-(h1*60+m1)\nprint(okiteiru - k)", "coverage": [">", ">", ">"]}, "4092": {"id": 4092, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\ntime = abs(h2-h1)*60 + m2 -m1\nprint(time - k)", "coverage": [">", ">", ">"]}, "4093": {"id": 4093, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\ntime = abs(h2-h1)*60 + m2 -m1\nprint(time - k)", "coverage": [">", ">", ">"]}, "4094": {"id": 4094, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nif m2 >= m1:\n    print((h2 - h1) * 60 + (m2 - m1) - k)\nelse:\n    print((h2-1 - h1) * 60 + (m2 + 60 - m1) - k)", "coverage": [">", ">", ">", "!", "!"]}, "4095": {"id": 4095, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nif m2 >= m1:\n    print((h2 - h1) * 60 + (m2 - m1) - k)\nelse:\n    print((h2-1 - h1) * 60 + (m2 + 60 - m1) - k)", "coverage": [">", ">", ">", "!", "!"]}, "4096": {"id": 4096, "code": "A = 10;B = 0;C = 15;D = 0;E = 30\nprint(max(0,-60*A-B+(60*C+D))-E)", "coverage": [">", ">"]}, "4097": {"id": 4097, "code": "A = 10;B = 0;C = 12;D = 0;E = 120\nprint(max(0,-60*A-B+(60*C+D))-E)", "coverage": [">", ">"]}, "4098": {"id": 4098, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\n    if M2 >= M1:\n        diff = (H2-H1)*60 + M2-M1\n    else:\n        diff = (H2-H1)*60 + 60-M1+M2 -60\n    if diff <= 0:\n        print(0)\n    else:\n        print(diff - K)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">"]}, "4099": {"id": 4099, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\n    if M2 >= M1:\n        diff = (H2-H1)*60 + M2-M1\n    else:\n        diff = (H2-H1)*60 + 60-M1+M2 -60\n    if diff <= 0:\n        print(0)\n    else:\n        print(diff - K)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">"]}, "4100": {"id": 4100, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\ntime = (h2 - h1) * 60\ntime += m2 - m1\nprint(time - k)", "coverage": [">", ">", ">", ">"]}, "4101": {"id": 4101, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\ntime = (h2 - h1) * 60\ntime += m2 - m1\nprint(time - k)", "coverage": [">", ">", ">", ">"]}, "4102": {"id": 4102, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nstart = 60 * H1 + M1\nend = 60 * H2 + M2\nprint((end - K) - start)", "coverage": [">", ">", ">", ">"]}, "4103": {"id": 4103, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nstart = 60 * H1 + M1\nend = 60 * H2 + M2\nprint((end - K) - start)", "coverage": [">", ">", ">", ">"]}, "4104": {"id": 4104, "code": "import datetime\ndef main():\n    H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\n    start = H1 * 60 + M1\n    end = H2 * 60 + M2\n    ans = end - start - K\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4105": {"id": 4105, "code": "import datetime\ndef main():\n    H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\n    start = H1 * 60 + M1\n    end = H2 * 60 + M2\n    ans = end - start - K\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4106": {"id": 4106, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nT1 = 60 * H1 + M1\nT2 = 60 * H2 + M2\nprint(T2 - K - T1)", "coverage": [">", ">", ">", ">"]}, "4107": {"id": 4107, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nT1 = 60 * H1 + M1\nT2 = 60 * H2 + M2\nprint(T2 - K - T1)", "coverage": [">", ">", ">", ">"]}, "4108": {"id": 4108, "code": "h_1 = 10;m_1 = 0;h_2 = 15;m_2 = 0;k = 30\nif m_2-k>=0:\n    m_2 -= k\nelse:\n    tmp = k - m_2\n    m_2 = 60 - tmp\n    h_2 -= 1\ntmp_1 = h_1 * 60 + m_1\ntmp_2 = h_2 * 60 + m_2\nans = tmp_2 - tmp_1\nprint(ans)", "coverage": [">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">"]}, "4109": {"id": 4109, "code": "h_1 = 10;m_1 = 0;h_2 = 12;m_2 = 0;k = 120\nif m_2-k>=0:\n    m_2 -= k\nelse:\n    tmp = k - m_2\n    m_2 = 60 - tmp\n    h_2 -= 1\ntmp_1 = h_1 * 60 + m_1\ntmp_2 = h_2 * 60 + m_2\nans = tmp_2 - tmp_1\nprint(ans)", "coverage": [">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">"]}, "4110": {"id": 4110, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nm1 += h1 * 60\nm2 += h2 * 60\nm = 0\nif m1 == m2:\n  m = 24 * 60\nelif m1 < m2:\n  m = m2 - m1\nelse:\n  m = 24 * 60 - (m1 - m2)\nprint(m - k)", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", "!", "!", ">"]}, "4111": {"id": 4111, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nm1 += h1 * 60\nm2 += h2 * 60\nm = 0\nif m1 == m2:\n  m = 24 * 60\nelif m1 < m2:\n  m = m2 - m1\nelse:\n  m = 24 * 60 - (m1 - m2)\nprint(m - k)", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", "!", "!", ">"]}, "4112": {"id": 4112, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nans=(h2-h1)*60+(m2-m1)-k\nprint(ans)", "coverage": [">", ">", ">"]}, "4113": {"id": 4113, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nans=(h2-h1)*60+(m2-m1)-k\nprint(ans)", "coverage": [">", ">", ">"]}, "4114": {"id": 4114, "code": "import math\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nt1 = h1 * 60 + m1\nt2 = h2 * 60 + m2\nprint(t2 - t1 - k)", "coverage": [">", ">", ">", ">", ">"]}, "4115": {"id": 4115, "code": "import math\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nt1 = h1 * 60 + m1\nt2 = h2 * 60 + m2\nprint(t2 - t1 - k)", "coverage": [">", ">", ">", ">", ">"]}, "4116": {"id": 4116, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;K = 30\nprint(((abs(h1-h2)*60)-(m1-m2)) - K)", "coverage": [">", ">"]}, "4117": {"id": 4117, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;K = 120\nprint(((abs(h1-h2)*60)-(m1-m2)) - K)", "coverage": [">", ">"]}, "4118": {"id": 4118, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nstart = (60 * h1) + m1\nend = (60 * h2) + m2 - k\nprint(end - start)", "coverage": [">", ">", ">", ">"]}, "4119": {"id": 4119, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nstart = (60 * h1) + m1\nend = (60 * h2) + m2 - k\nprint(end - start)", "coverage": [">", ">", ">", ">"]}, "4120": {"id": 4120, "code": "h = 10;m = 0;h2 = 15;m2 = 0;k = 30\nans = (h2 * 60 + m2) - (h * 60 + m) - k\nprint(ans)", "coverage": [">", ">", ">"]}, "4121": {"id": 4121, "code": "h = 10;m = 0;h2 = 12;m2 = 0;k = 120\nans = (h2 * 60 + m2) - (h * 60 + m) - k\nprint(ans)", "coverage": [">", ">", ">"]}, "4122": {"id": 4122, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nhour = h2 - h1\nminute = m2 - m1\ntime = (hour * 60) + minute\nprint(time - k)", "coverage": [">", ">", ">", ">", ">"]}, "4123": {"id": 4123, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nhour = h2 - h1\nminute = m2 - m1\ntime = (hour * 60) + minute\nprint(time - k)", "coverage": [">", ">", ">", ">", ">"]}, "4124": {"id": 4124, "code": "h_1 = 10;m_1 = 0;h_2 = 15;m_2 = 0;k = 30\ntime_m = h_2*60 + m_2 - (h_1*60 + m_1) - k\nprint(time_m)", "coverage": [">", ">", ">"]}, "4125": {"id": 4125, "code": "h_1 = 10;m_1 = 0;h_2 = 12;m_2 = 0;k = 120\ntime_m = h_2*60 + m_2 - (h_1*60 + m_1) - k\nprint(time_m)", "coverage": [">", ">", ">"]}, "4126": {"id": 4126, "code": "N = [10, 0, 15, 0, 30]\nres = ((N[2]-N[0])*60) + (N[3]-N[1]) - N[4]\nprint(res)", "coverage": [">", ">", ">"]}, "4127": {"id": 4127, "code": "N = [10, 0, 12, 0, 120]\nres = ((N[2]-N[0])*60) + (N[3]-N[1]) - N[4]\nprint(res)", "coverage": [">", ">", ">"]}, "4128": {"id": 4128, "code": "list = [10, 0, 15, 0, 30]\nans = (60-list[1])+list[3]+(list[2]-list[0]-1)*60-list[4]\nprint(ans)", "coverage": [">", ">", ">"]}, "4129": {"id": 4129, "code": "list = [10, 0, 12, 0, 120]\nans = (60-list[1])+list[3]+(list[2]-list[0]-1)*60-list[4]\nprint(ans)", "coverage": [">", ">", ">"]}, "4130": {"id": 4130, "code": "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    import math\n    a = 10;b = 0;c = 15;d = 0;e = 30\n    if d >= b:\n        res = (c-a)*60 + d-b\n        print(res-e)\n    else:\n        res = (c-a-1)*60 + d-b+60\n        print(res-e)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">"]}, "4131": {"id": 4131, "code": "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    import math\n    a = 10;b = 0;c = 12;d = 0;e = 120\n    if d >= b:\n        res = (c-a)*60 + d-b\n        print(res-e)\n    else:\n        res = (c-a-1)*60 + d-b+60\n        print(res-e)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">"]}, "4132": {"id": 4132, "code": "input = \"10 0 15 0 30\"\nsplit = input.split()\nH1 = split[0]\nM1 = split[1]\nH2 = split[2]\nM2 = split[3]\nK = split[4]\nh = int(H2)*60 - int(H1)*60 + int(M2) - int(M1) - int(K)\nprint(h)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4133": {"id": 4133, "code": "input = \"10 0 12 0 120\"\nsplit = input.split()\nH1 = split[0]\nM1 = split[1]\nH2 = split[2]\nM2 = split[3]\nK = split[4]\nh = int(H2)*60 - int(H1)*60 + int(M2) - int(M1) - int(K)\nprint(h)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4134": {"id": 4134, "code": "def solve(h1, m1, h2, m2, k):\n    return (h2-h1)*60 + (m2-m1) - k\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nprint(solve(h1, m1, h2, m2, k))", "coverage": [">", ">", ">", ">"]}, "4135": {"id": 4135, "code": "def solve(h1, m1, h2, m2, k):\n    return (h2-h1)*60 + (m2-m1) - k\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nprint(solve(h1, m1, h2, m2, k))", "coverage": [">", ">", ">", ">"]}, "4136": {"id": 4136, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nS = H1*60+M1\nG = H2*60+M2\np = G-S\nif p-K < 0:\n  print (0)\nelse:\n  print (p-K)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "4137": {"id": 4137, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nS = H1*60+M1\nG = H2*60+M2\np = G-S\nif p-K < 0:\n  print (0)\nelse:\n  print (p-K)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "4138": {"id": 4138, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nT1, T2 = (H1 * 60 + M1), (H2 * 60 + M2)\nprint(\"{}\".format((T2 - K) - T1))", "coverage": [">", ">", ">"]}, "4139": {"id": 4139, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nT1, T2 = (H1 * 60 + M1), (H2 * 60 + M2)\nprint(\"{}\".format((T2 - K) - T1))", "coverage": [">", ">", ">"]}, "4140": {"id": 4140, "code": "h = 10;m = 0;hh = 15;mm = 0;k = 30\nbi = h*60 + m\nen = hh*60 +mm\nprint(max(en - bi - k,0))", "coverage": [">", ">", ">", ">"]}, "4141": {"id": 4141, "code": "h = 10;m = 0;hh = 12;mm = 0;k = 120\nbi = h*60 + m\nen = hh*60 +mm\nprint(max(en - bi - k,0))", "coverage": [">", ">", ">", ">"]}, "4142": {"id": 4142, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;K = 30\nif (h2 - h1)*60 + (m2-m1) < K:\n    print('{}'.format(0))\nelse:\n    print('{}'.format((h2 - h1)*60 + (m2-m1) - K))", "coverage": [">", ">", "!", "!", ">"]}, "4143": {"id": 4143, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;K = 120\nif (h2 - h1)*60 + (m2-m1) < K:\n    print('{}'.format(0))\nelse:\n    print('{}'.format((h2 - h1)*60 + (m2-m1) - K))", "coverage": [">", ">", "!", "!", ">"]}, "4144": {"id": 4144, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\n    h = H2 - H1\n    m = M2 - M1\n    ans = h*60 + m - K\n    if ans > 0:\n        print(ans)\n    else:\n        print(0)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "4145": {"id": 4145, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\n    h = H2 - H1\n    m = M2 - M1\n    ans = h*60 + m - K\n    if ans > 0:\n        print(ans)\n    else:\n        print(0)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "4146": {"id": 4146, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nst = h1 * 60 + m1\ned = h2 * 60 + m2\nans = ed - st - k\nif ans < 0:\n    ans = 0\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", ">"]}, "4147": {"id": 4147, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nst = h1 * 60 + m1\ned = h2 * 60 + m2\nans = ed - st - k\nif ans < 0:\n    ans = 0\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", ">"]}, "4148": {"id": 4148, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nM3 = (H2 * 60 + M2) - (H1 * 60 + M1)\nT = M3 - K\nprint(T)", "coverage": [">", ">", ">", ">"]}, "4149": {"id": 4149, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nM3 = (H2 * 60 + M2) - (H1 * 60 + M1)\nT = M3 - K\nprint(T)", "coverage": [">", ">", ">", ">"]}, "4150": {"id": 4150, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nimport math\ntime1=H1*60+M1\ntime2=H2*60+M2\na=time2-K\nif a<=0:\n    print(0)\n    exit()\nif time1<=a:\n    print(a-time1)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!"]}, "4151": {"id": 4151, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nimport math\ntime1=H1*60+M1\ntime2=H2*60+M2\na=time2-K\nif a<=0:\n    print(0)\n    exit()\nif time1<=a:\n    print(a-time1)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!"]}, "4152": {"id": 4152, "code": "import sys\ninput=sys.stdin.readline\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nh1=h1*60\nh2=h2*60\nm1+=h1\nm2+=h2\nprint(m2-m1-k)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "4153": {"id": 4153, "code": "import sys\ninput=sys.stdin.readline\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nh1=h1*60\nh2=h2*60\nm1+=h1\nm2+=h2\nprint(m2-m1-k)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "4154": {"id": 4154, "code": "from datetime import datetime\nH1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nt1=datetime(2020,5,30,H1,M1,0)\nt2=datetime(2020,5,30,H2,M2,0)\nd=t2-t1\nprint(d.seconds//60-K)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4155": {"id": 4155, "code": "from datetime import datetime\nH1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nt1=datetime(2020,5,30,H1,M1,0)\nt2=datetime(2020,5,30,H2,M2,0)\nd=t2-t1\nprint(d.seconds//60-K)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4156": {"id": 4156, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nans=0\nif m1>m2: ans=(h2-h1-1)*60+60-m1+m2\nelse: ans=(h2-h1)*60+m2-m1\nprint(ans-k)", "coverage": [">", ">", ">", ">", ">"]}, "4157": {"id": 4157, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nans=0\nif m1>m2: ans=(h2-h1-1)*60+60-m1+m2\nelse: ans=(h2-h1)*60+m2-m1\nprint(ans-k)", "coverage": [">", ">", ">", ">", ">"]}, "4158": {"id": 4158, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nhour = (h2 - h1) * 60\nminutes = m2 - m1\nprint(hour + minutes - k)", "coverage": [">", ">", ">", ">"]}, "4159": {"id": 4159, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nhour = (h2 - h1) * 60\nminutes = m2 - m1\nprint(hour + minutes - k)", "coverage": [">", ">", ">", ">"]}, "4160": {"id": 4160, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nprint((H2-H1)*60 + (M2-M1) - K)", "coverage": [">", ">"]}, "4161": {"id": 4161, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nprint((H2-H1)*60 + (M2-M1) - K)", "coverage": [">", ">"]}, "4162": {"id": 4162, "code": "from datetime import datetime\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nt1 = datetime(2000, 1, 1, h1, m1, 0)\nt2 = datetime(2000, 1, 1, h2, m2, 0)\nt = (t2 - t1).seconds // 60\nans = t - k\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4163": {"id": 4163, "code": "from datetime import datetime\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nt1 = datetime(2000, 1, 1, h1, m1, 0)\nt2 = datetime(2000, 1, 1, h2, m2, 0)\nt = (t2 - t1).seconds // 60\nans = t - k\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4164": {"id": 4164, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;K = 30\nH=h2-h1\nM=m2-m1\nif(M<0):\n  M += 60\n  H -= 1\nif(H<0):\n  H += 24\nM += H*60\nans =M - K\nprint(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", ">", ">", ">"]}, "4165": {"id": 4165, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;K = 120\nH=h2-h1\nM=m2-m1\nif(M<0):\n  M += 60\n  H -= 1\nif(H<0):\n  H += 24\nM += H*60\nans =M - K\nprint(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", ">", ">", ">"]}, "4166": {"id": 4166, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nprint((H2-H1)*60+(M2-M1)-K if (M2-M1) >= 0 else (H2-H1)*60+(M2-M1)-K)", "coverage": [">", ">"]}, "4167": {"id": 4167, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nprint((H2-H1)*60+(M2-M1)-K if (M2-M1) >= 0 else (H2-H1)*60+(M2-M1)-K)", "coverage": [">", ">"]}, "4168": {"id": 4168, "code": "a = 10;b = 0;c = 15;d = 0;k = 30\nx = 60*a + b\ny = 60*c + d\nif y>x:\n    print(y-x-k);\nelse:\n    print(1440+y-x-k);", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "4169": {"id": 4169, "code": "a = 10;b = 0;c = 12;d = 0;k = 120\nx = 60*a + b\ny = 60*c + d\nif y>x:\n    print(y-x-k);\nelse:\n    print(1440+y-x-k);", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "4170": {"id": 4170, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\nprint(c * 60 + d - a * 60 - b - e)", "coverage": [">", ">"]}, "4171": {"id": 4171, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\nprint(c * 60 + d - a * 60 - b - e)", "coverage": [">", ">"]}, "4172": {"id": 4172, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\ns = -60*h1-m1+60*h2+m2\nprint(s-k)", "coverage": [">", ">", ">"]}, "4173": {"id": 4173, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\ns = -60*h1-m1+60*h2+m2\nprint(s-k)", "coverage": [">", ">", ">"]}, "4174": {"id": 4174, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\ns = h1 * 60 + m1\ne = h2 * 60 + m2\nprint(e - k - s)", "coverage": [">", ">", ">", ">"]}, "4175": {"id": 4175, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\ns = h1 * 60 + m1\ne = h2 * 60 + m2\nprint(e - k - s)", "coverage": [">", ">", ">", ">"]}, "4176": {"id": 4176, "code": "from datetime import datetime,timedelta\na = ['10', '0', '15', '0', '30']\na=[int(_) for _ in a]\nt1=datetime(2000,1,1,a[0],a[1],0)\nt2=datetime(2000,1,1,a[2],a[3],0)\ndelta=t2-t1\ntotal_seconds=delta.seconds\nans=(total_seconds-a[4]*60)/60\nprint(int(ans))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4177": {"id": 4177, "code": "from datetime import datetime,timedelta\na = ['10', '0', '12', '0', '120']\na=[int(_) for _ in a]\nt1=datetime(2000,1,1,a[0],a[1],0)\nt2=datetime(2000,1,1,a[2],a[3],0)\ndelta=t2-t1\ntotal_seconds=delta.seconds\nans=(total_seconds-a[4]*60)/60\nprint(int(ans))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4178": {"id": 4178, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nt1=h1*60+m1\nt2=h2*60+m2\nprint(max(t2-t1-k,0))", "coverage": [">", ">", ">", ">"]}, "4179": {"id": 4179, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nt1=h1*60+m1\nt2=h2*60+m2\nprint(max(t2-t1-k,0))", "coverage": [">", ">", ">", ">"]}, "4180": {"id": 4180, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nd = (h2 - h1) * 60 + (m2 - m1)\nprint(max(d - k, 0))", "coverage": [">", ">", ">"]}, "4181": {"id": 4181, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nd = (h2 - h1) * 60 + (m2 - m1)\nprint(max(d - k, 0))", "coverage": [">", ">", ">"]}, "4182": {"id": 4182, "code": "h = 10;m = 0;H = 15;M = 0;K = 30\nprint(max(0,(H-h)*60+M-m -K))", "coverage": [">", ">"]}, "4183": {"id": 4183, "code": "h = 10;m = 0;H = 12;M = 0;K = 120\nprint(max(0,(H-h)*60+M-m -K))", "coverage": [">", ">"]}, "4184": {"id": 4184, "code": "HM = [10, 0, 15, 0, 30]\nhours = HM[2]-HM[0]\nminutes = HM[3]-HM[1]\nK = HM[4]\ntotalTimes = hours*60+minutes\nprint(totalTimes-K)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4185": {"id": 4185, "code": "HM = [10, 0, 12, 0, 120]\nhours = HM[2]-HM[0]\nminutes = HM[3]-HM[1]\nK = HM[4]\ntotalTimes = hours*60+minutes\nprint(totalTimes-K)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4186": {"id": 4186, "code": "string = \"10 0 15 0 30\"\nX = 0\nli = []\nfor a in range(len(string)):\n    if string[a] == \" \":\n        li.append(string[X:a])\n        X = a+1\nli.append(string[X:])\nfor aa in range(len(li)):\n    li[aa] = int(li[aa])\nh1 = li[0]\nm1 = li[1]\nh2 = li[2]\nm2 = li[3]\nk = li[4]\nTime = (h2 * 60 + m2) - (h1 * 60 + m1) - k\nprint(int(Time))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4187": {"id": 4187, "code": "string = \"10 0 12 0 120\"\nX = 0\nli = []\nfor a in range(len(string)):\n    if string[a] == \" \":\n        li.append(string[X:a])\n        X = a+1\nli.append(string[X:])\nfor aa in range(len(li)):\n    li[aa] = int(li[aa])\nh1 = li[0]\nm1 = li[1]\nh2 = li[2]\nm2 = li[3]\nk = li[4]\nTime = (h2 * 60 + m2) - (h1 * 60 + m1) - k\nprint(int(Time))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4188": {"id": 4188, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nt = (h2 - h1) * 60 + (m2 - m1)\nans = t - k\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "4189": {"id": 4189, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nt = (h2 - h1) * 60 + (m2 - m1)\nans = t - k\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "4190": {"id": 4190, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nh1 = 60*H1+M1\nh2 = 60*H2+M2\nd = h2-h1\nprint(d-K)", "coverage": [">", ">", ">", ">", ">"]}, "4191": {"id": 4191, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nh1 = 60*H1+M1\nh2 = 60*H2+M2\nd = h2-h1\nprint(d-K)", "coverage": [">", ">", ">", ">", ">"]}, "4192": {"id": 4192, "code": "import math\nimport re\nimport copy\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nw1 = h1*60 + m1\nw2 = h2 * 60 + m2\nw3 = (w2-w1+24*60)%(24*60)\nw3 = w3 - k\nprint(w3)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4193": {"id": 4193, "code": "import math\nimport re\nimport copy\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nw1 = h1*60 + m1\nw2 = h2 * 60 + m2\nw3 = (w2-w1+24*60)%(24*60)\nw3 = w3 - k\nprint(w3)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4194": {"id": 4194, "code": "s = [10, 0, 15, 0, 30]\nh = 60 * (s[2]-s[0])\nm = s[3] - s[1]\nk = s[4]\nprint(h+m-k)", "coverage": [">", ">", ">", ">", ">"]}, "4195": {"id": 4195, "code": "s = [10, 0, 12, 0, 120]\nh = 60 * (s[2]-s[0])\nm = s[3] - s[1]\nk = s[4]\nprint(h+m-k)", "coverage": [">", ">", ">", ">", ">"]}, "4196": {"id": 4196, "code": "import sys\ninput = \"<function <lambda>>\"\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nm = 60 - m1\nh1 += 1\nm += (h2 - h1)*60 + m2\nprint(max(0, m - k))", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4197": {"id": 4197, "code": "import sys\ninput = \"<function <lambda>>\"\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nm = 60 - m1\nh1 += 1\nm += (h2 - h1)*60 + m2\nprint(max(0, m - k))", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4198": {"id": 4198, "code": "def main() -> None:\n    h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\n    if h1 > h2:\n        h2 += 24\n    length = (h2*60+m2) - (h1*60+m1)\n    print(max(0, length - k))\n    return\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">"]}, "4199": {"id": 4199, "code": "def main() -> None:\n    h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\n    if h1 > h2:\n        h2 += 24\n    length = (h2*60+m2) - (h1*60+m1)\n    print(max(0, length - k))\n    return\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">"]}, "4200": {"id": 4200, "code": "a = [10, 0, 15, 0, 30]\nprint((a[2]*60+a[3])-(a[0]*60+a[1])-a[4])", "coverage": [">", ">"]}, "4201": {"id": 4201, "code": "a = [10, 0, 12, 0, 120]\nprint((a[2]*60+a[3])-(a[0]*60+a[1])-a[4])", "coverage": [">", ">"]}, "4202": {"id": 4202, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nif(M2 < M1):\n    m = 60-(M1-M2)\n    print((H2-H1-1)*60+m-K)\nelse:\n    print((H2-H1)*60+(M2-M1)-K)", "coverage": [">", ">", "!", "!", "!", ">"]}, "4203": {"id": 4203, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nif(M2 < M1):\n    m = 60-(M1-M2)\n    print((H2-H1-1)*60+m-K)\nelse:\n    print((H2-H1)*60+(M2-M1)-K)", "coverage": [">", ">", "!", "!", "!", ">"]}, "4204": {"id": 4204, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\ntimeW = M1 + H1 * 60\ntimeS = M2 + H2 * 60\nprint(timeS - timeW - K)", "coverage": [">", ">", ">", ">"]}, "4205": {"id": 4205, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\ntimeW = M1 + H1 * 60\ntimeS = M2 + H2 * 60\nprint(timeS - timeW - K)", "coverage": [">", ">", ">", ">"]}, "4206": {"id": 4206, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nr = (H2*60+M2)-(H1*60+M1)-K\nprint(r)", "coverage": [">", ">", ">"]}, "4207": {"id": 4207, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nr = (H2*60+M2)-(H1*60+M1)-K\nprint(r)", "coverage": [">", ">", ">"]}, "4208": {"id": 4208, "code": "H_1 = 10;M_1 = 0;H_2 = 15;M_2 = 0;K = 30\nprint((H_2-H_1)*60+(M_2-M_1)-K)", "coverage": [">", ">"]}, "4209": {"id": 4209, "code": "H_1 = 10;M_1 = 0;H_2 = 12;M_2 = 0;K = 120\nprint((H_2-H_1)*60+(M_2-M_1)-K)", "coverage": [">", ">"]}, "4210": {"id": 4210, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nh = 0\nm = m2 - m1\nif m < 0:\n    m += 60\n    h -= 1\nh = h2 - h1 + h\nprint((h * 60) + m - k)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "4211": {"id": 4211, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nh = 0\nm = m2 - m1\nif m < 0:\n    m += 60\n    h -= 1\nh = h2 - h1 + h\nprint((h * 60) + m - k)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "4212": {"id": 4212, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\n    ans = max((H2 * 60 + M2) - (H1 * 60 + M1) - K, 0)\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">"]}, "4213": {"id": 4213, "code": "def main():\n    H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\n    ans = max((H2 * 60 + M2) - (H1 * 60 + M1) - K, 0)\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">"]}, "4214": {"id": 4214, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nans = H2 * 60 + M2 - H1 * 60 - M1\nif ans <= 0:\n  ans += 24 * 60\nprint(ans - K)", "coverage": [">", ">", ">", "!", ">"]}, "4215": {"id": 4215, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nans = H2 * 60 + M2 - H1 * 60 - M1\nif ans <= 0:\n  ans += 24 * 60\nprint(ans - K)", "coverage": [">", ">", ">", "!", ">"]}, "4216": {"id": 4216, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\ns = H1*60 + M1\ne = H2*60 + M2\nprint(e - K - s)", "coverage": [">", ">", ">", ">"]}, "4217": {"id": 4217, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\ns = H1*60 + M1\ne = H2*60 + M2\nprint(e - K - s)", "coverage": [">", ">", ">", ">"]}, "4218": {"id": 4218, "code": "chr = ['10', '0', '15', '0', '30']\na = (int(chr[2]) - int(chr[0]))*60 + (int(chr[3]) - int(chr[1])) - int(chr[-1])\nprint(a)", "coverage": [">", ">", ">"]}, "4219": {"id": 4219, "code": "chr = ['10', '0', '12', '0', '120']\na = (int(chr[2]) - int(chr[0]))*60 + (int(chr[3]) - int(chr[1])) - int(chr[-1])\nprint(a)", "coverage": [">", ">", ">"]}, "4220": {"id": 4220, "code": "ip = [10, 0, 15, 0, 30]\nh = ip[2] - ip[0]\nm = ip[3] - ip[1]\ntotal = (h * 60) + m - ip[4]\nif total >= 0:\n    print(str(total))\nelse:\n    print(str(0))", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "4221": {"id": 4221, "code": "ip = [10, 0, 12, 0, 120]\nh = ip[2] - ip[0]\nm = ip[3] - ip[1]\ntotal = (h * 60) + m - ip[4]\nif total >= 0:\n    print(str(total))\nelse:\n    print(str(0))", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "4222": {"id": 4222, "code": "h = 10;m = 0;H = 15;M = 0;K = 30\npre=60*h+m\npost=60*H+M\nprint(post-pre-K)", "coverage": [">", ">", ">", ">"]}, "4223": {"id": 4223, "code": "h = 10;m = 0;H = 12;M = 0;K = 120\npre=60*h+m\npost=60*H+M\nprint(post-pre-K)", "coverage": [">", ">", ">", ">"]}, "4224": {"id": 4224, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nx1 = h1 * 60 + m1\nx2 = h2 * 60 + m2\nprint(x2 - x1 - k)", "coverage": [">", ">", ">", ">"]}, "4225": {"id": 4225, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nx1 = h1 * 60 + m1\nx2 = h2 * 60 + m2\nprint(x2 - x1 - k)", "coverage": [">", ">", ">", ">"]}, "4226": {"id": 4226, "code": "import sys\ndef input(): return \"10 0 15 0 30\".strip()\ndef mapint(): return map(int, input().split())\nsys.setrecursionlimit(10**9)\nH1, M1, H2, M2, K = mapint()\nif M2>=M1:\n    minutes = (H2-H1)*60\n    minutes += M2-M1\nelse:\n    minutes = (H2-H1-1)*60\n    minutes += M2-M1+60\nprint(max(0, minutes-K))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "4227": {"id": 4227, "code": "import sys\ndef input(): return \"10 0 12 0 120\".strip()\ndef mapint(): return map(int, input().split())\nsys.setrecursionlimit(10**9)\nH1, M1, H2, M2, K = mapint()\nif M2>=M1:\n    minutes = (H2-H1)*60\n    minutes += M2-M1\nelse:\n    minutes = (H2-H1-1)*60\n    minutes += M2-M1+60\nprint(max(0, minutes-K))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "4228": {"id": 4228, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nt1 = h1 * 60 + m1\nt2 = h2 * 60 + m2\nprint(t2 - t1 - k)", "coverage": [">", ">", ">", ">"]}, "4229": {"id": 4229, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nt1 = h1 * 60 + m1\nt2 = h2 * 60 + m2\nprint(t2 - t1 - k)", "coverage": [">", ">", ">", ">"]}, "4230": {"id": 4230, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\nz = (c-a)*60 + (d-b)- e\nprint(z)", "coverage": [">", ">", ">"]}, "4231": {"id": 4231, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\nz = (c-a)*60 + (d-b)- e\nprint(z)", "coverage": [">", ">", ">"]}, "4232": {"id": 4232, "code": "h = [10, 0, 15, 0, 30]\nm = 0\nm += 60 - h[1]\nif m != 0: h[0] += 1\nm += h[3] + (h[2]-h[0]) * 60\nprint(m-h[-1])", "coverage": [">", ">", ">", ">", ">", ">"]}, "4233": {"id": 4233, "code": "h = [10, 0, 12, 0, 120]\nm = 0\nm += 60 - h[1]\nif m != 0: h[0] += 1\nm += h[3] + (h[2]-h[0]) * 60\nprint(m-h[-1])", "coverage": [">", ">", ">", ">", ">", ">"]}, "4234": {"id": 4234, "code": "h = [10, 0, 15, 0, 30]\nif h[1] < h[3]:\n    print((h[2]-h[0])*60+h[3]-h[1]-h[4])\nelse:\n    print((h[2]-h[0]-1)*60+60-h[1]+h[3]-h[4])", "coverage": [">", ">", "!", "!", ">"]}, "4235": {"id": 4235, "code": "h = [10, 0, 12, 0, 120]\nif h[1] < h[3]:\n    print((h[2]-h[0])*60+h[3]-h[1]-h[4])\nelse:\n    print((h[2]-h[0]-1)*60+60-h[1]+h[3]-h[4])", "coverage": [">", ">", "!", "!", ">"]}, "4236": {"id": 4236, "code": "def main():\n    h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\n    x = 60 * h1 + m1\n    y = 60 * h2 + m2 - k\n    print(max(0, y - x))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4237": {"id": 4237, "code": "def main():\n    h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\n    x = 60 * h1 + m1\n    y = 60 * h2 + m2 - k\n    print(max(0, y - x))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4238": {"id": 4238, "code": "input_str = ['10', '0', '15', '0', '30']\ninput_nums=[]\nfor i in range(5):\n    input_nums.append(int(input_str[i]))\ndiff_hour = input_nums[2] - input_nums[0]\ndiff_hour_to_min = diff_hour * 60\ndiff_min = input_nums[3] - input_nums[1]\ntotal_wake_min = diff_hour_to_min + diff_min\nprint(total_wake_min - input_nums[4])", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4239": {"id": 4239, "code": "input_str = ['10', '0', '12', '0', '120']\ninput_nums=[]\nfor i in range(5):\n    input_nums.append(int(input_str[i]))\ndiff_hour = input_nums[2] - input_nums[0]\ndiff_hour_to_min = diff_hour * 60\ndiff_min = input_nums[3] - input_nums[1]\ntotal_wake_min = diff_hour_to_min + diff_min\nprint(total_wake_min - input_nums[4])", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4240": {"id": 4240, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nA = (H1 * 60) + M1\nB = (H2 * 60) + M2\nC = B - A\nprint(C-K)", "coverage": [">", ">", ">", ">", ">"]}, "4241": {"id": 4241, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nA = (H1 * 60) + M1\nB = (H2 * 60) + M2\nC = B - A\nprint(C-K)", "coverage": [">", ">", ">", ">", ">"]}, "4242": {"id": 4242, "code": "import math\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nstart=60*h1+m1\nend=60*h2+m2\nprint(end-start-k)", "coverage": [">", ">", ">", ">", ">"]}, "4243": {"id": 4243, "code": "import math\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nstart=60*h1+m1\nend=60*h2+m2\nprint(end-start-k)", "coverage": [">", ">", ">", ">", ">"]}, "4244": {"id": 4244, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\nf=60*c+d-60*a-b-e\nprint(f)", "coverage": [">", ">", ">"]}, "4245": {"id": 4245, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\nf=60*c+d-60*a-b-e\nprint(f)", "coverage": [">", ">", ">"]}, "4246": {"id": 4246, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\na = 60*H1 + M1\nb = 60*H2 + M2\nprint(b - a - K)", "coverage": [">", ">", ">", ">"]}, "4247": {"id": 4247, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\na = 60*H1 + M1\nb = 60*H2 + M2\nprint(b - a - K)", "coverage": [">", ">", ">", ">"]}, "4248": {"id": 4248, "code": "wake_h = 10;wake_m = 0;sleep_h = 15;sleep_m = 0;k = 30\nwake_m_all = wake_h * 60 + wake_m\nsleep_m_all = sleep_h * 60 + sleep_m\nsleep_m_all -= k\nprint(sleep_m_all - wake_m_all)", "coverage": [">", ">", ">", ">", ">"]}, "4249": {"id": 4249, "code": "wake_h = 10;wake_m = 0;sleep_h = 12;sleep_m = 0;k = 120\nwake_m_all = wake_h * 60 + wake_m\nsleep_m_all = sleep_h * 60 + sleep_m\nsleep_m_all -= k\nprint(sleep_m_all - wake_m_all)", "coverage": [">", ">", ">", ">", ">"]}, "4250": {"id": 4250, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nstart = H1*60 + M1\nfinish = H2*60 + M2 - K\nif finish - start >= 0:\n  print(finish - start)\nelse:\n  print(0)", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "4251": {"id": 4251, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nstart = H1*60 + M1\nfinish = H2*60 + M2 - K\nif finish - start >= 0:\n  print(finish - start)\nelse:\n  print(0)", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "4252": {"id": 4252, "code": "def solve():\n    h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\n    period = (h2-h1)*60 + (m2-m1)\n    return period - k\ndef main():\n    print(solve())\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "4253": {"id": 4253, "code": "def solve():\n    h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\n    period = (h2-h1)*60 + (m2-m1)\n    return period - k\ndef main():\n    print(solve())\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "4254": {"id": 4254, "code": "Hs = 10;Ms = 0;He = 15;Me = 0;K = 30\nprint(str((He-Hs)*60+Me-Ms-K))", "coverage": [">", ">"]}, "4255": {"id": 4255, "code": "Hs = 10;Ms = 0;He = 12;Me = 0;K = 120\nprint(str((He-Hs)*60+Me-Ms-K))", "coverage": [">", ">"]}, "4256": {"id": 4256, "code": "def submit():\n    h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\n    time1 = h1 * 60 + m1\n    time2 = h2 * 60 + m2\n    if time1 > time2:\n        time2 += 24 * 60\n    print(time2 - time1 - k)\nsubmit()", "coverage": [">", ">", ">", ">", ">", "!", ">", ">"]}, "4257": {"id": 4257, "code": "def submit():\n    h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\n    time1 = h1 * 60 + m1\n    time2 = h2 * 60 + m2\n    if time1 > time2:\n        time2 += 24 * 60\n    print(time2 - time1 - k)\nsubmit()", "coverage": [">", ">", ">", ">", ">", "!", ">", ">"]}, "4258": {"id": 4258, "code": "h = [10, 0, 15, 0, 30]\ntmp1 = h[0] * 60 + h[1]\ntmp2 = h[2] * 60 + h[3]\nans = tmp2 - tmp1\nprint(ans - h[4])", "coverage": [">", ">", ">", ">", ">"]}, "4259": {"id": 4259, "code": "h = [10, 0, 12, 0, 120]\ntmp1 = h[0] * 60 + h[1]\ntmp2 = h[2] * 60 + h[3]\nans = tmp2 - tmp1\nprint(ans - h[4])", "coverage": [">", ">", ">", ">", ">"]}, "4260": {"id": 4260, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nh_m = (h2 - h1)*60\nm = m2 - m1\ntz = h_m + m\nprint(tz-k)", "coverage": [">", ">", ">", ">", ">"]}, "4261": {"id": 4261, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nh_m = (h2 - h1)*60\nm = m2 - m1\ntz = h_m + m\nprint(tz-k)", "coverage": [">", ">", ">", ">", ">"]}, "4262": {"id": 4262, "code": "H_1 = 10;M_1 = 0;H_2 = 15;M_2 = 0;K = 30\ntime =(H_2 * 60 + M_2)-(H_1 * 60 + M_1)\nif time <= K:\n    print(0)\n    exit(0)\nelse :\n    print(time-K)", "coverage": [">", ">", ">", "!", "!", "!", ">"]}, "4263": {"id": 4263, "code": "if __name__ == '__main__':\n    a = [10, 0, 15, 0, 30]\n    print(a[2]*60 + a[3] -a[0]*60 - a[1] -a[4] )", "coverage": [">", ">", ">"]}, "4264": {"id": 4264, "code": "if __name__ == '__main__':\n    a = [10, 0, 12, 0, 120]\n    print(a[2]*60 + a[3] -a[0]*60 - a[1] -a[4] )", "coverage": [">", ">", ">"]}, "4265": {"id": 4265, "code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\ndef main():\n    h1 = 10;m1 = 0;h2 = 15;m2 = 0;K = 30\n    wakeup = h1 * 60 + m1\n    sleep = h2 * 60 + m2\n    ans = sleep - K - wakeup\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4266": {"id": 4266, "code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\ndef main():\n    h1 = 10;m1 = 0;h2 = 12;m2 = 0;K = 120\n    wakeup = h1 * 60 + m1\n    sleep = h2 * 60 + m2\n    ans = sleep - K - wakeup\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4267": {"id": 4267, "code": "A = 10;B = 0;C = 15;D = 0;E = 30\nL = (C - A) * 60 + (D - B)\nprint(L - E)", "coverage": [">", ">", ">"]}, "4268": {"id": 4268, "code": "A = 10;B = 0;C = 12;D = 0;E = 120\nL = (C - A) * 60 + (D - B)\nprint(L - E)", "coverage": [">", ">", ">"]}, "4269": {"id": 4269, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;K = 30\ndiff = (h2-h1) * 60 + m2-m1\nprint(diff - K)", "coverage": [">", ">", ">"]}, "4270": {"id": 4270, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;K = 120\ndiff = (h2-h1) * 60 + m2-m1\nprint(diff - K)", "coverage": [">", ">", ">"]}, "4271": {"id": 4271, "code": "x = [10, 0, 15, 0, 30]\nh1 = x[0]\nm1 = x[1]\nh2 = x[2]\nm2 = x[3]\ns = x[4]\nh = (h2-h1)*60\nm = m2-m1\nprint((h+m)-s)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4272": {"id": 4272, "code": "x = [10, 0, 12, 0, 120]\nh1 = x[0]\nm1 = x[1]\nh2 = x[2]\nm2 = x[3]\ns = x[4]\nh = (h2-h1)*60\nm = m2-m1\nprint((h+m)-s)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4273": {"id": 4273, "code": "start_hour = 10;start_min = 0;end_hour = 15;end_min = 0;study_min = 30\nday_time = (end_hour * 60 + end_min) - (start_hour*60 + start_min)\nable_time = day_time - study_min\nprint(able_time)", "coverage": [">", ">", ">", ">"]}, "4274": {"id": 4274, "code": "start_hour = 10;start_min = 0;end_hour = 12;end_min = 0;study_min = 120\nday_time = (end_hour * 60 + end_min) - (start_hour*60 + start_min)\nable_time = day_time - study_min\nprint(able_time)", "coverage": [">", ">", ">", ">"]}, "4275": {"id": 4275, "code": "h = 10;m = 0;hh = 15;mm = 0;k = 30\nx = hh*60-h*60+mm-m\nprint(x-k)", "coverage": [">", ">", ">"]}, "4276": {"id": 4276, "code": "h = 10;m = 0;hh = 12;mm = 0;k = 120\nx = hh*60-h*60+mm-m\nprint(x-k)", "coverage": [">", ">", ">"]}, "4277": {"id": 4277, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nT = (H2 - H1) * 60 + (M2 - M1)\nprint(T - K)", "coverage": [">", ">", ">"]}, "4278": {"id": 4278, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nT = (H2 - H1) * 60 + (M2 - M1)\nprint(T - K)", "coverage": [">", ">", ">"]}, "4279": {"id": 4279, "code": "h_1 = 10;m_1 = 0;h_2 = 15;m_2 = 0;k = 30\nminute_1 = h_1*60 + m_1\nminute_2 = h_2*60 + m_2\nans = minute_2 - k - minute_1\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4280": {"id": 4280, "code": "h_1 = 10;m_1 = 0;h_2 = 12;m_2 = 0;k = 120\nminute_1 = h_1*60 + m_1\nminute_2 = h_2*60 + m_2\nans = minute_2 - k - minute_1\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4281": {"id": 4281, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nif h1>h2:\n    h2+=24\np=(h2-h1)*60+(m2-m1)\nprint(p-k)", "coverage": [">", ">", "!", ">", ">"]}, "4282": {"id": 4282, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nif h1>h2:\n    h2+=24\np=(h2-h1)*60+(m2-m1)\nprint(p-k)", "coverage": [">", ">", "!", ">", ">"]}, "4283": {"id": 4283, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nhk = K//60\nmk = K%60\nans = (H2 - hk)*60 + (M2 - mk) - (H1*60 + M1)\nprint(max(ans, 0))", "coverage": [">", ">", ">", ">", ">"]}, "4284": {"id": 4284, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nhk = K//60\nmk = K%60\nans = (H2 - hk)*60 + (M2 - mk) - (H1*60 + M1)\nprint(max(ans, 0))", "coverage": [">", ">", ">", ">", ">"]}, "4285": {"id": 4285, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\ntime1 = H1 * 60 + M1\ntime2 = H2 * 60 + M2\nprint(max(0, time2 - time1 - K))", "coverage": [">", ">", ">", ">"]}, "4286": {"id": 4286, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\ntime1 = H1 * 60 + M1\ntime2 = H2 * 60 + M2\nprint(max(0, time2 - time1 - K))", "coverage": [">", ">", ">", ">"]}, "4287": {"id": 4287, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nfin = h2 * 60 + m2\nst = h1 * 60 + m1\nans = fin - st - k \nprint(max(0,ans))", "coverage": [">", ">", ">", ">", ">"]}, "4288": {"id": 4288, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nfin = h2 * 60 + m2\nst = h1 * 60 + m1\nans = fin - st - k \nprint(max(0,ans))", "coverage": [">", ">", ">", ">", ">"]}, "4289": {"id": 4289, "code": "h1 = \"10\";m1 = \"0\";h2 = \"15\";m2 = \"0\";k = \"30\"\nh1 = int(h1)\nm1 = int(m1)\nh2 = int(h2)\nm2 = int(m2)\nk = int(k)\nif h1 > h2:\n  h2 += 24\nh = h2 - h1\nhm = h * 60\nprint(hm - m1 + m2 - k)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"]}, "4290": {"id": 4290, "code": "h1 = \"10\";m1 = \"0\";h2 = \"12\";m2 = \"0\";k = \"120\"\nh1 = int(h1)\nm1 = int(m1)\nh2 = int(h2)\nm2 = int(m2)\nk = int(k)\nif h1 > h2:\n  h2 += 24\nh = h2 - h1\nhm = h * 60\nprint(hm - m1 + m2 - k)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"]}, "4291": {"id": 4291, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\nx=a*60+b\ny=c*60+d\nprint(y-x-e)", "coverage": [">", ">", ">", ">"]}, "4292": {"id": 4292, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\nx=a*60+b\ny=c*60+d\nprint(y-x-e)", "coverage": [">", ">", ">", ">"]}, "4293": {"id": 4293, "code": "H_1 = 10;M_1 = 0;H_2 = 15;M_2 = 0;K = 30\ntime_1 = H_1*60+M_1\ntime_2 = H_2*60+M_2\nprint(time_2-time_1-K)", "coverage": [">", ">", ">", ">"]}, "4294": {"id": 4294, "code": "H_1 = 10;M_1 = 0;H_2 = 12;M_2 = 0;K = 120\ntime_1 = H_1*60+M_1\ntime_2 = H_2*60+M_2\nprint(time_2-time_1-K)", "coverage": [">", ">", ">", ">"]}, "4295": {"id": 4295, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\na1 = h1*60+m1\na2 = h2*60+m2\nprint(a2-a1-k)", "coverage": [">", ">", ">", ">"]}, "4296": {"id": 4296, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\na1 = h1*60+m1\na2 = h2*60+m2\nprint(a2-a1-k)", "coverage": [">", ">", ">", ">"]}, "4297": {"id": 4297, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nh = h2 -h1\nm = m2 - m1\nprint(h*60+m-k)", "coverage": [">", ">", ">", ">"]}, "4298": {"id": 4298, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nh = h2 -h1\nm = m2 - m1\nprint(h*60+m-k)", "coverage": [">", ">", ">", ">"]}, "4299": {"id": 4299, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nT1 = H1 * 60 + M1\nT2 = H2 * 60 + M2\nif T2 < T1:\n  T2 = T2 + 24 * 60\nprint(T2-T1-K)", "coverage": [">", ">", ">", ">", "!", ">"]}, "4300": {"id": 4300, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nT1 = H1 * 60 + M1\nT2 = H2 * 60 + M2\nif T2 < T1:\n  T2 = T2 + 24 * 60\nprint(T2-T1-K)", "coverage": [">", ">", ">", ">", "!", ">"]}, "4301": {"id": 4301, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nif h1 > h2:\n    h1 += 24\nact_time = (h2 * 60 + m2) - (h1 * 60 + m1)\nans = act_time - k\nprint(ans)", "coverage": [">", ">", "!", ">", ">", ">"]}, "4302": {"id": 4302, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nif h1 > h2:\n    h1 += 24\nact_time = (h2 * 60 + m2) - (h1 * 60 + m1)\nans = act_time - k\nprint(ans)", "coverage": [">", ">", "!", ">", ">", ">"]}, "4303": {"id": 4303, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nstart,end = 60*H1+M1,60*H2+M2\nprint(abs(start-end) - K) if end-K>0 else print(0)", "coverage": [">", ">", ">"]}, "4304": {"id": 4304, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nstart,end = 60*H1+M1,60*H2+M2\nprint(abs(start-end) - K) if end-K>0 else print(0)", "coverage": [">", ">", ">"]}, "4305": {"id": 4305, "code": "h = 10;m = 0;h2 = 15;m2 = 0;k = 30\ng = h2 * 60 + m2\ns = h * 60 + m\nans = g - k - s\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4306": {"id": 4306, "code": "h = 10;m = 0;h2 = 12;m2 = 0;k = 120\ng = h2 * 60 + m2\ns = h * 60 + m\nans = g - k - s\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4307": {"id": 4307, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nA1 = H1*60+M1\nA2 = H2*60+M2\nprint(max(0,A2-A1-K))", "coverage": [">", ">", ">", ">"]}, "4308": {"id": 4308, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nA1 = H1*60+M1\nA2 = H2*60+M2\nprint(max(0,A2-A1-K))", "coverage": [">", ">", ">", ">"]}, "4309": {"id": 4309, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nif m2-k < 0:\n    m2 = 60+(m2-k)\n    h2 -= 1\nelse :\n    m2 -= k\nminute1 = h1*60+m1\nminute2 = h2*60+m2\nprint(minute2-minute1)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "4310": {"id": 4310, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nif m2-k < 0:\n    m2 = 60+(m2-k)\n    h2 -= 1\nelse :\n    m2 -= k\nminute1 = h1*60+m1\nminute2 = h2*60+m2\nprint(minute2-minute1)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "4311": {"id": 4311, "code": "hour1 = 10;min1 = 0;hour2 = 15;min2 = 0;ben = 30\nans=(hour2-hour1)*60+min2-min1-ben\nprint(ans)", "coverage": [">", ">", ">"]}, "4312": {"id": 4312, "code": "hour1 = 10;min1 = 0;hour2 = 12;min2 = 0;ben = 120\nans=(hour2-hour1)*60+min2-min1-ben\nprint(ans)", "coverage": [">", ">", ">"]}, "4313": {"id": 4313, "code": "def main():\n    import sys\n    input = sys.stdin.readline\n    h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\n    h = (h2 - h1) * 60\n    m = m2 - m1\n    ans = h + m - k\n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4314": {"id": 4314, "code": "def main():\n    import sys\n    input = sys.stdin.readline\n    h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\n    h = (h2 - h1) * 60\n    m = m2 - m1\n    ans = h + m - k\n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "4315": {"id": 4315, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\nprint(c*60+d-a*60-b-e)", "coverage": [">", ">"]}, "4316": {"id": 4316, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\nprint(c*60+d-a*60-b-e)", "coverage": [">", ">"]}, "4317": {"id": 4317, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nprint(60*(h2-h1)+m2-m1-k)", "coverage": [">", ">"]}, "4318": {"id": 4318, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nprint(60*(h2-h1)+m2-m1-k)", "coverage": [">", ">"]}, "4319": {"id": 4319, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\na1 = 60*h1 + m1\na2 = 60*h2 + m2\nduration = abs(a2-a1)\nans = duration-k\nif ans > 0:\n    print(ans)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "4320": {"id": 4320, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\na1 = 60*h1 + m1\na2 = 60*h2 + m2\nduration = abs(a2-a1)\nans = duration-k\nif ans > 0:\n    print(ans)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "4321": {"id": 4321, "code": "h1 = 10;h2 = 0;h3 = 15;h4 = 0;k = 30\nh11 = h1 * 60 + h2\nh22 = h3 * 60 + h4\nprint(h22-h11-k)", "coverage": [">", ">", ">", ">"]}, "4322": {"id": 4322, "code": "h1 = 10;h2 = 0;h3 = 12;h4 = 0;k = 120\nh11 = h1 * 60 + h2\nh22 = h3 * 60 + h4\nprint(h22-h11-k)", "coverage": [">", ">", ">", ">"]}, "4323": {"id": 4323, "code": "a = 10;b = 0;c = 15;d = 0;k = 30\nA=60*a+b\nB=60*c+d\nprint(B-A-k)", "coverage": [">", ">", ">", ">"]}, "4324": {"id": 4324, "code": "a = 10;b = 0;c = 12;d = 0;k = 120\nA=60*a+b\nB=60*c+d\nprint(B-A-k)", "coverage": [">", ">", ">", ">"]}, "4325": {"id": 4325, "code": "m = [10, 0, 15, 0, 30]\nl = m[0]*60\nn = m[2]*60\ns = l + m[1]\nk = n + m[3]\na = k - s\nprint(a-m[4])", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4326": {"id": 4326, "code": "m = [10, 0, 12, 0, 120]\nl = m[0]*60\nn = m[2]*60\ns = l + m[1]\nk = n + m[3]\na = k - s\nprint(a-m[4])", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4327": {"id": 4327, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nif m1 <= m2:\n    h = h2 - h1\n    m = m2 - m1\nelse:\n    h = h2 - h1 - 1\n    m = m2 - m1 + 60\nm += 60 * h\nprint(m - k)", "coverage": [">", ">", ">", ">", "!", "!", "!", ">", ">"]}, "4328": {"id": 4328, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nif m1 <= m2:\n    h = h2 - h1\n    m = m2 - m1\nelse:\n    h = h2 - h1 - 1\n    m = m2 - m1 + 60\nm += 60 * h\nprint(m - k)", "coverage": [">", ">", ">", ">", "!", "!", "!", ">", ">"]}, "4329": {"id": 4329, "code": "a = 10;b = 0;c = 15;d = 0;k = 30\nx = 60*a + b\ny = 60*c + d\nprint(y-x-k);", "coverage": [">", ">", ">", ">"]}, "4330": {"id": 4330, "code": "a = 10;b = 0;c = 12;d = 0;k = 120\nx = 60*a + b\ny = 60*c + d\nprint(y-x-k);", "coverage": [">", ">", ">", ">"]}, "4331": {"id": 4331, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nt = 0\nif h1 == h2:\n    t = m2 - m1\nelse:\n    if m2 >= m1:\n        t = (h2 - h1) * 60 + m2 - m1\n    else:\n        t = (h2 - h1 -1) * 60 + m2 +60 - m1\nprint(t - k)", "coverage": [">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "4332": {"id": 4332, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nt = 0\nif h1 == h2:\n    t = m2 - m1\nelse:\n    if m2 >= m1:\n        t = (h2 - h1) * 60 + m2 - m1\n    else:\n        t = (h2 - h1 -1) * 60 + m2 +60 - m1\nprint(t - k)", "coverage": [">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "4333": {"id": 4333, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nT1=H1*60+M1\nT2=H2*60+M2\nprint(max(T2-T1-K,0))", "coverage": [">", ">", ">", ">"]}, "4334": {"id": 4334, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nT1=H1*60+M1\nT2=H2*60+M2\nprint(max(T2-T1-K,0))", "coverage": [">", ">", ">", ">"]}, "4335": {"id": 4335, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nTIME = (H2-H1)*60\nTIME = TIME+(M2-M1)\nprint(TIME-K)", "coverage": [">", ">", ">", ">"]}, "4336": {"id": 4336, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nTIME = (H2-H1)*60\nTIME = TIME+(M2-M1)\nprint(TIME-K)", "coverage": [">", ">", ">", ">"]}, "4337": {"id": 4337, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nt=(h2-h1)*60+m2-m1-k\nprint(t if t>=0 else 0)", "coverage": [">", ">", ">"]}, "4338": {"id": 4338, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nt=(h2-h1)*60+m2-m1-k\nprint(t if t>=0 else 0)", "coverage": [">", ">", ">"]}, "4339": {"id": 4339, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nif m2 < m1:\n    while m2 < m1:\n        h2 -= 1\n        m2 += 60\ntm = m2 - m1\nth = h2 - h1\nif k > (th*60 + tm):\n    print (0)\nelse:\n    print(th*60 + tm - k)", "coverage": [">", ">", "!", "!", "!", ">", ">", ">", "!", "!", ">"]}, "4340": {"id": 4340, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nif m2 < m1:\n    while m2 < m1:\n        h2 -= 1\n        m2 += 60\ntm = m2 - m1\nth = h2 - h1\nif k > (th*60 + tm):\n    print (0)\nelse:\n    print(th*60 + tm - k)", "coverage": [">", ">", "!", "!", "!", ">", ">", ">", "!", "!", ">"]}, "4341": {"id": 4341, "code": "a = [10, 0, 15, 0, 30]\nh=a[2]-a[0]\nm=a[3]-a[1]\nmt=h*60+m\nprint(mt-a[4])", "coverage": [">", ">", ">", ">", ">"]}, "4342": {"id": 4342, "code": "a = [10, 0, 12, 0, 120]\nh=a[2]-a[0]\nm=a[3]-a[1]\nmt=h*60+m\nprint(mt-a[4])", "coverage": [">", ">", ">", ">", ">"]}, "4343": {"id": 4343, "code": "import sys\ninput = sys.stdin.readline\nfrom collections import *\nH1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nprint(60*H2+M2-(60*H1+M1)-K)", "coverage": [">", ">", ">", ">", ">"]}, "4344": {"id": 4344, "code": "import sys\ninput = sys.stdin.readline\nfrom collections import *\nH1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nprint(60*H2+M2-(60*H1+M1)-K)", "coverage": [">", ">", ">", ">", ">"]}, "4345": {"id": 4345, "code": "t = [10, 0, 15, 0, 30]\nm = (t[2] - t[0]) * 60 + (t[3] - t[1])\nprint(m - t[4])", "coverage": [">", ">", ">"]}, "4346": {"id": 4346, "code": "t = [10, 0, 12, 0, 120]\nm = (t[2] - t[0]) * 60 + (t[3] - t[1])\nprint(m - t[4])", "coverage": [">", ">", ">"]}, "4347": {"id": 4347, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nr=((h2-h1)*60)+m2-m1-k\nif r>=0:\n  print(r)\nelse:\n  print(0)", "coverage": [">", ">", ">", ">", "!", "!"]}, "4348": {"id": 4348, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nr=((h2-h1)*60)+m2-m1-k\nif r>=0:\n  print(r)\nelse:\n  print(0)", "coverage": [">", ">", ">", ">", "!", "!"]}, "4349": {"id": 4349, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nif H2 < H1:\n    H2 = H2 + 24\nif H1 == H2 and H2 < H1:\n    H2 = H2 + 24\ntime2m = H2 * 60 + M2\ntime1m = H1 * 60 + M1\nstudy_time = time2m - K - time1m\nif study_time <= 0:\n    print(0)\nelse:\n    print(study_time)", "coverage": [">", ">", "!", ">", "!", ">", ">", ">", ">", "!", "!", ">"]}, "4350": {"id": 4350, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nif H2 < H1:\n    H2 = H2 + 24\nif H1 == H2 and H2 < H1:\n    H2 = H2 + 24\ntime2m = H2 * 60 + M2\ntime1m = H1 * 60 + M1\nstudy_time = time2m - K - time1m\nif study_time <= 0:\n    print(0)\nelse:\n    print(study_time)", "coverage": [">", ">", "!", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "4351": {"id": 4351, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nH_min = (h2-h1)*60\nM_min = m2-m1\ntime = H_min + M_min\nans = time - k\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4352": {"id": 4352, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nH_min = (h2-h1)*60\nM_min = m2-m1\ntime = H_min + M_min\nans = time - k\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4353": {"id": 4353, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nh = H2 - H1\nm = M2 - M1\ns = 0\ns = h * 60 + m\ns = s - K\nprint(s)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4354": {"id": 4354, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nh = H2 - H1\nm = M2 - M1\ns = 0\ns = h * 60 + m\ns = s - K\nprint(s)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4355": {"id": 4355, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\ntime = (c * 60 + d) - (a * 60 + b)\ntime = time + 24 * 60 if time < 0 else time\nprint((60 * c + d) - (60 * a + b) - e)", "coverage": [">", ">", ">", ">"]}, "4356": {"id": 4356, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\ntime = (c * 60 + d) - (a * 60 + b)\ntime = time + 24 * 60 if time < 0 else time\nprint((60 * c + d) - (60 * a + b) - e)", "coverage": [">", ">", ">", ">"]}, "4357": {"id": 4357, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\ntime=abs(H2-H1)*60+(M2-M1)\nans=time-K\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "4358": {"id": 4358, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\ntime=abs(H2-H1)*60+(M2-M1)\nans=time-K\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "4359": {"id": 4359, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nh_dif = h2 - h1\nm_dif = m2 - m1\ntime = 60*h_dif + m_dif\nprint(time - k)", "coverage": [">", ">", ">", ">", ">"]}, "4360": {"id": 4360, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nh_dif = h2 - h1\nm_dif = m2 - m1\ntime = 60*h_dif + m_dif\nprint(time - k)", "coverage": [">", ">", ">", ">", ">"]}, "4361": {"id": 4361, "code": "from math import ceil, floor\nh1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\ndiff = (h2-h1)*60 + (m2-m1) \nprint('%d' % max(0, diff-k))", "coverage": [">", ">", ">", ">"]}, "4362": {"id": 4362, "code": "from math import ceil, floor\nh1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\ndiff = (h2-h1)*60 + (m2-m1) \nprint('%d' % max(0, diff-k))", "coverage": [">", ">", ">", ">"]}, "4363": {"id": 4363, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nawake = 60*h2+m2 - (60*h1+m1) - k\nprint(awake)", "coverage": [">", ">", ">"]}, "4364": {"id": 4364, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nawake = 60*h2+m2 - (60*h1+m1) - k\nprint(awake)", "coverage": [">", ">", ">"]}, "4365": {"id": 4365, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nh3=h1*60\nh4=h2*60\na=m1+h3\nb=m2+h4\nc=b-a\nif k>c:\n  print(0)\nelse:\n  print(c-k)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "4366": {"id": 4366, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nh3=h1*60\nh4=h2*60\na=m1+h3\nb=m2+h4\nc=b-a\nif k>c:\n  print(0)\nelse:\n  print(c-k)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "4367": {"id": 4367, "code": "list = ['10', '0', '15', '0', '30']\nm1 = int(list[0])*60 + int(list[1])\nm2 = int(list[2])*60 + int(list[3])\nans = m2 - m1\nprint(ans-int(list[4]))", "coverage": [">", ">", ">", ">", ">"]}, "4368": {"id": 4368, "code": "list = ['10', '0', '12', '0', '120']\nm1 = int(list[0])*60 + int(list[1])\nm2 = int(list[2])*60 + int(list[3])\nans = m2 - m1\nprint(ans-int(list[4]))", "coverage": [">", ">", ">", ">", ">"]}, "4369": {"id": 4369, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;t = 30\ns1 = h1 * 60 + m1\ns2 = h2 * 60 + m2\nans = s2 - s1 - t\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4370": {"id": 4370, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;t = 120\ns1 = h1 * 60 + m1\ns2 = h2 * 60 + m2\nans = s2 - s1 - t\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4371": {"id": 4371, "code": "input = [10, 0, 15, 0, 30]\nh1 = input[0]\nm1 = input[1]\nh2 = input[2]\nm2 = input[3]\nk = input[4]\nprint(h2*60+m2-h1*60-m1-k)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4372": {"id": 4372, "code": "input = [10, 0, 12, 0, 120]\nh1 = input[0]\nm1 = input[1]\nh2 = input[2]\nm2 = input[3]\nk = input[4]\nprint(h2*60+m2-h1*60-m1-k)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4373": {"id": 4373, "code": "x = 10;d = 0;y = 15;r = 0;k = 30\ns=x*60+d\nss=y*60+r\nprint(ss-s-k)", "coverage": [">", ">", ">", ">"]}, "4374": {"id": 4374, "code": "x = 10;d = 0;y = 12;r = 0;k = 120\ns=x*60+d\nss=y*60+r\nprint(ss-s-k)", "coverage": [">", ">", ">", ">"]}, "4375": {"id": 4375, "code": "a = [10, 0, 15, 0, 30]\nkishou = a[0] * 60 + a[1]\nshuusin = a[2] * 60 + a[3]\nprint(shuusin - kishou - a[4])", "coverage": [">", ">", ">", ">"]}, "4376": {"id": 4376, "code": "a = [10, 0, 12, 0, 120]\nkishou = a[0] * 60 + a[1]\nshuusin = a[2] * 60 + a[3]\nprint(shuusin - kishou - a[4])", "coverage": [">", ">", ">", ">"]}, "4377": {"id": 4377, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nprint((h2 - h1) * 60 + m2 - m1 - k)", "coverage": [">", ">"]}, "4378": {"id": 4378, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nprint((h2 - h1) * 60 + m2 - m1 - k)", "coverage": [">", ">"]}, "4379": {"id": 4379, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nduration_min = (H2-H1) * 60 + (M2 - M1)\nstart_duration_min = duration_min - K\nif start_duration_min > 0:\n\tprint(start_duration_min)\nelse:\n\tprint(0)", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "4380": {"id": 4380, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nduration_min = (H2-H1) * 60 + (M2 - M1)\nstart_duration_min = duration_min - K\nif start_duration_min > 0:\n\tprint(start_duration_min)\nelse:\n\tprint(0)", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "4381": {"id": 4381, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nst = h1*60 + m1\nend = h2*60 + m2\nprint(end-st-k)", "coverage": [">", ">", ">", ">"]}, "4382": {"id": 4382, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nst = h1*60 + m1\nend = h2*60 + m2\nprint(end-st-k)", "coverage": [">", ">", ">", ">"]}, "4383": {"id": 4383, "code": "def find(H1,M1,H2,M2,K):\n    left = H1*60+M1\n    right = H2*60+M2\n    remain = right-left-K\n    return max(remain,0)\nH1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nprint(find(H1,M1,H2,M2,K))", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4384": {"id": 4384, "code": "def find(H1,M1,H2,M2,K):\n    left = H1*60+M1\n    right = H2*60+M2\n    remain = right-left-K\n    return max(remain,0)\nH1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nprint(find(H1,M1,H2,M2,K))", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "4385": {"id": 4385, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nans = 0\nif M1 <= M2:\n    ans = (H2-H1) * 60 + M2 - M1 - K\nelse:\n    ans = (H2-H1-1) * 60 + (60-M1) + M2 - K\nif ans < 0:\n    print(0)\nelse:\n    print(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "4386": {"id": 4386, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nans = 0\nif M1 <= M2:\n    ans = (H2-H1) * 60 + M2 - M1 - K\nelse:\n    ans = (H2-H1-1) * 60 + (60-M1) + M2 - K\nif ans < 0:\n    print(0)\nelse:\n    print(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "4387": {"id": 4387, "code": "S = [10, 0, 15, 0, 30]\nA = S[0]*60 + S[1]\nB = S[2]*60 + S[3]\nprint(B-A-S[4])", "coverage": [">", ">", ">", ">"]}, "4388": {"id": 4388, "code": "S = [10, 0, 12, 0, 120]\nA = S[0]*60 + S[1]\nB = S[2]*60 + S[3]\nprint(B-A-S[4])", "coverage": [">", ">", ">", ">"]}, "4389": {"id": 4389, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nmin1 = h1*60+m1\nmin2 = h2*60+m2\nans = min2-min1-k\nans = max(0,ans)\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4390": {"id": 4390, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nmin1 = h1*60+m1\nmin2 = h2*60+m2\nans = min2-min1-k\nans = max(0,ans)\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "4391": {"id": 4391, "code": "H = 10;M = 0;h = 15;m = 0;k = 30\ntime = h*60 + m - (H*60 + M) - k\nprint(time)", "coverage": [">", ">", ">"]}, "4392": {"id": 4392, "code": "H = 10;M = 0;h = 12;m = 0;k = 120\ntime = h*60 + m - (H*60 + M) - k\nprint(time)", "coverage": [">", ">", ">"]}, "4393": {"id": 4393, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nH = h2 - h1\nif m1 <= m2:\n    M = m2 - m1\nelse:\n    M = 60 - m1 + m2\n    H -= 1\nprint(H*60 + M - k)", "coverage": [">", ">", ">", ">", "!", "!", "!", ">"]}, "4394": {"id": 4394, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nH = h2 - h1\nif m1 <= m2:\n    M = m2 - m1\nelse:\n    M = 60 - m1 + m2\n    H -= 1\nprint(H*60 + M - k)", "coverage": [">", ">", ">", ">", "!", "!", "!", ">"]}, "4395": {"id": 4395, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nd1 = h1 * 60 + m1\nd2 = h2 * 60 + m2\nprint(d2 - d1 - k)", "coverage": [">", ">", ">", ">"]}, "4396": {"id": 4396, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nd1 = h1 * 60 + m1\nd2 = h2 * 60 + m2\nprint(d2 - d1 - k)", "coverage": [">", ">", ">", ">"]}, "4397": {"id": 4397, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nx = H1*60+M1\ny = H2*60+M2\nprint(y-x-K)", "coverage": [">", ">", ">", ">"]}, "4398": {"id": 4398, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nx = H1*60+M1\ny = H2*60+M2\nprint(y-x-K)", "coverage": [">", ">", ">", ">"]}, "4399": {"id": 4399, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nH1 *= 60\nH2 *= 60\nstart = H1 + M1\nend = H2 + M2\ntime = end - start\nans = time - K\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "4400": {"id": 4400, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nH1 *= 60\nH2 *= 60\nstart = H1 + M1\nend = H2 + M2\ntime = end - start\nans = time - K\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "4401": {"id": 4401, "code": "H1 = 10;M1 = 0;H2 = 15;M2 = 0;K = 30\nv1 = 60*H1+M1\nv2 = 60*H2+M2\nprint(v2-v1-K)", "coverage": [">", ">", ">", ">"]}, "4402": {"id": 4402, "code": "H1 = 10;M1 = 0;H2 = 12;M2 = 0;K = 120\nv1 = 60*H1+M1\nv2 = 60*H2+M2\nprint(v2-v1-K)", "coverage": [">", ">", ">", ">"]}, "4403": {"id": 4403, "code": "a = 10;b = 0;c = 15;d = 0;e = 30\nf = (c - a) * 60\nf += (d - b)\nprint(f - e)", "coverage": [">", ">", ">", ">"]}, "4404": {"id": 4404, "code": "a = 10;b = 0;c = 12;d = 0;e = 120\nf = (c - a) * 60\nf += (d - b)\nprint(f - e)", "coverage": [">", ">", ">", ">"]}, "4405": {"id": 4405, "code": "h1 = 10;m1 = 0;h2 = 15;m2 = 0;k = 30\nsm = h2*60 + m2\ngm = h1*60 + m1\nans = sm - gm - k\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4406": {"id": 4406, "code": "h1 = 10;m1 = 0;h2 = 12;m2 = 0;k = 120\nsm = h2*60 + m2\ngm = h1*60 + m1\nans = sm - gm - k\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "4407": {"id": 4407, "code": "h = 10;m = 0;H = 15;M = 0;K = 30\nprint(H * 60 + M - h * 60 - m - K)", "coverage": [">", ">"]}, "4408": {"id": 4408, "code": "h = 10;m = 0;H = 12;M = 0;K = 120\nprint(H * 60 + M - h * 60 - m - K)", "coverage": [">", ">"]}, "4409": {"id": 4409, "code": "import datetime\nh = 10;m = 0;eh = 15;em = 0;k = 30\nstart = h*60 + m\nend = eh*60 + em\nif end - start > k:\n    print(end - k - start)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "4410": {"id": 4410, "code": "import datetime\nh = 10;m = 0;eh = 12;em = 0;k = 120\nstart = h*60 + m\nend = eh*60 + em\nif end - start > k:\n    print(end - k - start)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "15893": {"id": 15893, "code": "A = 12;B = 4\nif A > B*2:\n  print(A-B*2)\nelse:\n  print(0)", "coverage": [">", ">", ">", "!", "!"]}, "15894": {"id": 15894, "code": "A = 20;B = 15\nif A > B*2:\n  print(A-B*2)\nelse:\n  print(0)", "coverage": [">", ">", "!", "!", ">"]}, "15895": {"id": 15895, "code": "A = 20;B = 30\nif A > B*2:\n  print(A-B*2)\nelse:\n  print(0)", "coverage": [">", ">", "!", "!", ">"]}, "15896": {"id": 15896, "code": "import sys\ndef main():\n    input = sys.stdin.buffer.readline\n    a = 12;b = 4\n    print(max(0, a - 2 * b))\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "15897": {"id": 15897, "code": "import sys\ndef main():\n    input = sys.stdin.buffer.readline\n    a = 20;b = 15\n    print(max(0, a - 2 * b))\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "15898": {"id": 15898, "code": "import sys\ndef main():\n    input = sys.stdin.buffer.readline\n    a = 20;b = 30\n    print(max(0, a - 2 * b))\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "15899": {"id": 15899, "code": "A = 12;B = 4\nprint(0 if A-(B*2)<1 else A-(B*2))", "coverage": [">", ">"]}, "15900": {"id": 15900, "code": "A = 20;B = 15\nprint(0 if A-(B*2)<1 else A-(B*2))", "coverage": [">", ">"]}, "15901": {"id": 15901, "code": "A = 20;B = 30\nprint(0 if A-(B*2)<1 else A-(B*2))", "coverage": [">", ">"]}, "15902": {"id": 15902, "code": "a = 12;b = 4\nb2 = b * 2\nr = 0 if a <= b2 else a - b2\nprint(r)", "coverage": [">", ">", ">", ">"]}, "15903": {"id": 15903, "code": "a = 20;b = 15\nb2 = b * 2\nr = 0 if a <= b2 else a - b2\nprint(r)", "coverage": [">", ">", ">", ">"]}, "15904": {"id": 15904, "code": "a = 20;b = 30\nb2 = b * 2\nr = 0 if a <= b2 else a - b2\nprint(r)", "coverage": [">", ">", ">", ">"]}, "15905": {"id": 15905, "code": "A = 12;B = 4\nprint(A - 2 * B if A - 2 * B > 0 else 0)", "coverage": [">", ">"]}, "15906": {"id": 15906, "code": "A = 20;B = 15\nprint(A - 2 * B if A - 2 * B > 0 else 0)", "coverage": [">", ">"]}, "15907": {"id": 15907, "code": "A = 20;B = 30\nprint(A - 2 * B if A - 2 * B > 0 else 0)", "coverage": [">", ">"]}, "15908": {"id": 15908, "code": "a = 12;b = 4\nc = a - 2*b\nif c>0:\n    print(c)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", ">", "!", "!"]}, "15909": {"id": 15909, "code": "a = 20;b = 15\nc = a - 2*b\nif c>0:\n    print(c)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "15910": {"id": 15910, "code": "a = 20;b = 30\nc = a - 2*b\nif c>0:\n    print(c)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "15911": {"id": 15911, "code": "def main():\n    A = 12;B = 4\n    area = A - 2*B\n    if area > 0:\n        print(area)\n    else:\n        print(0)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "15912": {"id": 15912, "code": "def main():\n    A = 20;B = 15\n    area = A - 2*B\n    if area > 0:\n        print(area)\n    else:\n        print(0)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "15913": {"id": 15913, "code": "def main():\n    A = 20;B = 30\n    area = A - 2*B\n    if area > 0:\n        print(area)\n    else:\n        print(0)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "15914": {"id": 15914, "code": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef main():\n    A = 12;B = 4\n    print(max(A - 2 * B, 0))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "15915": {"id": 15915, "code": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef main():\n    A = 20;B = 15\n    print(max(A - 2 * B, 0))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "15916": {"id": 15916, "code": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef main():\n    A = 20;B = 30\n    print(max(A - 2 * B, 0))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "15917": {"id": 15917, "code": "import sys\ninput = sys.stdin.readline\na = 12;b = 4\nif 2*b >= a:\n    print(0)\nelse:\n    print(a - 2*b)", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "15918": {"id": 15918, "code": "import sys\ninput = sys.stdin.readline\na = 20;b = 15\nif 2*b >= a:\n    print(0)\nelse:\n    print(a - 2*b)", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "15919": {"id": 15919, "code": "import sys\ninput = sys.stdin.readline\na = 20;b = 30\nif 2*b >= a:\n    print(0)\nelse:\n    print(a - 2*b)", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "15920": {"id": 15920, "code": "A = 12;B = 4\nif A <= B*2:\n    print(0)\nelif A > B*2:\n    print(A-B*2)", "coverage": [">", ">", "!", ">", ">"]}, "15921": {"id": 15921, "code": "A = 20;B = 15\nif A <= B*2:\n    print(0)\nelif A > B*2:\n    print(A-B*2)", "coverage": [">", ">", ">", "!", "!"]}, "15922": {"id": 15922, "code": "A = 20;B = 30\nif A <= B*2:\n    print(0)\nelif A > B*2:\n    print(A-B*2)", "coverage": [">", ">", ">", "!", "!"]}, "15923": {"id": 15923, "code": "A = 12;B = 4\nif A - 2 * B >= 0:\n  print(A - 2 * B)\nelse:\n  print(0)", "coverage": [">", ">", ">", "!", "!"]}, "15924": {"id": 15924, "code": "A = 20;B = 15\nif A - 2 * B >= 0:\n  print(A - 2 * B)\nelse:\n  print(0)", "coverage": [">", ">", "!", "!", ">"]}, "15925": {"id": 15925, "code": "A = 20;B = 30\nif A - 2 * B >= 0:\n  print(A - 2 * B)\nelse:\n  print(0)", "coverage": [">", ">", "!", "!", ">"]}, "15926": {"id": 15926, "code": "a = 12;b = 4\nc=b*2\nif(c>a):\n    c=a\nprint(a-c)", "coverage": [">", ">", ">", "!", ">"]}, "15927": {"id": 15927, "code": "a = 20;b = 15\nc=b*2\nif(c>a):\n    c=a\nprint(a-c)", "coverage": [">", ">", ">", ">", ">"]}, "15928": {"id": 15928, "code": "a = 20;b = 30\nc=b*2\nif(c>a):\n    c=a\nprint(a-c)", "coverage": [">", ">", ">", ">", ">"]}, "15929": {"id": 15929, "code": "A = 12;B = 4\nX = A-B*2\nif X < 0:\n  print (0)\nelse:\n  print (X)", "coverage": [">", ">", ">", "!", "!", ">"]}, "15930": {"id": 15930, "code": "A = 20;B = 15\nX = A-B*2\nif X < 0:\n  print (0)\nelse:\n  print (X)", "coverage": [">", ">", ">", ">", "!", "!"]}, "15931": {"id": 15931, "code": "A = 20;B = 30\nX = A-B*2\nif X < 0:\n  print (0)\nelse:\n  print (X)", "coverage": [">", ">", ">", ">", "!", "!"]}, "15932": {"id": 15932, "code": "A = 12;B = 4\nprint(0 if (B * 2) >= A else A - (B * 2))", "coverage": [">", ">"]}, "15933": {"id": 15933, "code": "A = 20;B = 15\nprint(0 if (B * 2) >= A else A - (B * 2))", "coverage": [">", ">"]}, "15934": {"id": 15934, "code": "A = 20;B = 30\nprint(0 if (B * 2) >= A else A - (B * 2))", "coverage": [">", ">"]}, "15935": {"id": 15935, "code": "a = 12;b = 4\nc=a-2*b\nif c<0:\n    c=0\nprint(c)", "coverage": [">", ">", ">", "!", ">"]}, "15936": {"id": 15936, "code": "a = 20;b = 15\nc=a-2*b\nif c<0:\n    c=0\nprint(c)", "coverage": [">", ">", ">", ">", ">"]}, "15937": {"id": 15937, "code": "a = 20;b = 30\nc=a-2*b\nif c<0:\n    c=0\nprint(c)", "coverage": [">", ">", ">", ">", ">"]}, "15938": {"id": 15938, "code": "A = 12;B = 4\nprint(\"{}\".format(0 if (A - 2*B <= 0) else A - 2*B))", "coverage": [">", ">"]}, "15939": {"id": 15939, "code": "A = 20;B = 15\nprint(\"{}\".format(0 if (A - 2*B <= 0) else A - 2*B))", "coverage": [">", ">"]}, "15940": {"id": 15940, "code": "A = 20;B = 30\nprint(\"{}\".format(0 if (A - 2*B <= 0) else A - 2*B))", "coverage": [">", ">"]}, "15941": {"id": 15941, "code": "a = 12;b = 4\nc=b+b\nif(a-c!=0)and(a-c>=0):\n    print(a-c)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", "!", "!"]}, "15942": {"id": 15942, "code": "a = 20;b = 15\nc=b+b\nif(a-c!=0)and(a-c>=0):\n    print(a-c)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "15943": {"id": 15943, "code": "a = 20;b = 30\nc=b+b\nif(a-c!=0)and(a-c>=0):\n    print(a-c)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "15944": {"id": 15944, "code": "a = 12;b = 4\nprint(a-2*b if a-2*b>0 else 0)", "coverage": [">", ">"]}, "15945": {"id": 15945, "code": "a = 20;b = 15\nprint(a-2*b if a-2*b>0 else 0)", "coverage": [">", ">"]}, "15946": {"id": 15946, "code": "a = 20;b = 30\nprint(a-2*b if a-2*b>0 else 0)", "coverage": [">", ">"]}, "15947": {"id": 15947, "code": "n = [12, 4]\nprint(max(n[0] - 2*n[1], 0))", "coverage": [">", ">"]}, "15948": {"id": 15948, "code": "n = [20, 15]\nprint(max(n[0] - 2*n[1], 0))", "coverage": [">", ">"]}, "15949": {"id": 15949, "code": "n = [20, 30]\nprint(max(n[0] - 2*n[1], 0))", "coverage": [">", ">"]}, "15950": {"id": 15950, "code": "a = 12;b = 4\nans = a - b * 2\nif (ans >= 0):\n    print(ans)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", "!", "!"]}, "15951": {"id": 15951, "code": "a = 20;b = 15\nans = a - b * 2\nif (ans >= 0):\n    print(ans)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "15952": {"id": 15952, "code": "a = 20;b = 30\nans = a - b * 2\nif (ans >= 0):\n    print(ans)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "15953": {"id": 15953, "code": "A = 12;B = 4\nsukima =A-B*2\nif 0 < sukima:\n    print(sukima)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", "!", "!"]}, "15954": {"id": 15954, "code": "A = 20;B = 15\nsukima =A-B*2\nif 0 < sukima:\n    print(sukima)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "15955": {"id": 15955, "code": "A = 20;B = 30\nsukima =A-B*2\nif 0 < sukima:\n    print(sukima)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "15956": {"id": 15956, "code": "a = 12;b = 4\nans = a - b * 2\nif ans < 0:\n    ans = 0\nprint(ans)", "coverage": [">", ">", ">", "!", ">"]}, "15957": {"id": 15957, "code": "a = 20;b = 15\nans = a - b * 2\nif ans < 0:\n    ans = 0\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "15958": {"id": 15958, "code": "a = 20;b = 30\nans = a - b * 2\nif ans < 0:\n    ans = 0\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "15959": {"id": 15959, "code": "a = 12;b = 4\nc=0\nif a<=b:\n  print(0)\nelif a>b:\n  c=a-b*2\n  if c>0:\n    print(c)\n  elif c<=0:\n    print(0)", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", "!", "!"]}, "15960": {"id": 15960, "code": "a = 20;b = 15\nc=0\nif a<=b:\n  print(0)\nelif a>b:\n  c=a-b*2\n  if c>0:\n    print(c)\n  elif c<=0:\n    print(0)", "coverage": [">", ">", ">", "!", ">", ">", ">", "!", ">", ">"]}, "15961": {"id": 15961, "code": "a = 20;b = 30\nc=0\nif a<=b:\n  print(0)\nelif a>b:\n  c=a-b*2\n  if c>0:\n    print(c)\n  elif c<=0:\n    print(0)", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "15962": {"id": 15962, "code": "import sys\ninput = sys.stdin.readline\nA = 12;B = 4\nprint(A - B * 2) if A > B * 2 else print(0)", "coverage": [">", ">", ">", ">"]}, "15963": {"id": 15963, "code": "import sys\ninput = sys.stdin.readline\nA = 20;B = 15\nprint(A - B * 2) if A > B * 2 else print(0)", "coverage": [">", ">", ">", ">"]}, "15964": {"id": 15964, "code": "import sys\ninput = sys.stdin.readline\nA = 20;B = 30\nprint(A - B * 2) if A > B * 2 else print(0)", "coverage": [">", ">", ">", ">"]}, "15965": {"id": 15965, "code": "a = 12;b = 4\nif a >= (b * 2):\n    print(a - (b * 2))\nelif a < (b * 2):\n    print(0)", "coverage": [">", ">", ">", "!", "!"]}, "15966": {"id": 15966, "code": "a = 20;b = 15\nif a >= (b * 2):\n    print(a - (b * 2))\nelif a < (b * 2):\n    print(0)", "coverage": [">", ">", "!", ">", ">"]}, "15967": {"id": 15967, "code": "a = 20;b = 30\nif a >= (b * 2):\n    print(a - (b * 2))\nelif a < (b * 2):\n    print(0)", "coverage": [">", ">", "!", ">", ">"]}, "15968": {"id": 15968, "code": "import sys\nimport math\nimport bisect\ndef main():\n    n = 12;m = 4\n    n = max(0, n - 2 * m)\n    print(n)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "15969": {"id": 15969, "code": "import sys\nimport math\nimport bisect\ndef main():\n    n = 20;m = 15\n    n = max(0, n - 2 * m)\n    print(n)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "15970": {"id": 15970, "code": "import sys\nimport math\nimport bisect\ndef main():\n    n = 20;m = 30\n    n = max(0, n - 2 * m)\n    print(n)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "15971": {"id": 15971, "code": "A = \"12\";B = \"4\"\n(A,B)=(int(A),int(B))\nAns=A-(2*B)\nif Ans<=0:\n  Ans=0\nprint(Ans)", "coverage": [">", ">", ">", ">", "!", ">"]}, "15972": {"id": 15972, "code": "A = \"20\";B = \"15\"\n(A,B)=(int(A),int(B))\nAns=A-(2*B)\nif Ans<=0:\n  Ans=0\nprint(Ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "15973": {"id": 15973, "code": "A = \"20\";B = \"30\"\n(A,B)=(int(A),int(B))\nAns=A-(2*B)\nif Ans<=0:\n  Ans=0\nprint(Ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "15974": {"id": 15974, "code": "import sys\ninput = sys.stdin.buffer.readline\nsys.setrecursionlimit(10**6)\nINF = float(\"inf\")\ndef main():\n    A = 12;B = 4\n    print(max(0, A-B*2))\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "15975": {"id": 15975, "code": "import sys\ninput = sys.stdin.buffer.readline\nsys.setrecursionlimit(10**6)\nINF = float(\"inf\")\ndef main():\n    A = 20;B = 15\n    print(max(0, A-B*2))\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "15976": {"id": 15976, "code": "import sys\ninput = sys.stdin.buffer.readline\nsys.setrecursionlimit(10**6)\nINF = float(\"inf\")\ndef main():\n    A = 20;B = 30\n    print(max(0, A-B*2))\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "15977": {"id": 15977, "code": "def main():\n    A = 12;B = 4\n    ans = A - 2 * B\n    if ans < 0:\n        ans = 0\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", "!", ">", ">", ">"]}, "15978": {"id": 15978, "code": "def main():\n    A = 20;B = 15\n    ans = A - 2 * B\n    if ans < 0:\n        ans = 0\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "15979": {"id": 15979, "code": "def main():\n    A = 20;B = 30\n    ans = A - 2 * B\n    if ans < 0:\n        ans = 0\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "15980": {"id": 15980, "code": "from sys import stdin, setrecursionlimit\ndef main():\n    input = stdin.buffer.readline\n    a = 12;b = 4\n    ans = a - 2 * b\n    if ans >= 0:\n        print(ans)\n    else:\n        print(0)\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "15981": {"id": 15981, "code": "from sys import stdin, setrecursionlimit\ndef main():\n    input = stdin.buffer.readline\n    a = 20;b = 15\n    ans = a - 2 * b\n    if ans >= 0:\n        print(ans)\n    else:\n        print(0)\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">"]}, "15982": {"id": 15982, "code": "from sys import stdin, setrecursionlimit\ndef main():\n    input = stdin.buffer.readline\n    a = 20;b = 30\n    ans = a - 2 * b\n    if ans >= 0:\n        print(ans)\n    else:\n        print(0)\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">"]}, "15983": {"id": 15983, "code": "import itertools\na = 12;b = 4\nans= a-b*2\nif ans <=0:\n    print(0)\nelse:\n    print(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "15984": {"id": 15984, "code": "import itertools\na = 20;b = 15\nans= a-b*2\nif ans <=0:\n    print(0)\nelse:\n    print(ans)", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "15985": {"id": 15985, "code": "import itertools\na = 20;b = 30\nans= a-b*2\nif ans <=0:\n    print(0)\nelse:\n    print(ans)", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "15986": {"id": 15986, "code": "N = 12;M = 4\nprint(max(N - (M*2),0))", "coverage": [">", ">"]}, "15987": {"id": 15987, "code": "N = 20;M = 15\nprint(max(N - (M*2),0))", "coverage": [">", ">"]}, "15988": {"id": 15988, "code": "N = 20;M = 30\nprint(max(N - (M*2),0))", "coverage": [">", ">"]}, "15989": {"id": 15989, "code": "A = 12;B = 4\nprint('0') if A <= 2*B else print(A - 2*B)", "coverage": [">", ">"]}, "15990": {"id": 15990, "code": "A = 20;B = 15\nprint('0') if A <= 2*B else print(A - 2*B)", "coverage": [">", ">"]}, "15991": {"id": 15991, "code": "A = 20;B = 30\nprint('0') if A <= 2*B else print(A - 2*B)", "coverage": [">", ">"]}, "15992": {"id": 15992, "code": "a1 = \"12 4\"\na2=[i for i in a1.split()]\na3,a4=[a2[i] for i in (0,1)]\nA,B=int(a3),int(a4)\nprint(max(0,A-2*B))", "coverage": [">", ">", ">", ">", ">"]}, "15993": {"id": 15993, "code": "a1 = \"20 15\"\na2=[i for i in a1.split()]\na3,a4=[a2[i] for i in (0,1)]\nA,B=int(a3),int(a4)\nprint(max(0,A-2*B))", "coverage": [">", ">", ">", ">", ">"]}, "15994": {"id": 15994, "code": "a1 = \"20 30\"\na2=[i for i in a1.split()]\na3,a4=[a2[i] for i in (0,1)]\nA,B=int(a3),int(a4)\nprint(max(0,A-2*B))", "coverage": [">", ">", ">", ">", ">"]}, "15995": {"id": 15995, "code": "a = 12;b = 4\nif a<=b*2:\n    print(0)\nelse:\n    print(a-b*2)", "coverage": [">", ">", "!", "!", ">"]}, "15996": {"id": 15996, "code": "a = 20;b = 15\nif a<=b*2:\n    print(0)\nelse:\n    print(a-b*2)", "coverage": [">", ">", ">", "!", "!"]}, "15997": {"id": 15997, "code": "a = 20;b = 30\nif a<=b*2:\n    print(0)\nelse:\n    print(a-b*2)", "coverage": [">", ">", ">", "!", "!"]}, "15998": {"id": 15998, "code": "a = 12;b = 4\nans = 0\nif a - (2 * b) > 0:\n    ans = a - (2 * b)\nprint(ans)", "coverage": [">", ">", ">", ">", ">"]}, "15999": {"id": 15999, "code": "a = 20;b = 15\nans = 0\nif a - (2 * b) > 0:\n    ans = a - (2 * b)\nprint(ans)", "coverage": [">", ">", ">", "!", ">"]}, "16000": {"id": 16000, "code": "a = 20;b = 30\nans = 0\nif a - (2 * b) > 0:\n    ans = a - (2 * b)\nprint(ans)", "coverage": [">", ">", ">", "!", ">"]}, "16001": {"id": 16001, "code": "A = 12;B = 4\nX=A-2*B\nif X>=1:\n    print(X)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", ">", "!", "!"]}, "16002": {"id": 16002, "code": "A = 20;B = 15\nX=A-2*B\nif X>=1:\n    print(X)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "16003": {"id": 16003, "code": "A = 20;B = 30\nX=A-2*B\nif X>=1:\n    print(X)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "16004": {"id": 16004, "code": "a = 12;b = 4\nif a <= b:\n    print(0)\nelif a - 2*b <= 0:\n    print(0)\nelif a - 2*b > 0:\n    print(a - 2 * b)", "coverage": [">", ">", "!", ">", "!", ">", ">"]}, "16005": {"id": 16005, "code": "a = 20;b = 15\nif a <= b:\n    print(0)\nelif a - 2*b <= 0:\n    print(0)\nelif a - 2*b > 0:\n    print(a - 2 * b)", "coverage": [">", ">", "!", ">", ">", "!", "!"]}, "16006": {"id": 16006, "code": "a = 20;b = 30\nif a <= b:\n    print(0)\nelif a - 2*b <= 0:\n    print(0)\nelif a - 2*b > 0:\n    print(a - 2 * b)", "coverage": [">", ">", ">", "!", "!", "!", "!"]}, "16007": {"id": 16007, "code": "def solve():\n    a = 12;b = 4\n    print(max(0, a-2*b))\nif __name__ == '__main__':\n    solve()", "coverage": [">", ">", ">", ">", ">"]}, "16008": {"id": 16008, "code": "def solve():\n    a = 20;b = 15\n    print(max(0, a-2*b))\nif __name__ == '__main__':\n    solve()", "coverage": [">", ">", ">", ">", ">"]}, "16009": {"id": 16009, "code": "def solve():\n    a = 20;b = 30\n    print(max(0, a-2*b))\nif __name__ == '__main__':\n    solve()", "coverage": [">", ">", ">", ">", ">"]}, "16010": {"id": 16010, "code": "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    from math import floor, ceil\n    a = 12;b = 4\n    print(max(0, a-b*2))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "16011": {"id": 16011, "code": "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    from math import floor, ceil\n    a = 20;b = 15\n    print(max(0, a-b*2))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "16012": {"id": 16012, "code": "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    from math import floor, ceil\n    a = 20;b = 30\n    print(max(0, a-b*2))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "16013": {"id": 16013, "code": "def main():\n    A = 12;B = 4\n    print(max(A - 2*B, 0))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">"]}, "16014": {"id": 16014, "code": "def main():\n    A = 20;B = 15\n    print(max(A - 2*B, 0))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">"]}, "16015": {"id": 16015, "code": "def main():\n    A = 20;B = 30\n    print(max(A - 2*B, 0))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">"]}, "16016": {"id": 16016, "code": "A = 12;B = 4\nif(A<=B*2):\n  print(0)\nelse:\n  print(A-B*2)", "coverage": [">", ">", "!", "!", ">"]}, "16017": {"id": 16017, "code": "A = 20;B = 15\nif(A<=B*2):\n  print(0)\nelse:\n  print(A-B*2)", "coverage": [">", ">", ">", "!", "!"]}, "16018": {"id": 16018, "code": "A = 20;B = 30\nif(A<=B*2):\n  print(0)\nelse:\n  print(A-B*2)", "coverage": [">", ">", ">", "!", "!"]}, "16019": {"id": 16019, "code": "import sys\ninput = sys.stdin.readline\na = 12;b = 4\nif a > b * 2:\n    ans = a - b * 2\nelse:\n    ans = 0\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "16020": {"id": 16020, "code": "import sys\ninput = sys.stdin.readline\na = 20;b = 15\nif a > b * 2:\n    ans = a - b * 2\nelse:\n    ans = 0\nprint(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "16021": {"id": 16021, "code": "import sys\ninput = sys.stdin.readline\na = 20;b = 30\nif a > b * 2:\n    ans = a - b * 2\nelse:\n    ans = 0\nprint(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "16022": {"id": 16022, "code": "base = ['12', '4']\na = int(base[0])\nb = int(base[1])\nif a>b*2:\n    print(a-b*2)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "16023": {"id": 16023, "code": "base = ['20', '15']\na = int(base[0])\nb = int(base[1])\nif a>b*2:\n    print(a-b*2)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "16024": {"id": 16024, "code": "base = ['20', '30']\na = int(base[0])\nb = int(base[1])\nif a>b*2:\n    print(a-b*2)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "16025": {"id": 16025, "code": "A = [12, 4]\nif A[0] < A[1]*2:\n    print(0)\nelse:\n    print(A[0]-A[1]*2)", "coverage": [">", ">", "!", "!", ">"]}, "16026": {"id": 16026, "code": "A = [20, 15]\nif A[0] < A[1]*2:\n    print(0)\nelse:\n    print(A[0]-A[1]*2)", "coverage": [">", ">", ">", "!", "!"]}, "16027": {"id": 16027, "code": "A = [20, 30]\nif A[0] < A[1]*2:\n    print(0)\nelse:\n    print(A[0]-A[1]*2)", "coverage": [">", ">", ">", "!", "!"]}, "16028": {"id": 16028, "code": "A = 12;B = 4\ncal = A - B * 2\nif cal >= 0:\n    print(cal)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16029": {"id": 16029, "code": "A = 20;B = 15\ncal = A - B * 2\nif cal >= 0:\n    print(cal)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16030": {"id": 16030, "code": "A = 20;B = 30\ncal = A - B * 2\nif cal >= 0:\n    print(cal)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16031": {"id": 16031, "code": "A = 12;B = 4\nprint(max(0, A - 2 * B))", "coverage": [">", ">"]}, "16032": {"id": 16032, "code": "A = 20;B = 15\nprint(max(0, A - 2 * B))", "coverage": [">", ">"]}, "16033": {"id": 16033, "code": "A = 20;B = 30\nprint(max(0, A - 2 * B))", "coverage": [">", ">"]}, "16034": {"id": 16034, "code": "a = 12;b = 4\nres = a - b * 2\nif res < 0:\n    print(0)\nelse:\n    print(res)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16035": {"id": 16035, "code": "a = 20;b = 15\nres = a - b * 2\nif res < 0:\n    print(0)\nelse:\n    print(res)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16036": {"id": 16036, "code": "a = 20;b = 30\nres = a - b * 2\nif res < 0:\n    print(0)\nelse:\n    print(res)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16037": {"id": 16037, "code": "from sys import stdin\nA = 12;B = 4\nif A > 2*B:\n    print(A - 2*B)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16038": {"id": 16038, "code": "from sys import stdin\nA = 20;B = 15\nif A > 2*B:\n    print(A - 2*B)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16039": {"id": 16039, "code": "from sys import stdin\nA = 20;B = 30\nif A > 2*B:\n    print(A - 2*B)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16040": {"id": 16040, "code": "A = 12;B = 4\nprint([A-2*B,0][A<=2*B])", "coverage": [">", ">"]}, "16041": {"id": 16041, "code": "A = 20;B = 15\nprint([A-2*B,0][A<=2*B])", "coverage": [">", ">"]}, "16042": {"id": 16042, "code": "A = 20;B = 30\nprint([A-2*B,0][A<=2*B])", "coverage": [">", ">"]}, "16043": {"id": 16043, "code": "n = 12;m = 4\nif(n-m*2>=0):\n  print(n-m*2)\nelse:\n  print(0)", "coverage": [">", ">", ">", "!", "!"]}, "16044": {"id": 16044, "code": "n = 20;m = 15\nif(n-m*2>=0):\n  print(n-m*2)\nelse:\n  print(0)", "coverage": [">", ">", "!", "!", ">"]}, "16045": {"id": 16045, "code": "n = 20;m = 30\nif(n-m*2>=0):\n  print(n-m*2)\nelse:\n  print(0)", "coverage": [">", ">", "!", "!", ">"]}, "16046": {"id": 16046, "code": "a = \"12\";b = \"4\"\na = int(a)\nb = int(b)\nif a <= b:\n    print(\"0\")\nelif a <= b*2:\n    print(\"0\")\nelse:\n    print(a-b*2)", "coverage": [">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "16047": {"id": 16047, "code": "a = \"20\";b = \"15\"\na = int(a)\nb = int(b)\nif a <= b:\n    print(\"0\")\nelif a <= b*2:\n    print(\"0\")\nelse:\n    print(a-b*2)", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", "!"]}, "16048": {"id": 16048, "code": "a = \"20\";b = \"30\"\na = int(a)\nb = int(b)\nif a <= b:\n    print(\"0\")\nelif a <= b*2:\n    print(\"0\")\nelse:\n    print(a-b*2)", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "16049": {"id": 16049, "code": "X = 12;Y = 4\nif X>=2*Y:\n    print(X-2*Y)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!"]}, "16050": {"id": 16050, "code": "X = 20;Y = 15\nif X>=2*Y:\n    print(X-2*Y)\nelse:\n    print(0)", "coverage": [">", ">", "!", "!", ">"]}, "16051": {"id": 16051, "code": "X = 20;Y = 30\nif X>=2*Y:\n    print(X-2*Y)\nelse:\n    print(0)", "coverage": [">", ">", "!", "!", ">"]}, "16052": {"id": 16052, "code": "a = 12;b = 4\nn = max([a - 2 * b, 0])\nprint(n)", "coverage": [">", ">", ">"]}, "16053": {"id": 16053, "code": "a = 20;b = 15\nn = max([a - 2 * b, 0])\nprint(n)", "coverage": [">", ">", ">"]}, "16054": {"id": 16054, "code": "a = 20;b = 30\nn = max([a - 2 * b, 0])\nprint(n)", "coverage": [">", ">", ">"]}, "16055": {"id": 16055, "code": "def main():\n    a = 12;b = 4\n    ans = a - 2*b\n    ans = 0 if ans < 0 else ans \n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "16056": {"id": 16056, "code": "def main():\n    a = 20;b = 15\n    ans = a - 2*b\n    ans = 0 if ans < 0 else ans \n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "16057": {"id": 16057, "code": "def main():\n    a = 20;b = 30\n    ans = a - 2*b\n    ans = 0 if ans < 0 else ans \n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "16058": {"id": 16058, "code": "def main():\n    a = 12;b = 4\n    if a < b * 2:\n        print(0)\n    else:\n        print(a - b * 2)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", "!", "!", ">", ">", ">"]}, "16059": {"id": 16059, "code": "def main():\n    a = 20;b = 15\n    if a < b * 2:\n        print(0)\n    else:\n        print(a - b * 2)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "16060": {"id": 16060, "code": "def main():\n    a = 20;b = 30\n    if a < b * 2:\n        print(0)\n    else:\n        print(a - b * 2)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "16061": {"id": 16061, "code": "a = 12;b = 4\nif a>=2*b:\n  print(int(a-2*b))\nelse:\n  print('0')", "coverage": [">", ">", ">", "!", "!"]}, "16062": {"id": 16062, "code": "a = 20;b = 15\nif a>=2*b:\n  print(int(a-2*b))\nelse:\n  print('0')", "coverage": [">", ">", "!", "!", ">"]}, "16063": {"id": 16063, "code": "a = 20;b = 30\nif a>=2*b:\n  print(int(a-2*b))\nelse:\n  print('0')", "coverage": [">", ">", "!", "!", ">"]}, "16064": {"id": 16064, "code": "a = 12;b = 4\nc = 2*b\nif a - c <= 0:\n  print(0)\nelse:\n  print(a - c)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16065": {"id": 16065, "code": "a = 20;b = 15\nc = 2*b\nif a - c <= 0:\n  print(0)\nelse:\n  print(a - c)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16066": {"id": 16066, "code": "a = 20;b = 30\nc = 2*b\nif a - c <= 0:\n  print(0)\nelse:\n  print(a - c)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16067": {"id": 16067, "code": "A = 12;B = 4\nif A-B*2<0:\n    print('0')\nelse:\n    print(A-B*2)", "coverage": [">", ">", "!", "!", ">"]}, "16068": {"id": 16068, "code": "A = 20;B = 15\nif A-B*2<0:\n    print('0')\nelse:\n    print(A-B*2)", "coverage": [">", ">", ">", "!", "!"]}, "16069": {"id": 16069, "code": "A = 20;B = 30\nif A-B*2<0:\n    print('0')\nelse:\n    print(A-B*2)", "coverage": [">", ">", ">", "!", "!"]}, "16070": {"id": 16070, "code": "a = \"12\";b = \"4\"\nc = int(a)-(2*int(b))\nif c >= 0:\n    print(c)\nelse:\n    print(0)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16071": {"id": 16071, "code": "a = \"20\";b = \"15\"\nc = int(a)-(2*int(b))\nif c >= 0:\n    print(c)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16072": {"id": 16072, "code": "a = \"20\";b = \"30\"\nc = int(a)-(2*int(b))\nif c >= 0:\n    print(c)\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16073": {"id": 16073, "code": "A = 12;B = 4\nans = A - B*2\nif ans <= 0:\n    print(0)\nelse:\n    print(ans)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16074": {"id": 16074, "code": "A = 20;B = 15\nans = A - B*2\nif ans <= 0:\n    print(0)\nelse:\n    print(ans)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16075": {"id": 16075, "code": "A = 20;B = 30\nans = A - B*2\nif ans <= 0:\n    print(0)\nelse:\n    print(ans)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16076": {"id": 16076, "code": "A = 12;B = 4\nif A - 2*B > 0 :\n    print(A-2*B)\nelse :\n    print(\"0\")", "coverage": [">", ">", ">", "!", "!"]}, "16077": {"id": 16077, "code": "A = 20;B = 15\nif A - 2*B > 0 :\n    print(A-2*B)\nelse :\n    print(\"0\")", "coverage": [">", ">", "!", "!", ">"]}, "16078": {"id": 16078, "code": "A = 20;B = 30\nif A - 2*B > 0 :\n    print(A-2*B)\nelse :\n    print(\"0\")", "coverage": [">", ">", "!", "!", ">"]}, "16079": {"id": 16079, "code": "a = [12, 4]\nx = a[1]*2\nif x>=a[0]:\n    print(0)\nelse:\n    print(a[0]-x)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16080": {"id": 16080, "code": "a = [20, 15]\nx = a[1]*2\nif x>=a[0]:\n    print(0)\nelse:\n    print(a[0]-x)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16081": {"id": 16081, "code": "a = [20, 30]\nx = a[1]*2\nif x>=a[0]:\n    print(0)\nelse:\n    print(a[0]-x)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16082": {"id": 16082, "code": "A = \"12\";B = \"4\"\nA=int(A)\nB=int(B)\nif A-2*B>=0:\n  print(A-2*B)\nelif A-2*B<0:\n  print(0)", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "16083": {"id": 16083, "code": "A = \"20\";B = \"15\"\nA=int(A)\nB=int(B)\nif A-2*B>=0:\n  print(A-2*B)\nelif A-2*B<0:\n  print(0)", "coverage": [">", ">", ">", ">", "!", ">", ">"]}, "16084": {"id": 16084, "code": "A = \"20\";B = \"30\"\nA=int(A)\nB=int(B)\nif A-2*B>=0:\n  print(A-2*B)\nelif A-2*B<0:\n  print(0)", "coverage": [">", ">", ">", ">", "!", ">", ">"]}, "16085": {"id": 16085, "code": "A = 12;B = 4\nif A-2*B<0:\n    print(0)\n    exit(0)\nprint(A-2*B)", "coverage": [">", ">", "!", "!", ">"]}, "16086": {"id": 16086, "code": "a = 12;b = 4\ni = a - b * 2\nif i <= 0:\n    print('0')\nelse:\n    print(i)", "coverage": [">", ">", ">", "!", "!", ">"]}, "16087": {"id": 16087, "code": "a = 20;b = 15\ni = a - b * 2\nif i <= 0:\n    print('0')\nelse:\n    print(i)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16088": {"id": 16088, "code": "a = 20;b = 30\ni = a - b * 2\nif i <= 0:\n    print('0')\nelse:\n    print(i)", "coverage": [">", ">", ">", ">", "!", "!"]}, "16089": {"id": 16089, "code": "import sys\ninput = sys.stdin.readline\nfrom collections import *\nA = 12;B = 4\nprint(max(A-2*B, 0))", "coverage": [">", ">", ">", ">", ">"]}, "16090": {"id": 16090, "code": "import sys\ninput = sys.stdin.readline\nfrom collections import *\nA = 20;B = 15\nprint(max(A-2*B, 0))", "coverage": [">", ">", ">", ">", ">"]}, "16091": {"id": 16091, "code": "import sys\ninput = sys.stdin.readline\nfrom collections import *\nA = 20;B = 30\nprint(max(A-2*B, 0))", "coverage": [">", ">", ">", ">", ">"]}, "16092": {"id": 16092, "code": "n = 12;m = 4\nprint(max(n-2*m, 0))", "coverage": [">", ">"]}, "16093": {"id": 16093, "code": "n = 20;m = 15\nprint(max(n-2*m, 0))", "coverage": [">", ">"]}, "16094": {"id": 16094, "code": "n = 20;m = 30\nprint(max(n-2*m, 0))", "coverage": [">", ">"]}, "16095": {"id": 16095, "code": "A = 12;B = 4\nif A-(B*2) > 0:\n    print(A-(B*2))\nelse:\n    print(0)", "coverage": [">", ">", ">", "!", "!"]}, "16096": {"id": 16096, "code": "A = 20;B = 15\nif A-(B*2) > 0:\n    print(A-(B*2))\nelse:\n    print(0)", "coverage": [">", ">", "!", "!", ">"]}, "16097": {"id": 16097, "code": "A = 20;B = 30\nif A-(B*2) > 0:\n    print(A-(B*2))\nelse:\n    print(0)", "coverage": [">", ">", "!", "!", ">"]}, "16098": {"id": 16098, "code": "a = ['12', '4']\nif int(a[0]) <= int(a[1]) * 2:\n  print(\"0\")\nelse:\n  print(int(int(a[0]) - int(a[1]) * 2))", "coverage": [">", ">", "!", "!", ">"]}, "16099": {"id": 16099, "code": "a = ['20', '15']\nif int(a[0]) <= int(a[1]) * 2:\n  print(\"0\")\nelse:\n  print(int(int(a[0]) - int(a[1]) * 2))", "coverage": [">", ">", ">", "!", "!"]}, "16100": {"id": 16100, "code": "a = ['20', '30']\nif int(a[0]) <= int(a[1]) * 2:\n  print(\"0\")\nelse:\n  print(int(int(a[0]) - int(a[1]) * 2))", "coverage": [">", ">", ">", "!", "!"]}, "16101": {"id": 16101, "code": "n = ['12', '4']\na=int(n[0])\nb=int(n[1])\nif a>=2*b:\n     print(a-2*b)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "16102": {"id": 16102, "code": "n = ['20', '15']\na=int(n[0])\nb=int(n[1])\nif a>=2*b:\n     print(a-2*b)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "16103": {"id": 16103, "code": "n = ['20', '30']\na=int(n[0])\nb=int(n[1])\nif a>=2*b:\n     print(a-2*b)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "16104": {"id": 16104, "code": "a = 12;b = 4\nresult = a - (b * 2)\nif result <= 0:\n    result = 0\nprint(result)", "coverage": [">", ">", ">", "!", ">"]}, "16105": {"id": 16105, "code": "a = 20;b = 15\nresult = a - (b * 2)\nif result <= 0:\n    result = 0\nprint(result)", "coverage": [">", ">", ">", ">", ">"]}, "16106": {"id": 16106, "code": "a = 20;b = 30\nresult = a - (b * 2)\nif result <= 0:\n    result = 0\nprint(result)", "coverage": [">", ">", ">", ">", ">"]}, "16107": {"id": 16107, "code": "a = 12;b = 4\nif a<=(b*2):\n    print(0)\nelse:\n    print(a-(b*2))", "coverage": [">", ">", "!", "!", ">"]}, "16108": {"id": 16108, "code": "a = 20;b = 15\nif a<=(b*2):\n    print(0)\nelse:\n    print(a-(b*2))", "coverage": [">", ">", ">", "!", "!"]}, "16109": {"id": 16109, "code": "a = 20;b = 30\nif a<=(b*2):\n    print(0)\nelse:\n    print(a-(b*2))", "coverage": [">", ">", ">", "!", "!"]}, "16110": {"id": 16110, "code": "a = 12;b = 4\nif a-2*b>=0:\n    print(a-2*b)\nelse:\n    print(\"0\")", "coverage": [">", ">", ">", "!", "!"]}, "16111": {"id": 16111, "code": "a = 20;b = 15\nif a-2*b>=0:\n    print(a-2*b)\nelse:\n    print(\"0\")", "coverage": [">", ">", "!", "!", ">"]}, "16112": {"id": 16112, "code": "a = 20;b = 30\nif a-2*b>=0:\n    print(a-2*b)\nelse:\n    print(\"0\")", "coverage": [">", ">", "!", "!", ">"]}, "16113": {"id": 16113, "code": "A = ['12', '4']\nB = int(A[0]) - 2 * int(A[1])\nprint(0 if B < 0 else B)", "coverage": [">", ">", ">"]}, "16114": {"id": 16114, "code": "A = ['20', '15']\nB = int(A[0]) - 2 * int(A[1])\nprint(0 if B < 0 else B)", "coverage": [">", ">", ">"]}, "16115": {"id": 16115, "code": "A = ['20', '30']\nB = int(A[0]) - 2 * int(A[1])\nprint(0 if B < 0 else B)", "coverage": [">", ">", ">"]}, "16116": {"id": 16116, "code": "a = [12, 4]\nprint(0 if a[0]-2*a[1]<=0 else a[0]-2*a[1])", "coverage": [">", ">"]}, "16117": {"id": 16117, "code": "a = [20, 15]\nprint(0 if a[0]-2*a[1]<=0 else a[0]-2*a[1])", "coverage": [">", ">"]}, "16118": {"id": 16118, "code": "a = [20, 30]\nprint(0 if a[0]-2*a[1]<=0 else a[0]-2*a[1])", "coverage": [">", ">"]}, "16122": {"id": 16122, "code": "a = 12;b = 4\nif a <= b or a - (b * 2) <= 0:\n    print(\"0\")\nelse:\n    print(a - (b * 2))", "coverage": [">", ">", "!", "!", ">"]}, "16123": {"id": 16123, "code": "a = 20;b = 15\nif a <= b or a - (b * 2) <= 0:\n    print(\"0\")\nelse:\n    print(a - (b * 2))", "coverage": [">", ">", ">", "!", "!"]}, "16124": {"id": 16124, "code": "a = 20;b = 30\nif a <= b or a - (b * 2) <= 0:\n    print(\"0\")\nelse:\n    print(a - (b * 2))", "coverage": [">", ">", ">", "!", "!"]}, "16125": {"id": 16125, "code": "import sys\ndef solve(A, B):\n    return max(0, A - B * 2)\ndef main(args):\n    A = 12;B = 4\n    ans = solve(A, B)\n    print(ans)\nif __name__ == '__main__':\n    main(sys.argv[1:])", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "16126": {"id": 16126, "code": "import sys\ndef solve(A, B):\n    return max(0, A - B * 2)\ndef main(args):\n    A = 20;B = 15\n    ans = solve(A, B)\n    print(ans)\nif __name__ == '__main__':\n    main(sys.argv[1:])", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "16127": {"id": 16127, "code": "import sys\ndef solve(A, B):\n    return max(0, A - B * 2)\ndef main(args):\n    A = 20;B = 30\n    ans = solve(A, B)\n    print(ans)\nif __name__ == '__main__':\n    main(sys.argv[1:])", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "16128": {"id": 16128, "code": "input_line = \"12 4\"\ninputs = input_line.split(' ')\ninputs = [int(input) for input in inputs]\nA = inputs[0]\nB = inputs[1]\ndual_B = 2 * B\nres = 0\nif A > dual_B:\n    res = A - dual_B\nelse:\n    res = 0\nprint(res)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "16129": {"id": 16129, "code": "input_line = \"20 15\"\ninputs = input_line.split(' ')\ninputs = [int(input) for input in inputs]\nA = inputs[0]\nB = inputs[1]\ndual_B = 2 * B\nres = 0\nif A > dual_B:\n    res = A - dual_B\nelse:\n    res = 0\nprint(res)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "16130": {"id": 16130, "code": "input_line = \"20 30\"\ninputs = input_line.split(' ')\ninputs = [int(input) for input in inputs]\nA = inputs[0]\nB = inputs[1]\ndual_B = 2 * B\nres = 0\nif A > dual_B:\n    res = A - dual_B\nelse:\n    res = 0\nprint(res)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "16131": {"id": 16131, "code": "import sys\na = 12;b = 4\ndef main():\n    r = max(0, a - b * 2)\n    print(r)\nif __name__ ==  '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "16132": {"id": 16132, "code": "import sys\na = 20;b = 15\ndef main():\n    r = max(0, a - b * 2)\n    print(r)\nif __name__ ==  '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "16133": {"id": 16133, "code": "import sys\na = 20;b = 30\ndef main():\n    r = max(0, a - b * 2)\n    print(r)\nif __name__ ==  '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "16134": {"id": 16134, "code": "def curtain(a, b):\n    return a-b*2 if a > b*2 else 0\ndef main():\n    a = 12;b = 4\n    print(curtain(a, b))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "16135": {"id": 16135, "code": "def curtain(a, b):\n    return a-b*2 if a > b*2 else 0\ndef main():\n    a = 20;b = 15\n    print(curtain(a, b))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "16136": {"id": 16136, "code": "def curtain(a, b):\n    return a-b*2 if a > b*2 else 0\ndef main():\n    a = 20;b = 30\n    print(curtain(a, b))\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10690": {"id": 10690, "code": "import sys\nN = 6;M = 0\nac = [0] * N\nwa = [0] * N\nfor _ in range(M):\n    p, s = sys.stdin.readline().split()\n    p = int(p) - 1\n    if s == \"AC\":\n        ac[p] = 1\n    else:\n        if not ac[p]:\n            wa[p] += 1\nacnum = sum(ac)\nwanum = sum([c for i, c in enumerate(wa) if ac[i] == 1])\nprint(acnum, wanum)", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", ">", ">"]}, "10691": {"id": 10691, "code": "S = \"akasaka\"\nN = len(S)\nreverse = S[::-1]\nfirst = S[:(N - 1) // 2]\nsecond = S[(N + 1) // 2:]\nif S == reverse and first == second:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10692": {"id": 10692, "code": "S = \"level\"\nN = len(S)\nreverse = S[::-1]\nfirst = S[:(N - 1) // 2]\nsecond = S[(N + 1) // 2:]\nif S == reverse and first == second:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10693": {"id": 10693, "code": "S = \"atcoder\"\nN = len(S)\nreverse = S[::-1]\nfirst = S[:(N - 1) // 2]\nsecond = S[(N + 1) // 2:]\nif S == reverse and first == second:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10694": {"id": 10694, "code": "s = \"akasaka\"\nn = len(s)\ndef palindrome(s):\n    ret = True\n    for i in range(len(s)//2):\n        if s[i] != s[-i-1]:\n            ret = False\n            break\n    return ret\ncheck_1 = palindrome(s)\ncheck_2 = palindrome(s[:(n)//2])\ncheck_3 = palindrome(s[(n+2)//2:])\nif check_1 and check_2 and check_3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10695": {"id": 10695, "code": "s = \"level\"\nn = len(s)\ndef palindrome(s):\n    ret = True\n    for i in range(len(s)//2):\n        if s[i] != s[-i-1]:\n            ret = False\n            break\n    return ret\ncheck_1 = palindrome(s)\ncheck_2 = palindrome(s[:(n)//2])\ncheck_3 = palindrome(s[(n+2)//2:])\nif check_1 and check_2 and check_3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10696": {"id": 10696, "code": "s = \"atcoder\"\nn = len(s)\ndef palindrome(s):\n    ret = True\n    for i in range(len(s)//2):\n        if s[i] != s[-i-1]:\n            ret = False\n            break\n    return ret\ncheck_1 = palindrome(s)\ncheck_2 = palindrome(s[:(n)//2])\ncheck_3 = palindrome(s[(n+2)//2:])\nif check_1 and check_2 and check_3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10697": {"id": 10697, "code": "def kaibun(lst):\n    k = len(lst)//2 + len(lst)%2\n    for i in range(1,k+1):\n        if lst[i-1] != lst[-i]:\n            return False\n    return True\nS = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nN = len(S)\nif kaibun(S) and kaibun(S[:(N-1)//2]) and kaibun(S[(N+3)//2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "10698": {"id": 10698, "code": "def kaibun(lst):\n    k = len(lst)//2 + len(lst)%2\n    for i in range(1,k+1):\n        if lst[i-1] != lst[-i]:\n            return False\n    return True\nS = ['l', 'e', 'v', 'e', 'l']\nN = len(S)\nif kaibun(S) and kaibun(S[:(N-1)//2]) and kaibun(S[(N+3)//2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10699": {"id": 10699, "code": "def kaibun(lst):\n    k = len(lst)//2 + len(lst)%2\n    for i in range(1,k+1):\n        if lst[i-1] != lst[-i]:\n            return False\n    return True\nS = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nN = len(S)\nif kaibun(S) and kaibun(S[:(N-1)//2]) and kaibun(S[(N+3)//2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "10700": {"id": 10700, "code": "s = \"akasaka\"\nn=len(s)\nx=s[0:(n-1)//2]\ny=s[(n+3)//2-1:n]\nif x==x[::-1] and y==y[::-1] and s==s[::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10701": {"id": 10701, "code": "s = \"level\"\nn=len(s)\nx=s[0:(n-1)//2]\ny=s[(n+3)//2-1:n]\nif x==x[::-1] and y==y[::-1] and s==s[::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10702": {"id": 10702, "code": "s = \"atcoder\"\nn=len(s)\nx=s[0:(n-1)//2]\ny=s[(n+3)//2-1:n]\nif x==x[::-1] and y==y[::-1] and s==s[::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10703": {"id": 10703, "code": "S = \"akasaka\"\nanswer = 'Yes'\nif S != S[::-1]:\n    answer = 'No'\nfirst = S[:len(S) // 2]\nlast = S[len(S) // 2 + 1:]\nif first != first[::-1]:\n    answer = 'No'\nif last != last[::-1]:\n    answer = 'No'\nprint(answer)", "coverage": [">", ">", ">", "!", ">", ">", ">", "!", ">", "!", ">"]}, "10704": {"id": 10704, "code": "S = \"level\"\nanswer = 'Yes'\nif S != S[::-1]:\n    answer = 'No'\nfirst = S[:len(S) // 2]\nlast = S[len(S) // 2 + 1:]\nif first != first[::-1]:\n    answer = 'No'\nif last != last[::-1]:\n    answer = 'No'\nprint(answer)", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">"]}, "10705": {"id": 10705, "code": "S = \"atcoder\"\nanswer = 'Yes'\nif S != S[::-1]:\n    answer = 'No'\nfirst = S[:len(S) // 2]\nlast = S[len(S) // 2 + 1:]\nif first != first[::-1]:\n    answer = 'No'\nif last != last[::-1]:\n    answer = 'No'\nprint(answer)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10706": {"id": 10706, "code": "S = \"akasaka\"\nn=len(S)\nSrev=''.join(list(reversed(S)))\nS1=S[0:(n-1)//2]\nS2=S[((n+1)//2):n]\nS1rev=''.join(list(reversed(S1)))\nS2rev=''.join(list(reversed(S2)))\nif S==Srev and S1==S1rev and S2==S2rev:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10707": {"id": 10707, "code": "S = \"level\"\nn=len(S)\nSrev=''.join(list(reversed(S)))\nS1=S[0:(n-1)//2]\nS2=S[((n+1)//2):n]\nS1rev=''.join(list(reversed(S1)))\nS2rev=''.join(list(reversed(S2)))\nif S==Srev and S1==S1rev and S2==S2rev:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10708": {"id": 10708, "code": "S = \"atcoder\"\nn=len(S)\nSrev=''.join(list(reversed(S)))\nS1=S[0:(n-1)//2]\nS2=S[((n+1)//2):n]\nS1rev=''.join(list(reversed(S1)))\nS2rev=''.join(list(reversed(S2)))\nif S==Srev and S1==S1rev and S2==S2rev:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10709": {"id": 10709, "code": "def main():\n    s = \"akasaka\"\n    n = len(s)\n    rule1 = True\n    rule2 = True\n    rule3 = True\n    for i in range(n):\n        if s[i] != s[n - 1 - i]:\n            rule1 = False\n            break\n    for i in range(n // 2):\n        if s[i] != s[n // 2 - 1 - i]:\n            rule2 = False\n            break\n    for i in range(n // 2):\n        if s[n // 2 + 1 + i] != s[n - 1 - i]:\n            rule3 = False\n            break\n    if rule1 and rule2 and rule3:\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", ">"]}, "10710": {"id": 10710, "code": "def main():\n    s = \"level\"\n    n = len(s)\n    rule1 = True\n    rule2 = True\n    rule3 = True\n    for i in range(n):\n        if s[i] != s[n - 1 - i]:\n            rule1 = False\n            break\n    for i in range(n // 2):\n        if s[i] != s[n // 2 - 1 - i]:\n            rule2 = False\n            break\n    for i in range(n // 2):\n        if s[n // 2 + 1 + i] != s[n - 1 - i]:\n            rule3 = False\n            break\n    if rule1 and rule2 and rule3:\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">"]}, "10711": {"id": 10711, "code": "def main():\n    s = \"atcoder\"\n    n = len(s)\n    rule1 = True\n    rule2 = True\n    rule3 = True\n    for i in range(n):\n        if s[i] != s[n - 1 - i]:\n            rule1 = False\n            break\n    for i in range(n // 2):\n        if s[i] != s[n // 2 - 1 - i]:\n            rule2 = False\n            break\n    for i in range(n // 2):\n        if s[n // 2 + 1 + i] != s[n - 1 - i]:\n            rule3 = False\n            break\n    if rule1 and rule2 and rule3:\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">"]}, "10712": {"id": 10712, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nif s == list(reversed(s)) and s[:len(s)//2] == list(reversed(s[:len(s)//2])):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", "!", "!"]}, "10713": {"id": 10713, "code": "s = ['l', 'e', 'v', 'e', 'l']\nif s == list(reversed(s)) and s[:len(s)//2] == list(reversed(s[:len(s)//2])):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", "!", "!", ">"]}, "10714": {"id": 10714, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nif s == list(reversed(s)) and s[:len(s)//2] == list(reversed(s[:len(s)//2])):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", "!", "!", ">"]}, "10715": {"id": 10715, "code": "S = \"akasaka\"\nN = len(S)\nS1 = S[:(N - 1) // 2]\nS2 = S[(N + 3) // 2 - 1:]\ndef check(s):\n    i = 0\n    j = len(s) - 1\n    while j > i:\n        if s[j] != s[i]:\n            return False\n        j -= 1\n        i += 1\n    return True\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "10716": {"id": 10716, "code": "S = \"level\"\nN = len(S)\nS1 = S[:(N - 1) // 2]\nS2 = S[(N + 3) // 2 - 1:]\ndef check(s):\n    i = 0\n    j = len(s) - 1\n    while j > i:\n        if s[j] != s[i]:\n            return False\n        j -= 1\n        i += 1\n    return True\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10717": {"id": 10717, "code": "S = \"atcoder\"\nN = len(S)\nS1 = S[:(N - 1) // 2]\nS2 = S[(N + 3) // 2 - 1:]\ndef check(s):\n    i = 0\n    j = len(s) - 1\n    while j > i:\n        if s[j] != s[i]:\n            return False\n        j -= 1\n        i += 1\n    return True\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10718": {"id": 10718, "code": "s = \"akasaka\"\nn = len(s)\nif s != s[::-1]:\n  print(\"No\")\nelif s[0:(n-1)//2] != s[(n-1)//2-1::-1]:\n  print(\"No\")\nelif s[(n+3)//2-1:n] != s[n-1:(n+3)//2-2:-1]:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "10719": {"id": 10719, "code": "s = \"level\"\nn = len(s)\nif s != s[::-1]:\n  print(\"No\")\nelif s[0:(n-1)//2] != s[(n-1)//2-1::-1]:\n  print(\"No\")\nelif s[(n+3)//2-1:n] != s[n-1:(n+3)//2-2:-1]:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", "!", ">", ">", "!", "!", "!", "!"]}, "10720": {"id": 10720, "code": "s = \"atcoder\"\nn = len(s)\nif s != s[::-1]:\n  print(\"No\")\nelif s[0:(n-1)//2] != s[(n-1)//2-1::-1]:\n  print(\"No\")\nelif s[(n+3)//2-1:n] != s[n-1:(n+3)//2-2:-1]:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "10721": {"id": 10721, "code": "def check(string):\n    if string == string[::-1]:\n        return True\n    else:\n        return False\nS = \"akasaka\"\nn = len(S)\nS1 = S[:(n-1)//2]\nS2 = S[(n+1)//2:]\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10722": {"id": 10722, "code": "def check(string):\n    if string == string[::-1]:\n        return True\n    else:\n        return False\nS = \"level\"\nn = len(S)\nS1 = S[:(n-1)//2]\nS2 = S[(n+1)//2:]\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10723": {"id": 10723, "code": "def check(string):\n    if string == string[::-1]:\n        return True\n    else:\n        return False\nS = \"atcoder\"\nn = len(S)\nS1 = S[:(n-1)//2]\nS2 = S[(n+1)//2:]\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10724": {"id": 10724, "code": "S = \"akasaka\"\nN = len(S)\ndef is_palindrome(s):\n    return s == ''.join(list(reversed(s)))\nans = 'Yes' if is_palindrome(S) and is_palindrome(S[:(N-1)//2]) and is_palindrome(S[(N+1)//2:]) else 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "10725": {"id": 10725, "code": "S = \"level\"\nN = len(S)\ndef is_palindrome(s):\n    return s == ''.join(list(reversed(s)))\nans = 'Yes' if is_palindrome(S) and is_palindrome(S[:(N-1)//2]) and is_palindrome(S[(N+1)//2:]) else 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "10726": {"id": 10726, "code": "S = \"atcoder\"\nN = len(S)\ndef is_palindrome(s):\n    return s == ''.join(list(reversed(s)))\nans = 'Yes' if is_palindrome(S) and is_palindrome(S[:(N-1)//2]) and is_palindrome(S[(N+1)//2:]) else 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "10727": {"id": 10727, "code": "s = \"akasaka\"\nn = len(s)\nflag = 1\nfor i in range(int(n/2)):\n    if s[i] != s[n-i-1]:\n        flag = 0\n        break\nn2 = int((n-1)/2)\nif flag == 1:\n    for i in range(int(n2/2)):\n        if s[i] != s[n2-i-1]:\n            flag = 0\n            break\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!"]}, "10728": {"id": 10728, "code": "s = \"level\"\nn = len(s)\nflag = 1\nfor i in range(int(n/2)):\n    if s[i] != s[n-i-1]:\n        flag = 0\n        break\nn2 = int((n-1)/2)\nif flag == 1:\n    for i in range(int(n2/2)):\n        if s[i] != s[n2-i-1]:\n            flag = 0\n            break\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10729": {"id": 10729, "code": "s = \"atcoder\"\nn = len(s)\nflag = 1\nfor i in range(int(n/2)):\n    if s[i] != s[n-i-1]:\n        flag = 0\n        break\nn2 = int((n-1)/2)\nif flag == 1:\n    for i in range(int(n2/2)):\n        if s[i] != s[n2-i-1]:\n            flag = 0\n            break\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", ">"]}, "10730": {"id": 10730, "code": "S = \"akasaka\"\nN=len(S)\ncon_2=S[:(N-1)//2]\ncon_3=S[((N+3)//2-1):]\nif S==S[::-1] and con_2==con_2[::-1] and con_3==con_3[::-1]:\n            print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10731": {"id": 10731, "code": "S = \"level\"\nN=len(S)\ncon_2=S[:(N-1)//2]\ncon_3=S[((N+3)//2-1):]\nif S==S[::-1] and con_2==con_2[::-1] and con_3==con_3[::-1]:\n            print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10732": {"id": 10732, "code": "S = \"atcoder\"\nN=len(S)\ncon_2=S[:(N-1)//2]\ncon_3=S[((N+3)//2-1):]\nif S==S[::-1] and con_2==con_2[::-1] and con_3==con_3[::-1]:\n            print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10733": {"id": 10733, "code": "def is_kaibun(string):\n    isk = True\n    length = len(string)\n    for i in range(length // 2):\n        if string[i] != string[length - 1 - i]:\n            isk = False\n            break\n    return isk\ns = \"akasaka\"\nlen_s = len(s)\nif is_kaibun(s[0:(len_s // 2)]) and is_kaibun(s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!"]}, "10734": {"id": 10734, "code": "def is_kaibun(string):\n    isk = True\n    length = len(string)\n    for i in range(length // 2):\n        if string[i] != string[length - 1 - i]:\n            isk = False\n            break\n    return isk\ns = \"level\"\nlen_s = len(s)\nif is_kaibun(s[0:(len_s // 2)]) and is_kaibun(s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10735": {"id": 10735, "code": "def is_kaibun(string):\n    isk = True\n    length = len(string)\n    for i in range(length // 2):\n        if string[i] != string[length - 1 - i]:\n            isk = False\n            break\n    return isk\ns = \"atcoder\"\nlen_s = len(s)\nif is_kaibun(s[0:(len_s // 2)]) and is_kaibun(s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10736": {"id": 10736, "code": "S = \"akasaka\"\nN = len(S)\ndef palindrome(string):\n  return 0 if string==string[::-1] else 1\nls1 = S[0:int((N-1)/2)]\nls2 = S[int((N+3)/2-1):N]\nif palindrome(S) == palindrome(ls1) == palindrome(ls2) == 0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10737": {"id": 10737, "code": "S = \"level\"\nN = len(S)\ndef palindrome(string):\n  return 0 if string==string[::-1] else 1\nls1 = S[0:int((N-1)/2)]\nls2 = S[int((N+3)/2-1):N]\nif palindrome(S) == palindrome(ls1) == palindrome(ls2) == 0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10738": {"id": 10738, "code": "S = \"atcoder\"\nN = len(S)\ndef palindrome(string):\n  return 0 if string==string[::-1] else 1\nls1 = S[0:int((N-1)/2)]\nls2 = S[int((N+3)/2-1):N]\nif palindrome(S) == palindrome(ls1) == palindrome(ls2) == 0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10739": {"id": 10739, "code": "s = \"akasaka\"\nans=0\nif s==s[::-1] and s[:(len(s)-1)//2]==s[(len(s)-1)//2-1::-1] and s[(len(s)+3)//2-1:]==s[:(len(s)+3)//2-2:-1]:\n    ans+=1\nprint(\"NYoe s\"[ans::2])", "coverage": [">", ">", ">", ">", ">"]}, "10740": {"id": 10740, "code": "s = \"level\"\nans=0\nif s==s[::-1] and s[:(len(s)-1)//2]==s[(len(s)-1)//2-1::-1] and s[(len(s)+3)//2-1:]==s[:(len(s)+3)//2-2:-1]:\n    ans+=1\nprint(\"NYoe s\"[ans::2])", "coverage": [">", ">", ">", "!", ">"]}, "10741": {"id": 10741, "code": "s = \"atcoder\"\nans=0\nif s==s[::-1] and s[:(len(s)-1)//2]==s[(len(s)-1)//2-1::-1] and s[(len(s)+3)//2-1:]==s[:(len(s)+3)//2-2:-1]:\n    ans+=1\nprint(\"NYoe s\"[ans::2])", "coverage": [">", ">", ">", "!", ">"]}, "10742": {"id": 10742, "code": "S = \"akasaka\"\nt=len(S)\nprint(\"YNeos\"[sum(1for i in range(t) if S[i]!=S[~i] )!=0 or S[(t+2)//2:]!=S[:(t-1)//2]::2])", "coverage": [">", ">", ">"]}, "10743": {"id": 10743, "code": "S = \"level\"\nt=len(S)\nprint(\"YNeos\"[sum(1for i in range(t) if S[i]!=S[~i] )!=0 or S[(t+2)//2:]!=S[:(t-1)//2]::2])", "coverage": [">", ">", ">"]}, "10744": {"id": 10744, "code": "S = \"atcoder\"\nt=len(S)\nprint(\"YNeos\"[sum(1for i in range(t) if S[i]!=S[~i] )!=0 or S[(t+2)//2:]!=S[:(t-1)//2]::2])", "coverage": [">", ">", ">"]}, "10745": {"id": 10745, "code": "s = \"akasaka\"\na = int((len(s)-1)/2)\nb = int((len(s)+3)/2)\nr = ''.join(reversed(s[b-1:]))\nif s[:a]== s[:a:-1] and s[b-1:]== r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10746": {"id": 10746, "code": "s = \"level\"\na = int((len(s)-1)/2)\nb = int((len(s)+3)/2)\nr = ''.join(reversed(s[b-1:]))\nif s[:a]== s[:a:-1] and s[b-1:]== r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10747": {"id": 10747, "code": "s = \"atcoder\"\na = int((len(s)-1)/2)\nb = int((len(s)+3)/2)\nr = ''.join(reversed(s[b-1:]))\nif s[:a]== s[:a:-1] and s[b-1:]== r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10748": {"id": 10748, "code": "s = \"akasaka\"\na = s[::-1]\nn = len(s)\nans = \"Yes\"\nif s != a: ans = \"No\"\nelif s[:(n-1)//2] != s[(n+3)//2-1:]: ans = \"No\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10749": {"id": 10749, "code": "s = \"level\"\na = s[::-1]\nn = len(s)\nans = \"Yes\"\nif s != a: ans = \"No\"\nelif s[:(n-1)//2] != s[(n+3)//2-1:]: ans = \"No\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10750": {"id": 10750, "code": "s = \"atcoder\"\na = s[::-1]\nn = len(s)\nans = \"Yes\"\nif s != a: ans = \"No\"\nelif s[:(n-1)//2] != s[(n+3)//2-1:]: ans = \"No\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", ">"]}, "10751": {"id": 10751, "code": "S = \"akasaka\"\nS1 = S[0:((len(S) - 1) // 2)]\nS2 = S[((len(S) + 3) // 2 - 1):]\nif S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1]:\n\tprint('Yes')\nelse:\n\tprint('No')", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10752": {"id": 10752, "code": "S = \"level\"\nS1 = S[0:((len(S) - 1) // 2)]\nS2 = S[((len(S) + 3) // 2 - 1):]\nif S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1]:\n\tprint('Yes')\nelse:\n\tprint('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10753": {"id": 10753, "code": "S = \"atcoder\"\nS1 = S[0:((len(S) - 1) // 2)]\nS2 = S[((len(S) + 3) // 2 - 1):]\nif S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1]:\n\tprint('Yes')\nelse:\n\tprint('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10754": {"id": 10754, "code": "S = \"akasaka\"\nN = len(S)\nSf = S[0:(N-1)//2]\nNSf = len(Sf)\nSb = S[(N+3)//2 -1:N+1]\nNSb = len(Sb)\nans = 0\nfor i in range(N//2):\n    if S[i:i+1] != S[N-1-i:N-i]:\n        ans = 1\nfor i in range(NSf//2):\n    if Sf[i:i+1] != Sf[NSf-1-i:NSf-i]:\n        ans = 1\nfor i in range(NSb//2):\n    if Sb[i:i+1] != Sb[NSb-1-i:NSb-i]:\n        ans = 1\nprint('Yes') if ans == 0 else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", ">"]}, "10755": {"id": 10755, "code": "S = \"level\"\nN = len(S)\nSf = S[0:(N-1)//2]\nNSf = len(Sf)\nSb = S[(N+3)//2 -1:N+1]\nNSb = len(Sb)\nans = 0\nfor i in range(N//2):\n    if S[i:i+1] != S[N-1-i:N-i]:\n        ans = 1\nfor i in range(NSf//2):\n    if Sf[i:i+1] != Sf[NSf-1-i:NSf-i]:\n        ans = 1\nfor i in range(NSb//2):\n    if Sb[i:i+1] != Sb[NSb-1-i:NSb-i]:\n        ans = 1\nprint('Yes') if ans == 0 else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">"]}, "10756": {"id": 10756, "code": "S = \"atcoder\"\nN = len(S)\nSf = S[0:(N-1)//2]\nNSf = len(Sf)\nSb = S[(N+3)//2 -1:N+1]\nNSb = len(Sb)\nans = 0\nfor i in range(N//2):\n    if S[i:i+1] != S[N-1-i:N-i]:\n        ans = 1\nfor i in range(NSf//2):\n    if Sf[i:i+1] != Sf[NSf-1-i:NSf-i]:\n        ans = 1\nfor i in range(NSb//2):\n    if Sb[i:i+1] != Sb[NSb-1-i:NSb-i]:\n        ans = 1\nprint('Yes') if ans == 0 else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10757": {"id": 10757, "code": "import sys\nS = \"akasaka\"\nN = len(S)\ndef is_palindrome(s):\n    return s == s[::-1]\nif not is_palindrome(S):\n    print('No')\n    sys.exit()\nif not is_palindrome(S[0:int((N - 1) / 2)]):\n    print('No')\n    sys.exit()\nif not is_palindrome(S[int((N + 3) / 2 - 1):]):\n    print('No')\n    sys.exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", "!", "!", ">"]}, "10758": {"id": 10758, "code": "s = \"akasaka\"\nn=len(s)\na=s[0:(n-1)//2]\nb=s[(n+3)//2-1:n]\nc=a[::-1]\nd=b[::-1]\nsr=s[::-1]\nfor i in range(n):\n    if s[i]==sr[i]:\n        pass\n    else:\n        print(\"No\")\n        exit()\nfor i in range(len(a)):\n    if a[i]==c[i]:\n        pass\n    else:\n        print(\"No\")\n        exit()\nfor i in range(len(b)):\n    if b[i]==d[i]:\n        pass\n    else:\n        print(\"No\")\n        exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", "!", "!", "!", ">", ">", ">", "!", "!", "!", ">"]}, "10759": {"id": 10759, "code": "def check(a):\n  for i in range(int(len(a)/2)):\n    if a[i]!=a[-(i+1)]:\n       return False\n  return True\nS = \"akasaka\"\nif check(S):\n  a=S[0:int(len(S)/2)]\n  b=S[int(len(S)/2)+1:len(S)]\n  if check(a) and check(b):\n    print('Yes')\n  else:\n    print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "10760": {"id": 10760, "code": "def check(a):\n  for i in range(int(len(a)/2)):\n    if a[i]!=a[-(i+1)]:\n       return False\n  return True\nS = \"level\"\nif check(S):\n  a=S[0:int(len(S)/2)]\n  b=S[int(len(S)/2)+1:len(S)]\n  if check(a) and check(b):\n    print('Yes')\n  else:\n    print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "10761": {"id": 10761, "code": "def check(a):\n  for i in range(int(len(a)/2)):\n    if a[i]!=a[-(i+1)]:\n       return False\n  return True\nS = \"atcoder\"\nif check(S):\n  a=S[0:int(len(S)/2)]\n  b=S[int(len(S)/2)+1:len(S)]\n  if check(a) and check(b):\n    print('Yes')\n  else:\n    print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10762": {"id": 10762, "code": "if __name__ == '__main__':\n    s = \"akasaka\"\n    cnt = 0\n    r = s[::-1]\n    if s == r:\n        cnt += 1\n    n = len(s)\n    n2 = (n-1)//2\n    ss = s[:n2]\n    rr = ss[::-1]\n    if ss == rr:\n        cnt += 1\n    n3 = (n+3) //2\n    sss = s[n3-1:]\n    rrr = sss[::-1]\n    if sss == rrr:\n        cnt += 1\n    if cnt==3 :\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10763": {"id": 10763, "code": "if __name__ == '__main__':\n    s = \"level\"\n    cnt = 0\n    r = s[::-1]\n    if s == r:\n        cnt += 1\n    n = len(s)\n    n2 = (n-1)//2\n    ss = s[:n2]\n    rr = ss[::-1]\n    if ss == rr:\n        cnt += 1\n    n3 = (n+3) //2\n    sss = s[n3-1:]\n    rrr = sss[::-1]\n    if sss == rrr:\n        cnt += 1\n    if cnt==3 :\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10764": {"id": 10764, "code": "if __name__ == '__main__':\n    s = \"atcoder\"\n    cnt = 0\n    r = s[::-1]\n    if s == r:\n        cnt += 1\n    n = len(s)\n    n2 = (n-1)//2\n    ss = s[:n2]\n    rr = ss[::-1]\n    if ss == rr:\n        cnt += 1\n    n3 = (n+3) //2\n    sss = s[n3-1:]\n    rrr = sss[::-1]\n    if sss == rrr:\n        cnt += 1\n    if cnt==3 :\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10765": {"id": 10765, "code": "S = \"akasaka\"\ndef is_kaibun(s):\n    return s[:len(s)//2] == s[:(len(s)-1)//2:-1]\nflg = is_kaibun(S) and is_kaibun(S[:len(S)//2]) and is_kaibun(S[:len(S)//2:-1])\nprint('Yes' if flg else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10766": {"id": 10766, "code": "S = \"level\"\ndef is_kaibun(s):\n    return s[:len(s)//2] == s[:(len(s)-1)//2:-1]\nflg = is_kaibun(S) and is_kaibun(S[:len(S)//2]) and is_kaibun(S[:len(S)//2:-1])\nprint('Yes' if flg else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10767": {"id": 10767, "code": "S = \"atcoder\"\ndef is_kaibun(s):\n    return s[:len(s)//2] == s[:(len(s)-1)//2:-1]\nflg = is_kaibun(S) and is_kaibun(S[:len(S)//2]) and is_kaibun(S[:len(S)//2:-1])\nprint('Yes' if flg else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10768": {"id": 10768, "code": "S = \"akasaka\"\nN=len(S)\nl=(N-1)//2\nfor i in range(l):\n  if S[i]!=S[N-1-i]:\n    print('No')\n    exit()\nL=S[:l]\nfor i in range(l):\n  if S[i]!=S[l-1-i]:\n    print('No')\n    exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "10769": {"id": 10769, "code": "def isPalindrome(string):\n    flag = True\n    len_string = len(string)\n    if len_string == 1:\n        return flag\n    for i in range(len_string//2):\n        if string[i] != string[-1-i]:\n            flag = False\n            break\n    return flag\nS = \"akasaka\"\nlen_s = len(S)\nfro_s = S[:len_s//2]\nif len_s % 2 == 0:\n    bak_s = S[-len_s//2:]\nelse:\n    bak_s = S[-len_s//2 + 1:]\nif isPalindrome(S) and isPalindrome(fro_s) and isPalindrome(bak_s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!"]}, "10770": {"id": 10770, "code": "def isPalindrome(string):\n    flag = True\n    len_string = len(string)\n    if len_string == 1:\n        return flag\n    for i in range(len_string//2):\n        if string[i] != string[-1-i]:\n            flag = False\n            break\n    return flag\nS = \"level\"\nlen_s = len(S)\nfro_s = S[:len_s//2]\nif len_s % 2 == 0:\n    bak_s = S[-len_s//2:]\nelse:\n    bak_s = S[-len_s//2 + 1:]\nif isPalindrome(S) and isPalindrome(fro_s) and isPalindrome(bak_s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10771": {"id": 10771, "code": "def isPalindrome(string):\n    flag = True\n    len_string = len(string)\n    if len_string == 1:\n        return flag\n    for i in range(len_string//2):\n        if string[i] != string[-1-i]:\n            flag = False\n            break\n    return flag\nS = \"atcoder\"\nlen_s = len(S)\nfro_s = S[:len_s//2]\nif len_s % 2 == 0:\n    bak_s = S[-len_s//2:]\nelse:\n    bak_s = S[-len_s//2 + 1:]\nif isPalindrome(S) and isPalindrome(fro_s) and isPalindrome(bak_s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10772": {"id": 10772, "code": "S = \"akasaka\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:N]\nprint(\"Yes\" if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10773": {"id": 10773, "code": "S = \"level\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:N]\nprint(\"Yes\" if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10774": {"id": 10774, "code": "S = \"atcoder\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:N]\nprint(\"Yes\" if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10775": {"id": 10775, "code": "s = \"akasaka\"\ns1 = list(s[:((len(s)) - 1) // 2])\ns2 = list(s[(len(s) + 2) // 2:])\nif s1 == s2:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10776": {"id": 10776, "code": "s = \"level\"\ns1 = list(s[:((len(s)) - 1) // 2])\ns2 = list(s[(len(s) + 2) // 2:])\nif s1 == s2:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10777": {"id": 10777, "code": "s = \"atcoder\"\ns1 = list(s[:((len(s)) - 1) // 2])\ns2 = list(s[(len(s) + 2) // 2:])\nif s1 == s2:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10778": {"id": 10778, "code": "s = \"akasaka\"\nn=len(s)\np=n//2\nt=1\nfor i in range(p):\n    if s[i]==s[p-1-i]:\n        t=1\n    else:\n        t=0\n        break;\nx=1\nfor i in range(p):\n    if s[p+1+i]==s[n-1-i]:\n        x=1\n    else:\n       x=0\n       break\ny=1\nfor i in range(n):\n    if s[i]==s[n-1-i]:\n        y=1\n    else:\n       y=0\n       break\nif (t==1 and x==1 and y==1):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", ">", ">", "!", "!"]}, "10779": {"id": 10779, "code": "s = \"level\"\nn=len(s)\np=n//2\nt=1\nfor i in range(p):\n    if s[i]==s[p-1-i]:\n        t=1\n    else:\n        t=0\n        break;\nx=1\nfor i in range(p):\n    if s[p+1+i]==s[n-1-i]:\n        x=1\n    else:\n       x=0\n       break\ny=1\nfor i in range(n):\n    if s[i]==s[n-1-i]:\n        y=1\n    else:\n       y=0\n       break\nif (t==1 and x==1 and y==1):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10780": {"id": 10780, "code": "s = \"atcoder\"\nn=len(s)\np=n//2\nt=1\nfor i in range(p):\n    if s[i]==s[p-1-i]:\n        t=1\n    else:\n        t=0\n        break;\nx=1\nfor i in range(p):\n    if s[p+1+i]==s[n-1-i]:\n        x=1\n    else:\n       x=0\n       break\ny=1\nfor i in range(n):\n    if s[i]==s[n-1-i]:\n        y=1\n    else:\n       y=0\n       break\nif (t==1 and x==1 and y==1):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "10781": {"id": 10781, "code": "def main():\n    S = \"akasaka\"\n    n = len(S)\n    frontN = (n - 1) // 2\n    backN = (n + 3) // 2\n    checkFN = frontN // 2\n    checkFNW = S[0:frontN]\n    for i in range(checkFN):\n        temp = (i + 1) * -1\n        if checkFNW[i] == checkFNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    checkBN = n - backN\n    checkBNW = S[backN - 1:n]\n    for i in range(checkBN // 2):\n        temp = (i + 1) * -1\n        if checkBNW[i] == checkBNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    for i in range(n // 2):\n        temp = (i + 1) * -1\n        if S[i] == S[temp]:\n            continue\n        else:\n            print('No')\n            return\n    print('Yes')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", ">", ">"]}, "10782": {"id": 10782, "code": "def main():\n    S = \"level\"\n    n = len(S)\n    frontN = (n - 1) // 2\n    backN = (n + 3) // 2\n    checkFN = frontN // 2\n    checkFNW = S[0:frontN]\n    for i in range(checkFN):\n        temp = (i + 1) * -1\n        if checkFNW[i] == checkFNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    checkBN = n - backN\n    checkBNW = S[backN - 1:n]\n    for i in range(checkBN // 2):\n        temp = (i + 1) * -1\n        if checkBNW[i] == checkBNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    for i in range(n // 2):\n        temp = (i + 1) * -1\n        if S[i] == S[temp]:\n            continue\n        else:\n            print('No')\n            return\n    print('Yes')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10783": {"id": 10783, "code": "def main():\n    S = \"atcoder\"\n    n = len(S)\n    frontN = (n - 1) // 2\n    backN = (n + 3) // 2\n    checkFN = frontN // 2\n    checkFNW = S[0:frontN]\n    for i in range(checkFN):\n        temp = (i + 1) * -1\n        if checkFNW[i] == checkFNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    checkBN = n - backN\n    checkBNW = S[backN - 1:n]\n    for i in range(checkBN // 2):\n        temp = (i + 1) * -1\n        if checkBNW[i] == checkBNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    for i in range(n // 2):\n        temp = (i + 1) * -1\n        if S[i] == S[temp]:\n            continue\n        else:\n            print('No')\n            return\n    print('Yes')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10784": {"id": 10784, "code": "s = \"akasaka\"\na = s[:len(s)//2]\nb = s[len(s)//2+1:]\nprint('Yes' if s == s[::-1] and a == a[::-1] and b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10785": {"id": 10785, "code": "s = \"level\"\na = s[:len(s)//2]\nb = s[len(s)//2+1:]\nprint('Yes' if s == s[::-1] and a == a[::-1] and b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10786": {"id": 10786, "code": "s = \"atcoder\"\na = s[:len(s)//2]\nb = s[len(s)//2+1:]\nprint('Yes' if s == s[::-1] and a == a[::-1] and b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10787": {"id": 10787, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\ndef ceil(a, b):\n    return (a + b - 1) // b\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\ndef solve():\n    S = \"akasaka\"\n    N = len(S)\n    if S != S[::-1]:\n        return False\n    t = S[:(N - 1) // 2]\n    if t != t[::-1]:\n        return False\n    t = S[(N + 3) // 2 - 1:]\n    if t != t[::-1]:\n        return False\n    return True\ndef main():\n    if solve():\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", "!", "!", ">", "!", "!", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">"]}, "10788": {"id": 10788, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\ndef ceil(a, b):\n    return (a + b - 1) // b\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\ndef solve():\n    S = \"level\"\n    N = len(S)\n    if S != S[::-1]:\n        return False\n    t = S[:(N - 1) // 2]\n    if t != t[::-1]:\n        return False\n    t = S[(N + 3) // 2 - 1:]\n    if t != t[::-1]:\n        return False\n    return True\ndef main():\n    if solve():\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", "!", "!", ">", "!", "!", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", "!", "!", ">", ">", "!", "!", ">", ">", ">"]}, "10789": {"id": 10789, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\ndef ceil(a, b):\n    return (a + b - 1) // b\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\ndef solve():\n    S = \"atcoder\"\n    N = len(S)\n    if S != S[::-1]:\n        return False\n    t = S[:(N - 1) // 2]\n    if t != t[::-1]:\n        return False\n    t = S[(N + 3) // 2 - 1:]\n    if t != t[::-1]:\n        return False\n    return True\ndef main():\n    if solve():\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", "!", "!", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", ">", "!", "!", ">", ">", ">"]}, "10790": {"id": 10790, "code": "s = \"akasaka\"\nn = len(s)\ni = int((n-1)/2)\nt = s[:i]\nii = int((n+3)/2-1)\nu = s[ii:]\nif s == s[::-1] and t == t[::-1] and u == u[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10791": {"id": 10791, "code": "s = \"level\"\nn = len(s)\ni = int((n-1)/2)\nt = s[:i]\nii = int((n+3)/2-1)\nu = s[ii:]\nif s == s[::-1] and t == t[::-1] and u == u[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10792": {"id": 10792, "code": "s = \"atcoder\"\nn = len(s)\ni = int((n-1)/2)\nt = s[:i]\nii = int((n+3)/2-1)\nu = s[ii:]\nif s == s[::-1] and t == t[::-1] and u == u[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10793": {"id": 10793, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\nm = n//2\ns_f = []\ns_l = []\nfor i in range(m):\n    s_f.append(s[i])\nfor i in range(1,m + 1):\n    s_l.append(s[-i])\ns_r = list(reversed(s))\ns_f_r = list(reversed(s_f))\ns_l_r = list(reversed(s_l))\nif s_r == s:\n    if s_f_r == s_f and s_l_r == s_l:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "10794": {"id": 10794, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\nm = n//2\ns_f = []\ns_l = []\nfor i in range(m):\n    s_f.append(s[i])\nfor i in range(1,m + 1):\n    s_l.append(s[-i])\ns_r = list(reversed(s))\ns_f_r = list(reversed(s_f))\ns_l_r = list(reversed(s_l))\nif s_r == s:\n    if s_f_r == s_f and s_l_r == s_l:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "10795": {"id": 10795, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\nm = n//2\ns_f = []\ns_l = []\nfor i in range(m):\n    s_f.append(s[i])\nfor i in range(1,m + 1):\n    s_l.append(s[-i])\ns_r = list(reversed(s))\ns_f_r = list(reversed(s_f))\ns_l_r = list(reversed(s_l))\nif s_r == s:\n    if s_f_r == s_f and s_l_r == s_l:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">"]}, "10796": {"id": 10796, "code": "S = \"akasaka\"\ncount = 0\nN = len(S)\na = int((N-1)/2 )\nb = int((N +3)/2)\nif S[:a] ==S[b-1:]:\n  pass\nelse:\n  count +=1\nSS = S[b-1:]\nSSS =list(SS)\nfor i in range(len(SSS)):\n  if SSS[i] != SSS[-i-1]:\n    count +=1\nif count==0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", ">", ">", "!", "!"]}, "10797": {"id": 10797, "code": "S = \"level\"\ncount = 0\nN = len(S)\na = int((N-1)/2 )\nb = int((N +3)/2)\nif S[:a] ==S[b-1:]:\n  pass\nelse:\n  count +=1\nSS = S[b-1:]\nSSS =list(SS)\nfor i in range(len(SSS)):\n  if SSS[i] != SSS[-i-1]:\n    count +=1\nif count==0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10798": {"id": 10798, "code": "S = \"atcoder\"\ncount = 0\nN = len(S)\na = int((N-1)/2 )\nb = int((N +3)/2)\nif S[:a] ==S[b-1:]:\n  pass\nelse:\n  count +=1\nSS = S[b-1:]\nSSS =list(SS)\nfor i in range(len(SSS)):\n  if SSS[i] != SSS[-i-1]:\n    count +=1\nif count==0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10799": {"id": 10799, "code": "S = \"akasaka\"\ni=0\nkot=[]\nfor a in S:\n    kot.append(a)\ntok=list(reversed(kot))\nfor a in range(len(kot)):\n    if kot[a]==tok[a]:\n        i=0\n    else:\n        print(\"No\")\n        i=1\n        break\nif i==0:\n    for a in range(int((len(kot)-1)/2)):\n        if kot[a]==tok[int((len(kot)-1)/2)-a-1]:\n            i=0\n        else:\n            print(\"No\")\n            i=1\n            break\nif i==0:\n        for a in range(int((len(kot)-1)/2)):\n            if kot[int((len(kot)+3)/2)+a-1]==tok[-a-1]:\n                i=0\n            else:\n                print(\"No\")\n                i=1\n                break\nif i==0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">"]}, "10800": {"id": 10800, "code": "S = \"level\"\ni=0\nkot=[]\nfor a in S:\n    kot.append(a)\ntok=list(reversed(kot))\nfor a in range(len(kot)):\n    if kot[a]==tok[a]:\n        i=0\n    else:\n        print(\"No\")\n        i=1\n        break\nif i==0:\n    for a in range(int((len(kot)-1)/2)):\n        if kot[a]==tok[int((len(kot)-1)/2)-a-1]:\n            i=0\n        else:\n            print(\"No\")\n            i=1\n            break\nif i==0:\n        for a in range(int((len(kot)-1)/2)):\n            if kot[int((len(kot)+3)/2)+a-1]==tok[-a-1]:\n                i=0\n            else:\n                print(\"No\")\n                i=1\n                break\nif i==0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!"]}, "10801": {"id": 10801, "code": "S = \"atcoder\"\ni=0\nkot=[]\nfor a in S:\n    kot.append(a)\ntok=list(reversed(kot))\nfor a in range(len(kot)):\n    if kot[a]==tok[a]:\n        i=0\n    else:\n        print(\"No\")\n        i=1\n        break\nif i==0:\n    for a in range(int((len(kot)-1)/2)):\n        if kot[a]==tok[int((len(kot)-1)/2)-a-1]:\n            i=0\n        else:\n            print(\"No\")\n            i=1\n            break\nif i==0:\n        for a in range(int((len(kot)-1)/2)):\n            if kot[int((len(kot)+3)/2)+a-1]==tok[-a-1]:\n                i=0\n            else:\n                print(\"No\")\n                i=1\n                break\nif i==0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!"]}, "10802": {"id": 10802, "code": "def kaibun(moji):\n    n = len(moji)\n    for i in range(0,int(n/2)):\n        if s[i]!=s[n-1-i]:\n            return False\n    return True\ns = \"akasaka\"\nn = len(s)\nmoji1 = int((n - 1) / 2)\nmoji2 = int((n + 3) / 2)\nif kaibun(s) and kaibun(s[:moji1]) and kaibun(s[moji2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10803": {"id": 10803, "code": "def kaibun(moji):\n    n = len(moji)\n    for i in range(0,int(n/2)):\n        if s[i]!=s[n-1-i]:\n            return False\n    return True\ns = \"level\"\nn = len(s)\nmoji1 = int((n - 1) / 2)\nmoji2 = int((n + 3) / 2)\nif kaibun(s) and kaibun(s[:moji1]) and kaibun(s[moji2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10804": {"id": 10804, "code": "def kaibun(moji):\n    n = len(moji)\n    for i in range(0,int(n/2)):\n        if s[i]!=s[n-1-i]:\n            return False\n    return True\ns = \"atcoder\"\nn = len(s)\nmoji1 = int((n - 1) / 2)\nmoji2 = int((n + 3) / 2)\nif kaibun(s) and kaibun(s[:moji1]) and kaibun(s[moji2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10805": {"id": 10805, "code": "s = \"akasaka\"\nprint(\"Yes\" if s == s[::-1] and s[:len(s)//2] == s[len(s)//2-1::-1] else \"No\")", "coverage": [">", ">"]}, "10806": {"id": 10806, "code": "s = \"level\"\nprint(\"Yes\" if s == s[::-1] and s[:len(s)//2] == s[len(s)//2-1::-1] else \"No\")", "coverage": [">", ">"]}, "10807": {"id": 10807, "code": "s = \"atcoder\"\nprint(\"Yes\" if s == s[::-1] and s[:len(s)//2] == s[len(s)//2-1::-1] else \"No\")", "coverage": [">", ">"]}, "10808": {"id": 10808, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"akasaka\"\nl = (len(s) - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">"]}, "10809": {"id": 10809, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"level\"\nl = (len(s) - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">"]}, "10810": {"id": 10810, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"atcoder\"\nl = (len(s) - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">"]}, "10811": {"id": 10811, "code": "import sys\nS = \"akasaka\"\nN=len(S)\nif S!=S[::-1]:\n  print(\"No\")\n  sys.exit(0)\ncheck=S[0:int((N-1)/2)]\nif check!=check[::-1]:\n  print(\"No\")\n  sys.exit(0)\ncheck=S[int((N+3)/2)-1:N]\nif check!=check[::-1]:\n  print(\"No\")\n  sys.exit(0)\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10812": {"id": 10812, "code": "s = \"akasaka\"\nflag = 0\nsr = s[-1::-1]\nif sr == s:\n    flag+=1\ns1 = s[:(len(s)-1)//2]\ns1r = s1[-1::-1]\nif s1 == s1r:\n    flag += 1\ns2 = s[(len(s)+3)//2-1:]\ns2r = s2[-1::-1]\nif s2 == s2r:\n    flag+=1\nprint('Yes' if flag == 3 else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10813": {"id": 10813, "code": "s = \"level\"\nflag = 0\nsr = s[-1::-1]\nif sr == s:\n    flag+=1\ns1 = s[:(len(s)-1)//2]\ns1r = s1[-1::-1]\nif s1 == s1r:\n    flag += 1\ns2 = s[(len(s)+3)//2-1:]\ns2r = s2[-1::-1]\nif s2 == s2r:\n    flag+=1\nprint('Yes' if flag == 3 else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">"]}, "10814": {"id": 10814, "code": "s = \"atcoder\"\nflag = 0\nsr = s[-1::-1]\nif sr == s:\n    flag+=1\ns1 = s[:(len(s)-1)//2]\ns1r = s1[-1::-1]\nif s1 == s1r:\n    flag += 1\ns2 = s[(len(s)+3)//2-1:]\ns2r = s2[-1::-1]\nif s2 == s2r:\n    flag+=1\nprint('Yes' if flag == 3 else 'No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">"]}, "10815": {"id": 10815, "code": "def isPalindrome(str):\n  ret = True\n  l = len(str)\n  end = int(l/2)\n  for i in range(end):\n    if str[i] != str[-1-i]:\n      ret = False\n  return ret\nans = \"Yes\"\nstr = \"akasaka\"\nstr_l = len(str)\nif isPalindrome(str) and isPalindrome(str[:int(str_l/2)]) and isPalindrome(str[-int(str_l/2):]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10816": {"id": 10816, "code": "def isPalindrome(str):\n  ret = True\n  l = len(str)\n  end = int(l/2)\n  for i in range(end):\n    if str[i] != str[-1-i]:\n      ret = False\n  return ret\nans = \"Yes\"\nstr = \"level\"\nstr_l = len(str)\nif isPalindrome(str) and isPalindrome(str[:int(str_l/2)]) and isPalindrome(str[-int(str_l/2):]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10817": {"id": 10817, "code": "def isPalindrome(str):\n  ret = True\n  l = len(str)\n  end = int(l/2)\n  for i in range(end):\n    if str[i] != str[-1-i]:\n      ret = False\n  return ret\nans = \"Yes\"\nstr = \"atcoder\"\nstr_l = len(str)\nif isPalindrome(str) and isPalindrome(str[:int(str_l/2)]) and isPalindrome(str[-int(str_l/2):]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10818": {"id": 10818, "code": "s = \"level\"\nsi=s[::-1]\na=s[:(len(s)-1)//2]\nb=s[(len(s)+1)//2:]\nif s == si :\n    if a == a[::-1] and b == b[::-1]:\n        print((\"Yes\"))\n        exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10819": {"id": 10819, "code": "s = \"atcoder\"\nsi=s[::-1]\na=s[:(len(s)-1)//2]\nb=s[(len(s)+1)//2:]\nif s == si :\n    if a == a[::-1] and b == b[::-1]:\n        print((\"Yes\"))\n        exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "10820": {"id": 10820, "code": "S = \"akasaka\"\nl = len(S)\nT = ''.join(list(reversed(S)))\na = S[:(l-1)//2]\na1 = ''.join(list(reversed(a)))\nb = S[(l+3)//2-1:l]\nb1 = ''.join(list(reversed(b)))\nif S == T:\n    if a == a1 and b == b1:\n        print('Yes')\n    if a != a1 or b != b1:\n        print('No')\nif S != T:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!"]}, "10821": {"id": 10821, "code": "S = \"level\"\nl = len(S)\nT = ''.join(list(reversed(S)))\na = S[:(l-1)//2]\na1 = ''.join(list(reversed(a)))\nb = S[(l+3)//2-1:l]\nb1 = ''.join(list(reversed(b)))\nif S == T:\n    if a == a1 and b == b1:\n        print('Yes')\n    if a != a1 or b != b1:\n        print('No')\nif S != T:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!"]}, "10822": {"id": 10822, "code": "S = \"atcoder\"\nl = len(S)\nT = ''.join(list(reversed(S)))\na = S[:(l-1)//2]\na1 = ''.join(list(reversed(a)))\nb = S[(l+3)//2-1:l]\nb1 = ''.join(list(reversed(b)))\nif S == T:\n    if a == a1 and b == b1:\n        print('Yes')\n    if a != a1 or b != b1:\n        print('No')\nif S != T:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">"]}, "10823": {"id": 10823, "code": "import sys\ns = \"akasaka\"\npre = []\nback = []\nfor i in range((len(s)-1)//2):\n    pre.append(s[i])\ns1 = ''.join(pre)\nfor i in range((len(s)+3)//2-1,len(s)):\n    back.append(s[i])\ns2 = ''.join(back)\nif s != s[::-1]:\n    print('No')\n    sys.exit()\nelif s1 != s1[::-1]:\n    print('No')\n    sys.exit()\nelif s2 != s2[::-1]:\n    print('No')\n    sys.exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", "!", "!", ">"]}, "10824": {"id": 10824, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nf1 = s == list(reversed(s))\nf2 = s[:(len(s)-1)//2] == list(reversed(s[:(len(s)-1)//2]))\nf3 = s[(len(s)+2)//2:] == list(reversed(s[(len(s)+2)//2:]))\nprint(\"Yes\" if all([f1, f2, f3]) else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10825": {"id": 10825, "code": "s = ['l', 'e', 'v', 'e', 'l']\nf1 = s == list(reversed(s))\nf2 = s[:(len(s)-1)//2] == list(reversed(s[:(len(s)-1)//2]))\nf3 = s[(len(s)+2)//2:] == list(reversed(s[(len(s)+2)//2:]))\nprint(\"Yes\" if all([f1, f2, f3]) else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10826": {"id": 10826, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nf1 = s == list(reversed(s))\nf2 = s[:(len(s)-1)//2] == list(reversed(s[:(len(s)-1)//2]))\nf3 = s[(len(s)+2)//2:] == list(reversed(s[(len(s)+2)//2:]))\nprint(\"Yes\" if all([f1, f2, f3]) else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10827": {"id": 10827, "code": "S = \"akasaka\"\nN=len(S)\ndef rule1():\n  return S==S[::-1]\ndef rule2():\n  s = S[:(N-1)//2]\n  return s==s[::-1]\ndef rule3():\n  s = S[(N+3)//2-1:]\n  return s==s[::-1]  \nprint ('Yes' if rule1() and rule2() and rule3() else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10828": {"id": 10828, "code": "S = \"level\"\nN=len(S)\ndef rule1():\n  return S==S[::-1]\ndef rule2():\n  s = S[:(N-1)//2]\n  return s==s[::-1]\ndef rule3():\n  s = S[(N+3)//2-1:]\n  return s==s[::-1]  \nprint ('Yes' if rule1() and rule2() and rule3() else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10829": {"id": 10829, "code": "S = \"atcoder\"\nN=len(S)\ndef rule1():\n  return S==S[::-1]\ndef rule2():\n  s = S[:(N-1)//2]\n  return s==s[::-1]\ndef rule3():\n  s = S[(N+3)//2-1:]\n  return s==s[::-1]  \nprint ('Yes' if rule1() and rule2() and rule3() else 'No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "10830": {"id": 10830, "code": "s = \"akasaka\"\nif s==s[::-1]:\n  if s[:(len(s)-1)//2] == s[:(len(s)-1)//2:-1]:\n    ss=s[(len(s)+3)//2-1:len(s)]\n    if ss ==  ss[::-1]:\n      print('Yes')\n    else:\n      print('No')\n  else:\n    print('No')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "10831": {"id": 10831, "code": "s = \"level\"\nif s==s[::-1]:\n  if s[:(len(s)-1)//2] == s[:(len(s)-1)//2:-1]:\n    ss=s[(len(s)+3)//2-1:len(s)]\n    if ss ==  ss[::-1]:\n      print('Yes')\n    else:\n      print('No')\n  else:\n    print('No')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", "!", "!", "!", "!"]}, "10832": {"id": 10832, "code": "s = \"atcoder\"\nif s==s[::-1]:\n  if s[:(len(s)-1)//2] == s[:(len(s)-1)//2:-1]:\n    ss=s[(len(s)+3)//2-1:len(s)]\n    if ss ==  ss[::-1]:\n      print('Yes')\n    else:\n      print('No')\n  else:\n    print('No')\nelse:\n  print('No')", "coverage": [">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10833": {"id": 10833, "code": "S = \"akasaka\"\nN = len(S)\na = S[:N // 2]\nb = S[N // 2 + 1:]\nprint('Yes' if a == a[::-1] == b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10834": {"id": 10834, "code": "S = \"level\"\nN = len(S)\na = S[:N // 2]\nb = S[N // 2 + 1:]\nprint('Yes' if a == a[::-1] == b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10835": {"id": 10835, "code": "S = \"atcoder\"\nN = len(S)\na = S[:N // 2]\nb = S[N // 2 + 1:]\nprint('Yes' if a == a[::-1] == b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10836": {"id": 10836, "code": "S = \"level\"\nn = len(S)\nn\nm = int(((n - 1)/2)-1)\nl = int(((n + 3)/2)-1)\nif S[::1] == S[::-1]:\n        if S[:m+1:] == S[m::-1]:\n            if S[l::] == S[:l-1:-1]:\n                print('Yes')\n                exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "10837": {"id": 10837, "code": "S = \"atcoder\"\nn = len(S)\nn\nm = int(((n - 1)/2)-1)\nl = int(((n + 3)/2)-1)\nif S[::1] == S[::-1]:\n        if S[:m+1:] == S[m::-1]:\n            if S[l::] == S[:l-1:-1]:\n                print('Yes')\n                exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "10838": {"id": 10838, "code": "s = \"level\"\nif s[:]==s[::-1]:\n    a=s[:((len(s)-1)//2)]\n    if a[:]==a[::-1]:\n        b=s[((len(s)+2)//2):]\n        if b[:]==b[::-1]:\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "10839": {"id": 10839, "code": "s = \"atcoder\"\nif s[:]==s[::-1]:\n    a=s[:((len(s)-1)//2)]\n    if a[:]==a[::-1]:\n        b=s[((len(s)+2)//2):]\n        if b[:]==b[::-1]:\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", "!", "!", "!", "!", "!", "!", ">"]}, "10840": {"id": 10840, "code": "def is_palindrome(text):\n    l = len(text)\n    for i in range(l // 2 if l % 2 == 0 else (l + 1) // 2):\n        if text[i] != text[l - 1 - i]:\n            return False\n    return True\ns = \"akasaka\"\nq1 = is_palindrome(text=s)\nq2 = is_palindrome(text=s[0:(len(s) - 1) // 2])\nq3 = is_palindrome(text=s[(len(s) + 3) // 2 - 1:len(s)])\nprint(\"Yes\" if q1 and q2 and q3 else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">"]}, "10841": {"id": 10841, "code": "def is_palindrome(text):\n    l = len(text)\n    for i in range(l // 2 if l % 2 == 0 else (l + 1) // 2):\n        if text[i] != text[l - 1 - i]:\n            return False\n    return True\ns = \"level\"\nq1 = is_palindrome(text=s)\nq2 = is_palindrome(text=s[0:(len(s) - 1) // 2])\nq3 = is_palindrome(text=s[(len(s) + 3) // 2 - 1:len(s)])\nprint(\"Yes\" if q1 and q2 and q3 else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10842": {"id": 10842, "code": "def is_palindrome(text):\n    l = len(text)\n    for i in range(l // 2 if l % 2 == 0 else (l + 1) // 2):\n        if text[i] != text[l - 1 - i]:\n            return False\n    return True\ns = \"atcoder\"\nq1 = is_palindrome(text=s)\nq2 = is_palindrome(text=s[0:(len(s) - 1) // 2])\nq3 = is_palindrome(text=s[(len(s) + 3) // 2 - 1:len(s)])\nprint(\"Yes\" if q1 and q2 and q3 else \"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">"]}, "10843": {"id": 10843, "code": "import sys\nS = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nreverse_S = S[::-1]\nif S==reverse_S:\n    for i in range(int(len(S)/2)):\n        if S[i]==S[int(len(S)/2)-i-1] and S[int(len(S)/2)+1+i]==S[len(S)-1-i]:\n            continue\n        else:\n            print(\"No\")\n            sys.exit()\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!"]}, "10844": {"id": 10844, "code": "import sys\nS = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nreverse_S = S[::-1]\nif S==reverse_S:\n    for i in range(int(len(S)/2)):\n        if S[i]==S[int(len(S)/2)-i-1] and S[int(len(S)/2)+1+i]==S[len(S)-1-i]:\n            continue\n        else:\n            print(\"No\")\n            sys.exit()\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10845": {"id": 10845, "code": "S = \"akasaka\"\nN = len(S)\nflag = 0\nif S==S[::-1]:\n    x = S[:N//2]\n    if x==x[::-1]:\n        flag = 1\nif flag==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10846": {"id": 10846, "code": "S = \"level\"\nN = len(S)\nflag = 0\nif S==S[::-1]:\n    x = S[:N//2]\n    if x==x[::-1]:\n        flag = 1\nif flag==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10847": {"id": 10847, "code": "S = \"atcoder\"\nN = len(S)\nflag = 0\nif S==S[::-1]:\n    x = S[:N//2]\n    if x==x[::-1]:\n        flag = 1\nif flag==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10848": {"id": 10848, "code": "s = \"akasaka\"\nt = s[::-1]\nn = len(s)\na = s[:(n - 1) // 2]\nb = t[:(n - 1) // 2]\nif s == t and a == a[::-1] and b == b[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10849": {"id": 10849, "code": "s = \"level\"\nt = s[::-1]\nn = len(s)\na = s[:(n - 1) // 2]\nb = t[:(n - 1) // 2]\nif s == t and a == a[::-1] and b == b[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10850": {"id": 10850, "code": "s = \"atcoder\"\nt = s[::-1]\nn = len(s)\na = s[:(n - 1) // 2]\nb = t[:(n - 1) // 2]\nif s == t and a == a[::-1] and b == b[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10851": {"id": 10851, "code": "s = \"akasaka\"\nn = len(s)\ndef f(s):\n    return s == s[::-1]\nif f(s) and f(s[:(n-1)//2]) and f(s[(n+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10852": {"id": 10852, "code": "s = \"level\"\nn = len(s)\ndef f(s):\n    return s == s[::-1]\nif f(s) and f(s[:(n-1)//2]) and f(s[(n+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10853": {"id": 10853, "code": "s = \"atcoder\"\nn = len(s)\ndef f(s):\n    return s == s[::-1]\nif f(s) and f(s[:(n-1)//2]) and f(s[(n+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10854": {"id": 10854, "code": "s = \"akasaka\"\nn=int((len(s)-1)/2)\nc=0\nfor i in range(n):\n  if s[i] == s[i+n+1]:\n    c+=1\nif c==n:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10855": {"id": 10855, "code": "s = \"level\"\nn=int((len(s)-1)/2)\nc=0\nfor i in range(n):\n  if s[i] == s[i+n+1]:\n    c+=1\nif c==n:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10856": {"id": 10856, "code": "s = \"atcoder\"\nn=int((len(s)-1)/2)\nc=0\nfor i in range(n):\n  if s[i] == s[i+n+1]:\n    c+=1\nif c==n:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10857": {"id": 10857, "code": "s = \"akasaka\"\nn = len(s)\nfor i in range(n//2):\n    if s[i]!=s[n-i-1] :\n        print(\"No\")\n        exit()\nn1 = (n-1)//2\nfor i in range(n1//2):\n    if s[i]!=s[n1-i-1] :\n        print(\"No\")\n        exit()\nn2 = (n+3)//2\nfor i in range(n-n2):\n    if s[i]!=s[n-i-1] :\n        print(\"No\")\n        exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "10858": {"id": 10858, "code": "def main():\n    s = \"akasaka\"\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            print(\"No\")\n            return\n    s1 = s[:(n-1)//2]\n    s2 = s[(n+3)//2-1:]\n    n1 = len(s1)\n    for i in range(n//4):\n        if s1[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n        if s2[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">"]}, "10859": {"id": 10859, "code": "def main():\n    s = \"level\"\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            print(\"No\")\n            return\n    s1 = s[:(n-1)//2]\n    s2 = s[(n+3)//2-1:]\n    n1 = len(s1)\n    for i in range(n//4):\n        if s1[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n        if s2[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">"]}, "10860": {"id": 10860, "code": "def main():\n    s = \"atcoder\"\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            print(\"No\")\n            return\n    s1 = s[:(n-1)//2]\n    s2 = s[(n+3)//2-1:]\n    n1 = len(s1)\n    for i in range(n//4):\n        if s1[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n        if s2[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", ">"]}, "10861": {"id": 10861, "code": "S = \"akasaka\"\nif S != S[::-1]:\n    print(\"No\")\n    exit()\nif S[:len(S)//2] != S[:len(S)//2][::-1]:\n    print(\"No\")\n    exit()\nprint(\"Yes\")", "coverage": [">", ">", "!", "!", ">", "!", "!", ">"]}, "10862": {"id": 10862, "code": "S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nN=len(S)\nx=0\nfor i in range(int((N-1)/2)):\n    if S[i]!=S[-(i+1)]:\n        print(\"No\")\n        break\n    elif i==int((N-1)/2)-1:\n        x+=1\nimport math\nif x==1:\n    S_l=S[:int((N-1)/2)]\n    for i in range(int(math.ceil(len(S_l)/2))):\n        if S_l[i]!=S_l[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_l)/2))-1:\n            x+=1\nif x==2:\n    S_m=S[int((N+3)/2)-1:N]\n    for i in range(int(math.ceil(len(S_m)/2))):\n        if S_m[i]!=S_m[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_m)/2))-1:\n            print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "10863": {"id": 10863, "code": "S = ['l', 'e', 'v', 'e', 'l']\nN=len(S)\nx=0\nfor i in range(int((N-1)/2)):\n    if S[i]!=S[-(i+1)]:\n        print(\"No\")\n        break\n    elif i==int((N-1)/2)-1:\n        x+=1\nimport math\nif x==1:\n    S_l=S[:int((N-1)/2)]\n    for i in range(int(math.ceil(len(S_l)/2))):\n        if S_l[i]!=S_l[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_l)/2))-1:\n            x+=1\nif x==2:\n    S_m=S[int((N+3)/2)-1:N]\n    for i in range(int(math.ceil(len(S_m)/2))):\n        if S_m[i]!=S_m[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_m)/2))-1:\n            print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!"]}, "10864": {"id": 10864, "code": "S = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nN=len(S)\nx=0\nfor i in range(int((N-1)/2)):\n    if S[i]!=S[-(i+1)]:\n        print(\"No\")\n        break\n    elif i==int((N-1)/2)-1:\n        x+=1\nimport math\nif x==1:\n    S_l=S[:int((N-1)/2)]\n    for i in range(int(math.ceil(len(S_l)/2))):\n        if S_l[i]!=S_l[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_l)/2))-1:\n            x+=1\nif x==2:\n    S_m=S[int((N+3)/2)-1:N]\n    for i in range(int(math.ceil(len(S_m)/2))):\n        if S_m[i]!=S_m[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_m)/2))-1:\n            print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!"]}, "10865": {"id": 10865, "code": "S = \"akasaka\"\ns1 = S[0:int((len(S)-1)/2)]\ns2 = S[int((len(S)/2))+1:len(S)+1]\nif S == S[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10866": {"id": 10866, "code": "S = \"level\"\ns1 = S[0:int((len(S)-1)/2)]\ns2 = S[int((len(S)/2))+1:len(S)+1]\nif S == S[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10867": {"id": 10867, "code": "S = \"atcoder\"\ns1 = S[0:int((len(S)-1)/2)]\ns2 = S[int((len(S)/2))+1:len(S)+1]\nif S == S[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10868": {"id": 10868, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\na = (n - 1) // 2\nb = (n + 3) // 2\njudge = 1\nfor i in range(n // 2):\n  if s[i] != s[-(i + 1)]:\n    judge = 0\n    break\nif judge == 0:\n  print('No')\nelse:\n  al = s[:a]\n  bl = s[b - 1:]\n  for j in range(a // 2):\n    if al[j] != al[-(j + 1)]:\n      judge = 0\n      break\n  if judge == 0:\n    print('No')\n  else:\n    for k in range((n - b) // 2):\n      if bl[k] != bl[-(k + 1)]:\n        judge = 0\n        break\n    if judge == 0:\n      print('No')\n    else:\n      print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", "!", "!", ">", "!", "!", ">"]}, "10869": {"id": 10869, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\na = (n - 1) // 2\nb = (n + 3) // 2\njudge = 1\nfor i in range(n // 2):\n  if s[i] != s[-(i + 1)]:\n    judge = 0\n    break\nif judge == 0:\n  print('No')\nelse:\n  al = s[:a]\n  bl = s[b - 1:]\n  for j in range(a // 2):\n    if al[j] != al[-(j + 1)]:\n      judge = 0\n      break\n  if judge == 0:\n    print('No')\n  else:\n    for k in range((n - b) // 2):\n      if bl[k] != bl[-(k + 1)]:\n        judge = 0\n        break\n    if judge == 0:\n      print('No')\n    else:\n      print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!"]}, "10870": {"id": 10870, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\na = (n - 1) // 2\nb = (n + 3) // 2\njudge = 1\nfor i in range(n // 2):\n  if s[i] != s[-(i + 1)]:\n    judge = 0\n    break\nif judge == 0:\n  print('No')\nelse:\n  al = s[:a]\n  bl = s[b - 1:]\n  for j in range(a // 2):\n    if al[j] != al[-(j + 1)]:\n      judge = 0\n      break\n  if judge == 0:\n    print('No')\n  else:\n    for k in range((n - b) // 2):\n      if bl[k] != bl[-(k + 1)]:\n        judge = 0\n        break\n    if judge == 0:\n      print('No')\n    else:\n      print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"]}, "10871": {"id": 10871, "code": "S = \"akasaka\"\nflag = 0\nfor i in range(0,len(S)//2):\n    if S[i] == S[-1-i]:\n        continue\n    else:\n        flag = 1\n        print(\"No\")\n        break\nif flag == 0:\n    S = S[:((len(S)-1)//2)]\n    for i in range(0,len(S)//2):\n        if S[i] == S[-1-i]:\n            continue\n        else:\n            flag = 1\n            print(\"No\")\n            break\nif flag == 0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">"]}, "10872": {"id": 10872, "code": "S = \"level\"\nflag = 0\nfor i in range(0,len(S)//2):\n    if S[i] == S[-1-i]:\n        continue\n    else:\n        flag = 1\n        print(\"No\")\n        break\nif flag == 0:\n    S = S[:((len(S)-1)//2)]\n    for i in range(0,len(S)//2):\n        if S[i] == S[-1-i]:\n            continue\n        else:\n            flag = 1\n            print(\"No\")\n            break\nif flag == 0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!"]}, "10873": {"id": 10873, "code": "S = \"atcoder\"\nflag = 0\nfor i in range(0,len(S)//2):\n    if S[i] == S[-1-i]:\n        continue\n    else:\n        flag = 1\n        print(\"No\")\n        break\nif flag == 0:\n    S = S[:((len(S)-1)//2)]\n    for i in range(0,len(S)//2):\n        if S[i] == S[-1-i]:\n            continue\n        else:\n            flag = 1\n            print(\"No\")\n            break\nif flag == 0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", ">", "!"]}, "10874": {"id": 10874, "code": "def CheckPalindrome(S, L):\n    result = True\n    for i in range((L+1)//2):\n        if S[i] != S[-i-1]:\n            result = False\n            break\n    return result\nresult = True\nS = \"akasaka\"\nL = len(S)\nresult = CheckPalindrome(S, L)\nif result:\n    S2 = S[:(len(S)-1) // 2]\n    L2 = len(S2)\n    result = CheckPalindrome(S2, L2)\nif result:\n    S3 = S[(L+3)//2-1:]\n    L3 = len(S3)\n    result = CheckPalindrome(S3, L3)\nif result:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10875": {"id": 10875, "code": "def CheckPalindrome(S, L):\n    result = True\n    for i in range((L+1)//2):\n        if S[i] != S[-i-1]:\n            result = False\n            break\n    return result\nresult = True\nS = \"level\"\nL = len(S)\nresult = CheckPalindrome(S, L)\nif result:\n    S2 = S[:(len(S)-1) // 2]\n    L2 = len(S2)\n    result = CheckPalindrome(S2, L2)\nif result:\n    S3 = S[(L+3)//2-1:]\n    L3 = len(S3)\n    result = CheckPalindrome(S3, L3)\nif result:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10876": {"id": 10876, "code": "def CheckPalindrome(S, L):\n    result = True\n    for i in range((L+1)//2):\n        if S[i] != S[-i-1]:\n            result = False\n            break\n    return result\nresult = True\nS = \"atcoder\"\nL = len(S)\nresult = CheckPalindrome(S, L)\nif result:\n    S2 = S[:(len(S)-1) // 2]\n    L2 = len(S2)\n    result = CheckPalindrome(S2, L2)\nif result:\n    S3 = S[(L+3)//2-1:]\n    L3 = len(S3)\n    result = CheckPalindrome(S3, L3)\nif result:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10877": {"id": 10877, "code": "s = \"akasaka\"\nn = len(s)\nif s[:(n-1)//2] ==s[:(n-1)//2][::-1] and s == s[::-1] and s[(n+3)//2-1:] == s[(n+3)//2-1:][::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!"]}, "10878": {"id": 10878, "code": "s = \"level\"\nn = len(s)\nif s[:(n-1)//2] ==s[:(n-1)//2][::-1] and s == s[::-1] and s[(n+3)//2-1:] == s[(n+3)//2-1:][::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">"]}, "10879": {"id": 10879, "code": "s = \"atcoder\"\nn = len(s)\nif s[:(n-1)//2] ==s[:(n-1)//2][::-1] and s == s[::-1] and s[(n+3)//2-1:] == s[(n+3)//2-1:][::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">"]}, "10880": {"id": 10880, "code": "def is_kaibun(kaibun):\n    for i in range(len(kaibun)//2):\n        if kaibun[i] != kaibun[-i-1]:\n            return False\n    return True\ns = \"akasaka\"\nn = len(s)\nans = False\nif is_kaibun(s):\n    s = s[:n//2]\n    if is_kaibun(s):\n        ans = True\nif ans:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10881": {"id": 10881, "code": "def is_kaibun(kaibun):\n    for i in range(len(kaibun)//2):\n        if kaibun[i] != kaibun[-i-1]:\n            return False\n    return True\ns = \"level\"\nn = len(s)\nans = False\nif is_kaibun(s):\n    s = s[:n//2]\n    if is_kaibun(s):\n        ans = True\nif ans:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10882": {"id": 10882, "code": "def is_kaibun(kaibun):\n    for i in range(len(kaibun)//2):\n        if kaibun[i] != kaibun[-i-1]:\n            return False\n    return True\ns = \"atcoder\"\nn = len(s)\nans = False\nif is_kaibun(s):\n    s = s[:n//2]\n    if is_kaibun(s):\n        ans = True\nif ans:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10883": {"id": 10883, "code": "s = \"akasaka\"\nn = len(s)\ns1 = s[0:(n - 1) // 2]\ns2 = s[(n + 3) // 2 - 1:]\nif s == s[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10884": {"id": 10884, "code": "s = \"level\"\nn = len(s)\ns1 = s[0:(n - 1) // 2]\ns2 = s[(n + 3) // 2 - 1:]\nif s == s[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10885": {"id": 10885, "code": "s = \"atcoder\"\nn = len(s)\ns1 = s[0:(n - 1) // 2]\ns2 = s[(n + 3) // 2 - 1:]\nif s == s[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10886": {"id": 10886, "code": "s = \"akasaka\"\nn = len(s)\ncen1 = int((n-1)/2)\ncen2 = int((n+3)/2)\nif s == s[::-1] and s[:cen1] == s[cen1-1::-1] and s[cen2-1:n] == s[n:cen2-2:-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10887": {"id": 10887, "code": "s = \"level\"\nn = len(s)\ncen1 = int((n-1)/2)\ncen2 = int((n+3)/2)\nif s == s[::-1] and s[:cen1] == s[cen1-1::-1] and s[cen2-1:n] == s[n:cen2-2:-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10888": {"id": 10888, "code": "s = \"atcoder\"\nn = len(s)\ncen1 = int((n-1)/2)\ncen2 = int((n+3)/2)\nif s == s[::-1] and s[:cen1] == s[cen1-1::-1] and s[cen2-1:n] == s[n:cen2-2:-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10889": {"id": 10889, "code": "def is_palindrome(s):\n    return s == s[::-1]\ndef main():\n    s = \"-akasaka\"\n    n = len(s) - 1\n    if (\n        is_palindrome(s[1:])\n        and is_palindrome(s[1 : (n - 1) // 2 + 1])\n        and is_palindrome(s[(n + 3) // 2 : n + 1])\n    ):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", "!", "!", ">", ">"]}, "10890": {"id": 10890, "code": "def is_palindrome(s):\n    return s == s[::-1]\ndef main():\n    s = \"-level\"\n    n = len(s) - 1\n    if (\n        is_palindrome(s[1:])\n        and is_palindrome(s[1 : (n - 1) // 2 + 1])\n        and is_palindrome(s[(n + 3) // 2 : n + 1])\n    ):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", ">", ">", ">"]}, "10891": {"id": 10891, "code": "def is_palindrome(s):\n    return s == s[::-1]\ndef main():\n    s = \"-atcoder\"\n    n = len(s) - 1\n    if (\n        is_palindrome(s[1:])\n        and is_palindrome(s[1 : (n - 1) // 2 + 1])\n        and is_palindrome(s[(n + 3) // 2 : n + 1])\n    ):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", "!", "!", "!", "!", ">", ">", ">"]}, "10892": {"id": 10892, "code": "s = \"akasaka\"\nfor i in [s, s[:len(s)//2], s[len(s)//2+1:]]:\n  if i != i[::-1]:\n    print(\"No\")\n    break\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", "!", "!", "!", ">"]}, "10893": {"id": 10893, "code": "s = \"level\"\nfor i in [s, s[:len(s)//2], s[len(s)//2+1:]]:\n  if i != i[::-1]:\n    print(\"No\")\n    break\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10894": {"id": 10894, "code": "s = \"atcoder\"\nfor i in [s, s[:len(s)//2], s[len(s)//2+1:]]:\n  if i != i[::-1]:\n    print(\"No\")\n    break\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10895": {"id": 10895, "code": "S = \"akasaka\"\nN=len(S)\nM=(N-1)//2\ndef iskaibun(T):\n    K=len(T)\n    for i in range(K):\n        if T[i]==T[-i-1]:\n            pass\n        else:\n            return False\n    return True\nif iskaibun(S) and iskaibun(S[:M]) and iskaibun(S[M+1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!"]}, "10896": {"id": 10896, "code": "S = \"level\"\nN=len(S)\nM=(N-1)//2\ndef iskaibun(T):\n    K=len(T)\n    for i in range(K):\n        if T[i]==T[-i-1]:\n            pass\n        else:\n            return False\n    return True\nif iskaibun(S) and iskaibun(S[:M]) and iskaibun(S[M+1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "10897": {"id": 10897, "code": "S = \"atcoder\"\nN=len(S)\nM=(N-1)//2\ndef iskaibun(T):\n    K=len(T)\n    for i in range(K):\n        if T[i]==T[-i-1]:\n            pass\n        else:\n            return False\n    return True\nif iskaibun(S) and iskaibun(S[:M]) and iskaibun(S[M+1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">", "!", "!", ">"]}, "10898": {"id": 10898, "code": "s = \"akasaka\"\nn=len(s)\ns2=s[:(n-1)//2]\ns3=s[(n+3)//2-1:]\ncount=0\nfor i in range(n//2):\n    if s[i]==s[-(i+1)]:\n        count+=1\nfor i in range((n-1)//2):\n    if s2[i]==s2[-(i+1)]:\n        count+=1\nfor i in range(n-(n+3)//2+1):\n    if s3[i]==s3[-(i+1)]:\n        count+=1\nif count==n//2+(n-1)//2+n-(n+3)//2+1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10899": {"id": 10899, "code": "s = \"level\"\nn=len(s)\ns2=s[:(n-1)//2]\ns3=s[(n+3)//2-1:]\ncount=0\nfor i in range(n//2):\n    if s[i]==s[-(i+1)]:\n        count+=1\nfor i in range((n-1)//2):\n    if s2[i]==s2[-(i+1)]:\n        count+=1\nfor i in range(n-(n+3)//2+1):\n    if s3[i]==s3[-(i+1)]:\n        count+=1\nif count==n//2+(n-1)//2+n-(n+3)//2+1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", "!", "!", ">"]}, "10900": {"id": 10900, "code": "s = \"atcoder\"\nn=len(s)\ns2=s[:(n-1)//2]\ns3=s[(n+3)//2-1:]\ncount=0\nfor i in range(n//2):\n    if s[i]==s[-(i+1)]:\n        count+=1\nfor i in range((n-1)//2):\n    if s2[i]==s2[-(i+1)]:\n        count+=1\nfor i in range(n-(n+3)//2+1):\n    if s3[i]==s3[-(i+1)]:\n        count+=1\nif count==n//2+(n-1)//2+n-(n+3)//2+1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10901": {"id": 10901, "code": "import math\nfrom math import gcd\nINF = float(\"inf\")\nimport sys\ninput=sys.stdin.readline\nimport itertools\ndef main():\n    s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\n    n = len(s)\n    k = s.copy()\n    k.reverse()\n    if k != s:\n        print(\"No\")\n        exit()\n    k = s[0:(n-1)//2]\n    l = k.copy()\n    l.reverse()\n    if k != l:\n        print(\"No\")\n        exit()\n    k = s[(n-1)//2+1:]\n    l = k.copy()\n    if k != l:\n        print(\"No\")\n        exit()\n    print(\"Yes\")\nif __name__==\"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">"]}, "10902": {"id": 10902, "code": "S = \"akasaka\"\nprint(\"Yes\" if ( S==S[::-1] and S[:int((len(S)-1)/2)]==S[:int((len(S)-1)/2)][::-1] ) else \"No\")", "coverage": [">", ">"]}, "10903": {"id": 10903, "code": "S = \"level\"\nprint(\"Yes\" if ( S==S[::-1] and S[:int((len(S)-1)/2)]==S[:int((len(S)-1)/2)][::-1] ) else \"No\")", "coverage": [">", ">"]}, "10904": {"id": 10904, "code": "S = \"atcoder\"\nprint(\"Yes\" if ( S==S[::-1] and S[:int((len(S)-1)/2)]==S[:int((len(S)-1)/2)][::-1] ) else \"No\")", "coverage": [">", ">"]}, "10905": {"id": 10905, "code": "s = \"level\"\nn = len(s)\ns1 = s[0:(n-1)//2]\ns2 = s[(n+3)//2-1:n+1]\nif s == s[::-1]:\n    if s1 == s1[::-1]:\n        if s2 == s2[::-1]:\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "10906": {"id": 10906, "code": "s = \"atcoder\"\nn = len(s)\ns1 = s[0:(n-1)//2]\ns2 = s[(n+3)//2-1:n+1]\nif s == s[::-1]:\n    if s1 == s1[::-1]:\n        if s2 == s2[::-1]:\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "10907": {"id": 10907, "code": "S = \"akasaka\"\nN = len(S)\ncount1,count2,count3 = 0,0,0\nflg1,flg2,flg3 = False,False,False\nfor i in range(N):\n    if S[i] == S[-1-i]:\n        count1 += 1\nif count1 == N:\n    flg1 = True\na = int((N-1)/2)\nfor i in range(a):\n    if S[i] == S[a-1-i]:\n        count2 += 1\nif count2 == int((N-1)/2):\n    flg2 = True\nb = int((N+3)/2)\nfor i in range(N-b+1):\n    if S[b+i-1] == S[N-i-1]:\n        count3 += 1\nif count3 == N-b+1 :\n    flg3 = True\nif flg1 == True and flg2 == True and flg3 == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10908": {"id": 10908, "code": "S = \"level\"\nN = len(S)\ncount1,count2,count3 = 0,0,0\nflg1,flg2,flg3 = False,False,False\nfor i in range(N):\n    if S[i] == S[-1-i]:\n        count1 += 1\nif count1 == N:\n    flg1 = True\na = int((N-1)/2)\nfor i in range(a):\n    if S[i] == S[a-1-i]:\n        count2 += 1\nif count2 == int((N-1)/2):\n    flg2 = True\nb = int((N+3)/2)\nfor i in range(N-b+1):\n    if S[b+i-1] == S[N-i-1]:\n        count3 += 1\nif count3 == N-b+1 :\n    flg3 = True\nif flg1 == True and flg2 == True and flg3 == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "10909": {"id": 10909, "code": "S = \"atcoder\"\nN = len(S)\ncount1,count2,count3 = 0,0,0\nflg1,flg2,flg3 = False,False,False\nfor i in range(N):\n    if S[i] == S[-1-i]:\n        count1 += 1\nif count1 == N:\n    flg1 = True\na = int((N-1)/2)\nfor i in range(a):\n    if S[i] == S[a-1-i]:\n        count2 += 1\nif count2 == int((N-1)/2):\n    flg2 = True\nb = int((N+3)/2)\nfor i in range(N-b+1):\n    if S[b+i-1] == S[N-i-1]:\n        count3 += 1\nif count3 == N-b+1 :\n    flg3 = True\nif flg1 == True and flg2 == True and flg3 == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10910": {"id": 10910, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\na = int((n-1)/2)\nb = int((n+3)/2)\nfor i in range(a):\n  if s[i] != s[n-1-i]:\n    print(\"No\")\n    exit()\nfor i in range(a):\n  if s[i] != s[a-1-i]:\n    print(\"No\")\n    exit()\nfor i in range(a):\n  if s[b+i-1] != s[n-1-i]:\n    print(\"No\")\n    exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10911": {"id": 10911, "code": "S = \"akasaka\"\nN = len(S)\nflag = True\nif S!=S[::-1]:\n    flag=False\nif S[:int((N-1)/2)]!=S[:int((N-1)/2)][::-1]:\n    flag=False\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", "!", ">"]}, "10912": {"id": 10912, "code": "S = \"level\"\nN = len(S)\nflag = True\nif S!=S[::-1]:\n    flag=False\nif S[:int((N-1)/2)]!=S[:int((N-1)/2)][::-1]:\n    flag=False\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">"]}, "10913": {"id": 10913, "code": "S = \"atcoder\"\nN = len(S)\nflag = True\nif S!=S[::-1]:\n    flag=False\nif S[:int((N-1)/2)]!=S[:int((N-1)/2)][::-1]:\n    flag=False\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "10914": {"id": 10914, "code": "S = \"akasaka\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:]\nprint('Yes' if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10915": {"id": 10915, "code": "S = \"level\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:]\nprint('Yes' if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10916": {"id": 10916, "code": "S = \"atcoder\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:]\nprint('Yes' if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10917": {"id": 10917, "code": "S = \"akasaka\"\ns = list(S)\nf = s[:int((len(s)-1)/2)]\nl = s[int((len(s)+3)/2-1):]\nif f == l:\n    while len(f) > 1:\n        if f[0] == f[-1]:\n            f.pop(0)\n            f.pop()\n    if len(f) <= 1:\n        while len(l) > 1:\n            if l[0] == l[-1]:\n                l.pop(0)\n                l.pop()\n        if len(l) <= 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "10918": {"id": 10918, "code": "S = \"level\"\ns = list(S)\nf = s[:int((len(s)-1)/2)]\nl = s[int((len(s)+3)/2-1):]\nif f == l:\n    while len(f) > 1:\n        if f[0] == f[-1]:\n            f.pop(0)\n            f.pop()\n    if len(f) <= 1:\n        while len(l) > 1:\n            if l[0] == l[-1]:\n                l.pop(0)\n                l.pop()\n        if len(l) <= 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10919": {"id": 10919, "code": "S = \"atcoder\"\ns = list(S)\nf = s[:int((len(s)-1)/2)]\nl = s[int((len(s)+3)/2-1):]\nif f == l:\n    while len(f) > 1:\n        if f[0] == f[-1]:\n            f.pop(0)\n            f.pop()\n    if len(f) <= 1:\n        while len(l) > 1:\n            if l[0] == l[-1]:\n                l.pop(0)\n                l.pop()\n        if len(l) <= 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10920": {"id": 10920, "code": "s = \"akasaka\"\nn = len(s)\nprint('Yes' if s==s[::-1] and s[:(n-1)//2]==s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">"]}, "10921": {"id": 10921, "code": "s = \"level\"\nn = len(s)\nprint('Yes' if s==s[::-1] and s[:(n-1)//2]==s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">"]}, "10922": {"id": 10922, "code": "s = \"atcoder\"\nn = len(s)\nprint('Yes' if s==s[::-1] and s[:(n-1)//2]==s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">"]}, "10923": {"id": 10923, "code": "S = \"akasaka\"\ndef kaibun(x):\n    N = len(x)\n    flag = True\n    for i in range(N // 2):\n        if x[i] != x[-i - 1]:\n            flag = False\n    return flag\ntmp1 = kaibun(S)\ntmp2 = kaibun(S[:(len(S) - 1) // 2])\ntmp3 = kaibun(S[(len(S) + 3) // 2 - 1:])\nif tmp1 and tmp2 and tmp3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10924": {"id": 10924, "code": "S = \"level\"\ndef kaibun(x):\n    N = len(x)\n    flag = True\n    for i in range(N // 2):\n        if x[i] != x[-i - 1]:\n            flag = False\n    return flag\ntmp1 = kaibun(S)\ntmp2 = kaibun(S[:(len(S) - 1) // 2])\ntmp3 = kaibun(S[(len(S) + 3) // 2 - 1:])\nif tmp1 and tmp2 and tmp3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10925": {"id": 10925, "code": "S = \"atcoder\"\ndef kaibun(x):\n    N = len(x)\n    flag = True\n    for i in range(N // 2):\n        if x[i] != x[-i - 1]:\n            flag = False\n    return flag\ntmp1 = kaibun(S)\ntmp2 = kaibun(S[:(len(S) - 1) // 2])\ntmp3 = kaibun(S[(len(S) + 3) // 2 - 1:])\nif tmp1 and tmp2 and tmp3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10926": {"id": 10926, "code": "def palin(x):\n    if x == x[::-1]: return True\n    return False\na = \"akasaka\"\nn = len(a)\nif palin(a) and palin(a[:int((n-1)/2)]) and palin(a[int((n+3)/2)-1:]):\n    print(\"Yes\")\nelse: print(\"No\")", "coverage": [">", ">", "!", ">", ">", ">", ">", "!"]}, "10927": {"id": 10927, "code": "def palin(x):\n    if x == x[::-1]: return True\n    return False\na = \"level\"\nn = len(a)\nif palin(a) and palin(a[:int((n-1)/2)]) and palin(a[int((n+3)/2)-1:]):\n    print(\"Yes\")\nelse: print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">"]}, "10928": {"id": 10928, "code": "def palin(x):\n    if x == x[::-1]: return True\n    return False\na = \"atcoder\"\nn = len(a)\nif palin(a) and palin(a[:int((n-1)/2)]) and palin(a[int((n+3)/2)-1:]):\n    print(\"Yes\")\nelse: print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">"]}, "10929": {"id": 10929, "code": "s = \"akasaka\"\nn = len(s)\ns1 = s[:(n-1)//2]\ns2 = s[((n+3)//2)-1:]\ndef kaibun(S):\n  for i,j in zip(S,S[::-1]):\n    if i!=j:\n      return False\n  return True\nif kaibun(s) and kaibun(s1) and kaibun(s2):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!"]}, "10930": {"id": 10930, "code": "s = \"level\"\nn = len(s)\ns1 = s[:(n-1)//2]\ns2 = s[((n+3)//2)-1:]\ndef kaibun(S):\n  for i,j in zip(S,S[::-1]):\n    if i!=j:\n      return False\n  return True\nif kaibun(s) and kaibun(s1) and kaibun(s2):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10931": {"id": 10931, "code": "s = \"atcoder\"\nn = len(s)\ns1 = s[:(n-1)//2]\ns2 = s[((n+3)//2)-1:]\ndef kaibun(S):\n  for i,j in zip(S,S[::-1]):\n    if i!=j:\n      return False\n  return True\nif kaibun(s) and kaibun(s1) and kaibun(s2):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10932": {"id": 10932, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"akasaka\"\nn = len(s)\nl = (n - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10933": {"id": 10933, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"level\"\nn = len(s)\nl = (n - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10934": {"id": 10934, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"atcoder\"\nn = len(s)\nl = (n - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10935": {"id": 10935, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nb = 0\nif len(s)%2==1:\n    for a in range(int((len(s)-1)/2)):\n        if s[a]!=s[len(s)-a-1] and b==0:\n            b = 1\nelse:\n    b = 1\nif b == 0:\n    for c in range(int((len(s)-1)/4+1)):\n        if s[c]==s[int((len(s)-1)/2-c-1)]==s[int((len(s)+1)/2+c)]==s[len(s)-c-1] and b==0:\n            b = 0\n        else:\n            b = 1\nif b == 0:\n    print(\"Yes\")\nelif b == 1:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!"]}, "10936": {"id": 10936, "code": "s = ['l', 'e', 'v', 'e', 'l']\nb = 0\nif len(s)%2==1:\n    for a in range(int((len(s)-1)/2)):\n        if s[a]!=s[len(s)-a-1] and b==0:\n            b = 1\nelse:\n    b = 1\nif b == 0:\n    for c in range(int((len(s)-1)/4+1)):\n        if s[c]==s[int((len(s)-1)/2-c-1)]==s[int((len(s)+1)/2+c)]==s[len(s)-c-1] and b==0:\n            b = 0\n        else:\n            b = 1\nif b == 0:\n    print(\"Yes\")\nelif b == 1:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">"]}, "10937": {"id": 10937, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nb = 0\nif len(s)%2==1:\n    for a in range(int((len(s)-1)/2)):\n        if s[a]!=s[len(s)-a-1] and b==0:\n            b = 1\nelse:\n    b = 1\nif b == 0:\n    for c in range(int((len(s)-1)/4+1)):\n        if s[c]==s[int((len(s)-1)/2-c-1)]==s[int((len(s)+1)/2+c)]==s[len(s)-c-1] and b==0:\n            b = 0\n        else:\n            b = 1\nif b == 0:\n    print(\"Yes\")\nelif b == 1:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", "!", "!", "!", ">", "!", ">", ">"]}, "10938": {"id": 10938, "code": "s = \"akasaka\"\nn = len(s)\nsd = s[::-1]\na = s[:int((n-1)/2)]\nad = a[::-1]\nb = s[int((n+3)/2-1):]\nbd = b[::-1]\nif s == sd and a == ad and b == bd:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10939": {"id": 10939, "code": "s = \"level\"\nn = len(s)\nsd = s[::-1]\na = s[:int((n-1)/2)]\nad = a[::-1]\nb = s[int((n+3)/2-1):]\nbd = b[::-1]\nif s == sd and a == ad and b == bd:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10940": {"id": 10940, "code": "s = \"atcoder\"\nn = len(s)\nsd = s[::-1]\na = s[:int((n-1)/2)]\nad = a[::-1]\nb = s[int((n+3)/2-1):]\nbd = b[::-1]\nif s == sd and a == ad and b == bd:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10941": {"id": 10941, "code": "s = \"akasaka\"\nn = len(s)\nf = s[:(n-1)//2]\nl = s[1+((n-1)//2):]\nprint(\"Yes\" if s==s[::-1] and f==f[::-1] and l==l[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10942": {"id": 10942, "code": "s = \"level\"\nn = len(s)\nf = s[:(n-1)//2]\nl = s[1+((n-1)//2):]\nprint(\"Yes\" if s==s[::-1] and f==f[::-1] and l==l[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10943": {"id": 10943, "code": "s = \"atcoder\"\nn = len(s)\nf = s[:(n-1)//2]\nl = s[1+((n-1)//2):]\nprint(\"Yes\" if s==s[::-1] and f==f[::-1] and l==l[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10944": {"id": 10944, "code": "s = \"akasaka\"\nn = len(s)\na, b = s[:(n - 1) // 2], s[(n + 1) // 2:]\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] and b == b[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "10945": {"id": 10945, "code": "s = \"level\"\nn = len(s)\na, b = s[:(n - 1) // 2], s[(n + 1) // 2:]\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] and b == b[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "10946": {"id": 10946, "code": "s = \"atcoder\"\nn = len(s)\na, b = s[:(n - 1) // 2], s[(n + 1) // 2:]\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] and b == b[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "10947": {"id": 10947, "code": "def solve():\n    S = \"akasaka\"\n    if S != S[::-1]:\n        print(\"No\")\n    else:\n        sub = S[:(len(S)-1)//2]\n        if sub != sub[::-1]:\n            print(\"No\")\n        else:\n            print(\"Yes\")\nif __name__ == \"__main__\":\n    solve()", "coverage": [">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", ">"]}, "10948": {"id": 10948, "code": "def solve():\n    S = \"level\"\n    if S != S[::-1]:\n        print(\"No\")\n    else:\n        sub = S[:(len(S)-1)//2]\n        if sub != sub[::-1]:\n            print(\"No\")\n        else:\n            print(\"Yes\")\nif __name__ == \"__main__\":\n    solve()", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">"]}, "10949": {"id": 10949, "code": "def solve():\n    S = \"atcoder\"\n    if S != S[::-1]:\n        print(\"No\")\n    else:\n        sub = S[:(len(S)-1)//2]\n        if sub != sub[::-1]:\n            print(\"No\")\n        else:\n            print(\"Yes\")\nif __name__ == \"__main__\":\n    solve()", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">", ">"]}, "10950": {"id": 10950, "code": "s = \"akasaka\"\nn = len(s)\nsformer = s[:int((n - 1) / 2)]\nslatter = s[int((n + 1) / 2):]\nif s == s[-1::-1] and sformer == sformer[-1::-1] and slatter == slatter[-1::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10951": {"id": 10951, "code": "s = \"level\"\nn = len(s)\nsformer = s[:int((n - 1) / 2)]\nslatter = s[int((n + 1) / 2):]\nif s == s[-1::-1] and sformer == sformer[-1::-1] and slatter == slatter[-1::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10952": {"id": 10952, "code": "s = \"atcoder\"\nn = len(s)\nsformer = s[:int((n - 1) / 2)]\nslatter = s[int((n + 1) / 2):]\nif s == s[-1::-1] and sformer == sformer[-1::-1] and slatter == slatter[-1::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10953": {"id": 10953, "code": "S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nN = len(S)\nS_1=S[:N//2]\nS_2=S[N//2+1:]\nN_=len(S_1)\nans='Yes'\nfor n in range(N_):\n    if S_1[n] != S_1[-(n+1)]:\n        ans='No'\n        break\n    if S_2[n] != S_2[-(n+1)]:\n        ans='No'\n        break   \nfor n in range(N):\n    if S[n] != S[-(n+1)]:\n        ans='No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10954": {"id": 10954, "code": "S = ['l', 'e', 'v', 'e', 'l']\nN = len(S)\nS_1=S[:N//2]\nS_2=S[N//2+1:]\nN_=len(S_1)\nans='Yes'\nfor n in range(N_):\n    if S_1[n] != S_1[-(n+1)]:\n        ans='No'\n        break\n    if S_2[n] != S_2[-(n+1)]:\n        ans='No'\n        break   \nfor n in range(N):\n    if S[n] != S[-(n+1)]:\n        ans='No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", "!", "!", ">"]}, "10955": {"id": 10955, "code": "S = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nN = len(S)\nS_1=S[:N//2]\nS_2=S[N//2+1:]\nN_=len(S_1)\nans='Yes'\nfor n in range(N_):\n    if S_1[n] != S_1[-(n+1)]:\n        ans='No'\n        break\n    if S_2[n] != S_2[-(n+1)]:\n        ans='No'\n        break   \nfor n in range(N):\n    if S[n] != S[-(n+1)]:\n        ans='No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", ">"]}, "10956": {"id": 10956, "code": "s = \"akasaka\"\nn=len(s)\nn1=(n-1)//2\nn2=(n+3)//2\ns1=s[:n1]\ns2=s[n2-1:]\nfor i in range(1,n1+1):\n    if s[i-1]!=s[-i]:\n        print('No')\n        exit()\nfor i in range(1,n1//2+1):\n    if s1[i-1]!=s1[-i]:\n        print('No')\n        exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10957": {"id": 10957, "code": "S = \"akasaka\"\nSkai1 = S[0:(len(S)-1)//2]\nSkai1 = Skai1[::-1]\nSkai2 = S[((len(S)+3)//2)-1:len(S)]\nSkai2 = Skai2[::-1]\nif S==S[::-1] and S[0:(len(S)-1)//2] ==Skai1 and S[((len(S)+3)//2)-1:len(S)] == Skai2: \n  print('Yes')\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10958": {"id": 10958, "code": "S = \"level\"\nSkai1 = S[0:(len(S)-1)//2]\nSkai1 = Skai1[::-1]\nSkai2 = S[((len(S)+3)//2)-1:len(S)]\nSkai2 = Skai2[::-1]\nif S==S[::-1] and S[0:(len(S)-1)//2] ==Skai1 and S[((len(S)+3)//2)-1:len(S)] == Skai2: \n  print('Yes')\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10959": {"id": 10959, "code": "S = \"atcoder\"\nSkai1 = S[0:(len(S)-1)//2]\nSkai1 = Skai1[::-1]\nSkai2 = S[((len(S)+3)//2)-1:len(S)]\nSkai2 = Skai2[::-1]\nif S==S[::-1] and S[0:(len(S)-1)//2] ==Skai1 and S[((len(S)+3)//2)-1:len(S)] == Skai2: \n  print('Yes')\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10960": {"id": 10960, "code": "kai = \"akasaka\"\nnum = len(kai)\nans = 0\nn1 = int((num-1) / 2)\nfor i in range(n1):\n    if kai[i] != kai[-1*(i+1)]:\n        ans += 1\nl1 = kai[0:n1]\nfor i in range(len(l1)):\n    if l1[i] != l1[-1*(i+1)]:\n        ans += 1\nl2 = kai[n1+1:]\nfor i in range(len(l2)):\n    if l2[i] != l2[-1*(i+1)]:\n        ans += 1\nif ans == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", "!", "!"]}, "10961": {"id": 10961, "code": "kai = \"level\"\nnum = len(kai)\nans = 0\nn1 = int((num-1) / 2)\nfor i in range(n1):\n    if kai[i] != kai[-1*(i+1)]:\n        ans += 1\nl1 = kai[0:n1]\nfor i in range(len(l1)):\n    if l1[i] != l1[-1*(i+1)]:\n        ans += 1\nl2 = kai[n1+1:]\nfor i in range(len(l2)):\n    if l2[i] != l2[-1*(i+1)]:\n        ans += 1\nif ans == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10962": {"id": 10962, "code": "kai = \"atcoder\"\nnum = len(kai)\nans = 0\nn1 = int((num-1) / 2)\nfor i in range(n1):\n    if kai[i] != kai[-1*(i+1)]:\n        ans += 1\nl1 = kai[0:n1]\nfor i in range(len(l1)):\n    if l1[i] != l1[-1*(i+1)]:\n        ans += 1\nl2 = kai[n1+1:]\nfor i in range(len(l2)):\n    if l2[i] != l2[-1*(i+1)]:\n        ans += 1\nif ans == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10963": {"id": 10963, "code": "S = \"akasaka\"\nN = len(S)\ndef isPalindrome(s):\n  n = len(s)\n  re_s = s[::-1]\n  for i in range(n // 2):\n    if re_s[i] != s[i]:\n      break\n  else:\n    return True\n  return False\nif isPalindrome(S) and isPalindrome(S[:N // 2]) and isPalindrome(S[(N + 1) // 2:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">", ">", "!", "!"]}, "10964": {"id": 10964, "code": "S = \"level\"\nN = len(S)\ndef isPalindrome(s):\n  n = len(s)\n  re_s = s[::-1]\n  for i in range(n // 2):\n    if re_s[i] != s[i]:\n      break\n  else:\n    return True\n  return False\nif isPalindrome(S) and isPalindrome(S[:N // 2]) and isPalindrome(S[(N + 1) // 2:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "10965": {"id": 10965, "code": "S = \"atcoder\"\nN = len(S)\ndef isPalindrome(s):\n  n = len(s)\n  re_s = s[::-1]\n  for i in range(n // 2):\n    if re_s[i] != s[i]:\n      break\n  else:\n    return True\n  return False\nif isPalindrome(S) and isPalindrome(S[:N // 2]) and isPalindrome(S[(N + 1) // 2:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10966": {"id": 10966, "code": "s = \"akasaka\"\nif s != s[::-1]:\n    print('No')\n    exit()\nn = len(s)\ns1 = s[:((n-1)//2)]\ns2 = s[((n+3)//2)-1:n]\nif s1 != s1[::-1] and s2 != s2[::-1]:\n    print('No')\n    exit()\nprint('Yes')", "coverage": [">", ">", "!", "!", ">", ">", ">", ">", "!", "!", ">"]}, "10967": {"id": 10967, "code": "S = \"akasaka\"\nn = len(S)\ns1 = S[:(n-1)//2]\ns2 = S[(n+3)//2-1:]\nif S[::-1]==S and s1[::-1]==s1 and s2[::-1]==s2:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10968": {"id": 10968, "code": "S = \"level\"\nn = len(S)\ns1 = S[:(n-1)//2]\ns2 = S[(n+3)//2-1:]\nif S[::-1]==S and s1[::-1]==s1 and s2[::-1]==s2:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10969": {"id": 10969, "code": "S = \"atcoder\"\nn = len(S)\ns1 = S[:(n-1)//2]\ns2 = S[(n+3)//2-1:]\nif S[::-1]==S and s1[::-1]==s1 and s2[::-1]==s2:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10970": {"id": 10970, "code": "s = \"akasaka\"\nn = len(s)\nentire = s == s[::-1]\nleft = s[:int((n-1)/2)] == s[:int((n-1)/2)][::-1]\nright = s[int((n+3)/2-1):] == s[int((n+3)/2-1):][::-1]\nif entire and left and right:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10971": {"id": 10971, "code": "s = \"level\"\nn = len(s)\nentire = s == s[::-1]\nleft = s[:int((n-1)/2)] == s[:int((n-1)/2)][::-1]\nright = s[int((n+3)/2-1):] == s[int((n+3)/2-1):][::-1]\nif entire and left and right:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10972": {"id": 10972, "code": "s = \"atcoder\"\nn = len(s)\nentire = s == s[::-1]\nleft = s[:int((n-1)/2)] == s[:int((n-1)/2)][::-1]\nright = s[int((n+3)/2-1):] == s[int((n+3)/2-1):][::-1]\nif entire and left and right:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10973": {"id": 10973, "code": "S = \"akasaka\"\nN = len(S)\nflag = [0,0,0]\nif S==\"\".join(reversed(list(S))):\n    flag[0]=1\nif S[:int((N-1)/2)]==\"\".join(reversed(list(S[:int((N-1)/2)]))):\n    flag[1]=1\nif S[int((N+3)/2)-1:]==\"\".join(reversed(list(S[int((N+3)/2)-1:]))):\n    flag[2]=1\nprint(\"Yes\" if flag==[1,1,1] else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10974": {"id": 10974, "code": "S = \"level\"\nN = len(S)\nflag = [0,0,0]\nif S==\"\".join(reversed(list(S))):\n    flag[0]=1\nif S[:int((N-1)/2)]==\"\".join(reversed(list(S[:int((N-1)/2)]))):\n    flag[1]=1\nif S[int((N+3)/2)-1:]==\"\".join(reversed(list(S[int((N+3)/2)-1:]))):\n    flag[2]=1\nprint(\"Yes\" if flag==[1,1,1] else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", "!", ">"]}, "10975": {"id": 10975, "code": "S = \"atcoder\"\nN = len(S)\nflag = [0,0,0]\nif S==\"\".join(reversed(list(S))):\n    flag[0]=1\nif S[:int((N-1)/2)]==\"\".join(reversed(list(S[:int((N-1)/2)]))):\n    flag[1]=1\nif S[int((N+3)/2)-1:]==\"\".join(reversed(list(S[int((N+3)/2)-1:]))):\n    flag[2]=1\nprint(\"Yes\" if flag==[1,1,1] else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", "!", ">", "!", ">"]}, "10976": {"id": 10976, "code": "s = \"akasaka\"\nn = len(s)\nsl = s[:n//2]\nsr = s[n//2+1:]\nif sl == sr and sr ==  sr[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10977": {"id": 10977, "code": "s = \"level\"\nn = len(s)\nsl = s[:n//2]\nsr = s[n//2+1:]\nif sl == sr and sr ==  sr[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10978": {"id": 10978, "code": "s = \"atcoder\"\nn = len(s)\nsl = s[:n//2]\nsr = s[n//2+1:]\nif sl == sr and sr ==  sr[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10979": {"id": 10979, "code": "import sys\ninput = sys.stdin.readline\ns = \"akasak\";n = 6\nprint('Yes' if s == s[::-1] and s[:(n-1)//2] == s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10980": {"id": 10980, "code": "import sys\ninput = sys.stdin.readline\ns = \"leve\";n = 4\nprint('Yes' if s == s[::-1] and s[:(n-1)//2] == s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10981": {"id": 10981, "code": "import sys\ninput = sys.stdin.readline\ns = \"atcode\";n = 6\nprint('Yes' if s == s[::-1] and s[:(n-1)//2] == s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10982": {"id": 10982, "code": "S = \"akasaka\"\nN = len(S)\nif S==S[::-1] and S[:N//2]==S[:N//2][::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!"]}, "10983": {"id": 10983, "code": "S = \"level\"\nN = len(S)\nif S==S[::-1] and S[:N//2]==S[:N//2][::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "10984": {"id": 10984, "code": "S = \"atcoder\"\nN = len(S)\nif S==S[::-1] and S[:N//2]==S[:N//2][::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "10985": {"id": 10985, "code": "S = \"akasaka\"\ndef kaibun(S):\n  for i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n      return False\n  return True\nif kaibun(S) and kaibun(S[:(len(S) - 1)//2]) and kaibun(S[(len(S) + 3) // 2-1:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", "!", "!"]}, "10986": {"id": 10986, "code": "S = \"level\"\ndef kaibun(S):\n  for i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n      return False\n  return True\nif kaibun(S) and kaibun(S[:(len(S) - 1)//2]) and kaibun(S[(len(S) + 3) // 2-1:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10987": {"id": 10987, "code": "S = \"atcoder\"\ndef kaibun(S):\n  for i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n      return False\n  return True\nif kaibun(S) and kaibun(S[:(len(S) - 1)//2]) and kaibun(S[(len(S) + 3) // 2-1:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10988": {"id": 10988, "code": "def palindrome(S):\n  for i in range(len(S)//2):\n    if S[i] != S[-(i+1)]:\n      return 0\n  return 1\nans = \"No\"\nS = \"akasaka\"\nS1 = S[:(len(S)-1)//2]\nS2 = S[(len(S)+1)//2:]\nif palindrome(S) == 1:\n  if palindrome(S1) == 1:\n    if palindrome(S2) == 1:\n      ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10989": {"id": 10989, "code": "def palindrome(S):\n  for i in range(len(S)//2):\n    if S[i] != S[-(i+1)]:\n      return 0\n  return 1\nans = \"No\"\nS = \"level\"\nS1 = S[:(len(S)-1)//2]\nS2 = S[(len(S)+1)//2:]\nif palindrome(S) == 1:\n  if palindrome(S1) == 1:\n    if palindrome(S2) == 1:\n      ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10990": {"id": 10990, "code": "def palindrome(S):\n  for i in range(len(S)//2):\n    if S[i] != S[-(i+1)]:\n      return 0\n  return 1\nans = \"No\"\nS = \"atcoder\"\nS1 = S[:(len(S)-1)//2]\nS2 = S[(len(S)+1)//2:]\nif palindrome(S) == 1:\n  if palindrome(S1) == 1:\n    if palindrome(S2) == 1:\n      ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "10991": {"id": 10991, "code": "S = \"akasaka\"\nlength = len(S)\ndef check_palin(s):\n    num = len(s)\n    for i in range(num // 2):\n        if s[i] != s[num - i - 1]:\n            return False\n    return True\nfirst = S[:(length - 1) // 2]\nsecond = S[(length + 1) // 2:]\nif check_palin(S) and check_palin(first) and check_palin(second):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "10992": {"id": 10992, "code": "S = \"level\"\nlength = len(S)\ndef check_palin(s):\n    num = len(s)\n    for i in range(num // 2):\n        if s[i] != s[num - i - 1]:\n            return False\n    return True\nfirst = S[:(length - 1) // 2]\nsecond = S[(length + 1) // 2:]\nif check_palin(S) and check_palin(first) and check_palin(second):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10993": {"id": 10993, "code": "S = \"atcoder\"\nlength = len(S)\ndef check_palin(s):\n    num = len(s)\n    for i in range(num // 2):\n        if s[i] != s[num - i - 1]:\n            return False\n    return True\nfirst = S[:(length - 1) // 2]\nsecond = S[(length + 1) // 2:]\nif check_palin(S) and check_palin(first) and check_palin(second):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "10994": {"id": 10994, "code": "def main():\n    S = \"akasaka\"\n    N = len(S)\n    for i in range(N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    M = (N-1)//2\n    for i in range(M):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    L = (N+3)//2 - 1\n    for i in range(L, N):\n        if S[i] != S[N+L-i-1]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">"]}, "10995": {"id": 10995, "code": "def main():\n    S = \"level\"\n    N = len(S)\n    for i in range(N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    M = (N-1)//2\n    for i in range(M):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    L = (N+3)//2 - 1\n    for i in range(L, N):\n        if S[i] != S[N+L-i-1]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", ">"]}, "10996": {"id": 10996, "code": "def main():\n    S = \"atcoder\"\n    N = len(S)\n    for i in range(N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    M = (N-1)//2\n    for i in range(M):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    L = (N+3)//2 - 1\n    for i in range(L, N):\n        if S[i] != S[N+L-i-1]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10997": {"id": 10997, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\nflag = 0\nfor i in range(n//2):\n    if s[i] != s[n-i-1]:\n        flag = 1\nif flag == 0:\n    s2 = s[:(n-1)//2]\n    n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    if flag == 0:\n        s2 = s[(n+3)//2-1:]\n        n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!"]}, "10998": {"id": 10998, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\nflag = 0\nfor i in range(n//2):\n    if s[i] != s[n-i-1]:\n        flag = 1\nif flag == 0:\n    s2 = s[:(n-1)//2]\n    n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    if flag == 0:\n        s2 = s[(n+3)//2-1:]\n        n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">", "!", "!", ">"]}, "10999": {"id": 10999, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\nflag = 0\nfor i in range(n//2):\n    if s[i] != s[n-i-1]:\n        flag = 1\nif flag == 0:\n    s2 = s[:(n-1)//2]\n    n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    if flag == 0:\n        s2 = s[(n+3)//2-1:]\n        n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", ">", "!", "!", ">"]}, "11000": {"id": 11000, "code": "S = \"level\"\ndef is_kaibun(s):\n    l = len(s)\n    if s[:int(l/2)] == s[:-(int(l/2))-1:-1]:\n        return True\n    else:\n        return False\nif is_kaibun(S):\n    if is_kaibun(S[:int((len(S)-1)/2)]):\n        if is_kaibun(S[int((len(S)+3)/2)-1:]):\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", "!", ">"]}, "11001": {"id": 11001, "code": "S = \"atcoder\"\ndef is_kaibun(s):\n    l = len(s)\n    if s[:int(l/2)] == s[:-(int(l/2))-1:-1]:\n        return True\n    else:\n        return False\nif is_kaibun(S):\n    if is_kaibun(S[:int((len(S)-1)/2)]):\n        if is_kaibun(S[int((len(S)+3)/2)-1:]):\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", ">"]}, "11002": {"id": 11002, "code": "S = \"akasaka\"\nN = int(len(S))\nS1 = S[:int(N/2)]\nS2 = S[int(N/2)+1:N]\nfor i in range(int(N/2)):\n    if(S[i] != S[N-1-i]):\n        print(\"No\")\n        exit()\n    if(S1[i] != S1[int(N/2)-1-i]):\n        print(\"No\")\n        exit()\n    if(S2[i] != S2[int(N/2)-1-i]):\n        print(\"No\")\n        exit()\nprint(\"Yes\")        ", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", "!", "!", ">"]}, "11003": {"id": 11003, "code": "s = \"akasaka\"\nl = len(s)\nokey = 1\nll = l//2\nfor i in range(0,l//2):\n    if s[i] != s[l-i-1]:\n        okey = 0\n        break\nif okey == 1: \n    for i in range(0,ll//2):\n        if s[i] != s[ll-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    for i in range(ll+1, ll+ll//2):\n        if s[i] != s[l-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", ">", ">", "!", "!"]}, "11004": {"id": 11004, "code": "s = \"level\"\nl = len(s)\nokey = 1\nll = l//2\nfor i in range(0,l//2):\n    if s[i] != s[l-i-1]:\n        okey = 0\n        break\nif okey == 1: \n    for i in range(0,ll//2):\n        if s[i] != s[ll-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    for i in range(ll+1, ll+ll//2):\n        if s[i] != s[l-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", ">"]}, "11005": {"id": 11005, "code": "s = \"atcoder\"\nl = len(s)\nokey = 1\nll = l//2\nfor i in range(0,l//2):\n    if s[i] != s[l-i-1]:\n        okey = 0\n        break\nif okey == 1: \n    for i in range(0,ll//2):\n        if s[i] != s[ll-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    for i in range(ll+1, ll+ll//2):\n        if s[i] != s[l-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", "!", "!", ">", "!", "!", ">"]}, "11006": {"id": 11006, "code": "S = \"akasaka\"\nN = len(S)\ndef kaibun(s):\n    n = len(s)\n    f_kaibun = True\n    for i in range(int(n/2)):\n        j = n-1-i\n        if j <= i:\n            break\n        if s[i] != s[j]:\n            f_kaibun = False\n            break\n    return f_kaibun\nif kaibun(S) and kaibun(S[0:int(round((N-1)/2))]) and kaibun(S[int(round((N+3)/2))-1:N]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">", ">", ">", "!", "!"]}, "11007": {"id": 11007, "code": "S = \"level\"\nN = len(S)\ndef kaibun(s):\n    n = len(s)\n    f_kaibun = True\n    for i in range(int(n/2)):\n        j = n-1-i\n        if j <= i:\n            break\n        if s[i] != s[j]:\n            f_kaibun = False\n            break\n    return f_kaibun\nif kaibun(S) and kaibun(S[0:int(round((N-1)/2))]) and kaibun(S[int(round((N+3)/2))-1:N]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11008": {"id": 11008, "code": "S = \"atcoder\"\nN = len(S)\ndef kaibun(s):\n    n = len(s)\n    f_kaibun = True\n    for i in range(int(n/2)):\n        j = n-1-i\n        if j <= i:\n            break\n        if s[i] != s[j]:\n            f_kaibun = False\n            break\n    return f_kaibun\nif kaibun(S) and kaibun(S[0:int(round((N-1)/2))]) and kaibun(S[int(round((N+3)/2))-1:N]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11009": {"id": 11009, "code": "import sys\ns = \"level\"\ns2 = s[:(len(s) - 1) // 2]\ns3 = s[(len(s) + 3) // 2 - 1 :]\nif s == s[::-1]:\n    if s2 == s2[::-1]:\n        if s3 == s3[::-1]:\n            print(\"Yes\")\n            sys.exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11010": {"id": 11010, "code": "import sys\ns = \"atcoder\"\ns2 = s[:(len(s) - 1) // 2]\ns3 = s[(len(s) + 3) // 2 - 1 :]\nif s == s[::-1]:\n    if s2 == s2[::-1]:\n        if s3 == s3[::-1]:\n            print(\"Yes\")\n            sys.exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11011": {"id": 11011, "code": "def main():\n    S = \"akasaka\"\n    N = len(S)\n    if S[:(N - 1) // 2] == S[(N + 3) // 2 - 1:]:\n        print('Yes')\n    else:\n        print('No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11012": {"id": 11012, "code": "def main():\n    S = \"level\"\n    N = len(S)\n    if S[:(N - 1) // 2] == S[(N + 3) // 2 - 1:]:\n        print('Yes')\n    else:\n        print('No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11013": {"id": 11013, "code": "def main():\n    S = \"atcoder\"\n    N = len(S)\n    if S[:(N - 1) // 2] == S[(N + 3) // 2 - 1:]:\n        print('Yes')\n    else:\n        print('No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11014": {"id": 11014, "code": "s1 = \"akasaka\"\ns1r = s1[::-1]\nn1 = len(s1)\ns2 = s1[:(n1-1)//2]\ns2r = s2[::-1]\ns3 = s1[-(n1-1)//2:]\ns3r = s3[::-1]\nif s1 == s1r and s2 == s2r and s3 == s3r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11015": {"id": 11015, "code": "s1 = \"level\"\ns1r = s1[::-1]\nn1 = len(s1)\ns2 = s1[:(n1-1)//2]\ns2r = s2[::-1]\ns3 = s1[-(n1-1)//2:]\ns3r = s3[::-1]\nif s1 == s1r and s2 == s2r and s3 == s3r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11016": {"id": 11016, "code": "s1 = \"atcoder\"\ns1r = s1[::-1]\nn1 = len(s1)\ns2 = s1[:(n1-1)//2]\ns2r = s2[::-1]\ns3 = s1[-(n1-1)//2:]\ns3r = s3[::-1]\nif s1 == s1r and s2 == s2r and s3 == s3r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11017": {"id": 11017, "code": "s = \"akasaka\"\nN = len(s)\ns_first = s[:(N-1)//2]\ns_second = s[(N+1)//2:]\nif(s == s[::-1] and s_first == s_first[::-1] and s_second == s_second[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11018": {"id": 11018, "code": "s = \"level\"\nN = len(s)\ns_first = s[:(N-1)//2]\ns_second = s[(N+1)//2:]\nif(s == s[::-1] and s_first == s_first[::-1] and s_second == s_second[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11019": {"id": 11019, "code": "s = \"atcoder\"\nN = len(s)\ns_first = s[:(N-1)//2]\ns_second = s[(N+1)//2:]\nif(s == s[::-1] and s_first == s_first[::-1] and s_second == s_second[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11020": {"id": 11020, "code": "def is_palindrome(s):\n    res = s == s[::-1]\n    return res\nS = \"akasaka\"\nN = len(S)\nans = ['No', 'Yes'][is_palindrome(S) & is_palindrome(S[:((N-1)//2)]) & is_palindrome(S[((N+1)//2):])]\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11021": {"id": 11021, "code": "def is_palindrome(s):\n    res = s == s[::-1]\n    return res\nS = \"level\"\nN = len(S)\nans = ['No', 'Yes'][is_palindrome(S) & is_palindrome(S[:((N-1)//2)]) & is_palindrome(S[((N+1)//2):])]\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11022": {"id": 11022, "code": "def is_palindrome(s):\n    res = s == s[::-1]\n    return res\nS = \"atcoder\"\nN = len(S)\nans = ['No', 'Yes'][is_palindrome(S) & is_palindrome(S[:((N-1)//2)]) & is_palindrome(S[((N+1)//2):])]\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11023": {"id": 11023, "code": "a = \"akasaka\"\nc=len(a)\nb=a[:(c-1)//2]\nd=a[(c+3)//2-1:]\nif a==a[::-1] and b==b[::-1] and d==d[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11024": {"id": 11024, "code": "a = \"level\"\nc=len(a)\nb=a[:(c-1)//2]\nd=a[(c+3)//2-1:]\nif a==a[::-1] and b==b[::-1] and d==d[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11025": {"id": 11025, "code": "a = \"atcoder\"\nc=len(a)\nb=a[:(c-1)//2]\nd=a[(c+3)//2-1:]\nif a==a[::-1] and b==b[::-1] and d==d[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11026": {"id": 11026, "code": "S = \"akasaka\"\nN = len(S)\ndef check(S1):\n    if S1 != S1[::-1]:\n        return False\n    else:\n        return True\nPOS = int((N-1)/2)\nS1 = S[0:POS]\nPOS = int((N+3)/2)\nS2 = S[POS-1:N]\nif check(S) == False or check(S1) == False or check(S2) == False:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11027": {"id": 11027, "code": "S = \"level\"\nN = len(S)\ndef check(S1):\n    if S1 != S1[::-1]:\n        return False\n    else:\n        return True\nPOS = int((N-1)/2)\nS1 = S[0:POS]\nPOS = int((N+3)/2)\nS2 = S[POS-1:N]\nif check(S) == False or check(S1) == False or check(S2) == False:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11028": {"id": 11028, "code": "S = \"atcoder\"\nN = len(S)\ndef check(S1):\n    if S1 != S1[::-1]:\n        return False\n    else:\n        return True\nPOS = int((N-1)/2)\nS1 = S[0:POS]\nPOS = int((N+3)/2)\nS2 = S[POS-1:N]\nif check(S) == False or check(S1) == False or check(S2) == False:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11029": {"id": 11029, "code": "s = \"akasaka\"\nn = len(s)\nlist_s = list(s)\nlist_s_part1 = list_s[0:(n - 1) // 2]\nlist_s_part2 = list_s[(n + 1) // 2:n]\nlist_s_rev = list(reversed(list_s))\nlist_s_part1_rev = list(reversed(list_s_part1))\nlist_s_part2_rev = list(reversed(list_s_part2))\nif ''.join(list_s) == ''.join(list_s_rev) and    ''.join(list_s_part1) == ''.join(list_s_part1_rev) and    ''.join(list_s_part2) == ''.join(list_s_part2_rev):\n    print('Yes')\nelse: print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"]}, "11030": {"id": 11030, "code": "s = \"level\"\nn = len(s)\nlist_s = list(s)\nlist_s_part1 = list_s[0:(n - 1) // 2]\nlist_s_part2 = list_s[(n + 1) // 2:n]\nlist_s_rev = list(reversed(list_s))\nlist_s_part1_rev = list(reversed(list_s_part1))\nlist_s_part2_rev = list(reversed(list_s_part2))\nif ''.join(list_s) == ''.join(list_s_rev) and    ''.join(list_s_part1) == ''.join(list_s_part1_rev) and    ''.join(list_s_part2) == ''.join(list_s_part2_rev):\n    print('Yes')\nelse: print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "11031": {"id": 11031, "code": "s = \"atcoder\"\nn = len(s)\nlist_s = list(s)\nlist_s_part1 = list_s[0:(n - 1) // 2]\nlist_s_part2 = list_s[(n + 1) // 2:n]\nlist_s_rev = list(reversed(list_s))\nlist_s_part1_rev = list(reversed(list_s_part1))\nlist_s_part2_rev = list(reversed(list_s_part2))\nif ''.join(list_s) == ''.join(list_s_rev) and    ''.join(list_s_part1) == ''.join(list_s_part1_rev) and    ''.join(list_s_part2) == ''.join(list_s_part2_rev):\n    print('Yes')\nelse: print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "11032": {"id": 11032, "code": "S = \"akasaka\"\nN=len(S)\nSH=S[:(N-1)//2]\nST=S[(N+3)//2-1:]\np=False\nif SH==SH[::-1] and SH==ST:\n  p=True\nprint(\"Yes\" if p else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "11033": {"id": 11033, "code": "S = \"level\"\nN=len(S)\nSH=S[:(N-1)//2]\nST=S[(N+3)//2-1:]\np=False\nif SH==SH[::-1] and SH==ST:\n  p=True\nprint(\"Yes\" if p else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">"]}, "11034": {"id": 11034, "code": "S = \"atcoder\"\nN=len(S)\nSH=S[:(N-1)//2]\nST=S[(N+3)//2-1:]\np=False\nif SH==SH[::-1] and SH==ST:\n  p=True\nprint(\"Yes\" if p else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">"]}, "11035": {"id": 11035, "code": "s = \"akasaka\"\ncount=0\nn=int(len(s))\nt1=s[:int((n-1)/2)]\nt2=s[int((n+3)/2-1):]\nresult='No'\nif s==s[::-1]:\n    if t1==t1[::-1]:\n        if t2==t2[::-1]:\n            result='Yes'\nprint(result)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11036": {"id": 11036, "code": "s = \"level\"\ncount=0\nn=int(len(s))\nt1=s[:int((n-1)/2)]\nt2=s[int((n+3)/2-1):]\nresult='No'\nif s==s[::-1]:\n    if t1==t1[::-1]:\n        if t2==t2[::-1]:\n            result='Yes'\nprint(result)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11037": {"id": 11037, "code": "s = \"atcoder\"\ncount=0\nn=int(len(s))\nt1=s[:int((n-1)/2)]\nt2=s[int((n+3)/2-1):]\nresult='No'\nif s==s[::-1]:\n    if t1==t1[::-1]:\n        if t2==t2[::-1]:\n            result='Yes'\nprint(result)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11038": {"id": 11038, "code": "S = \"akasaka\"\nnew_S1=list(reversed(S))\nnew_S2=''.join(new_S1)\nif S==new_S2:\n    A=S[0:len(S)//2]\n    new_A1 = list(reversed(A))\n    new_A2 = ''.join(new_A1)\n    B=S[len(S)//2+1:len(S)]\n    new_B1 = list(reversed(B))\n    new_B2 = ''.join(new_B1)\n    if A==new_A2 and B==new_B2:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "11039": {"id": 11039, "code": "S = \"level\"\nnew_S1=list(reversed(S))\nnew_S2=''.join(new_S1)\nif S==new_S2:\n    A=S[0:len(S)//2]\n    new_A1 = list(reversed(A))\n    new_A2 = ''.join(new_A1)\n    B=S[len(S)//2+1:len(S)]\n    new_B1 = list(reversed(B))\n    new_B2 = ''.join(new_B1)\n    if A==new_A2 and B==new_B2:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "11040": {"id": 11040, "code": "S = \"atcoder\"\nnew_S1=list(reversed(S))\nnew_S2=''.join(new_S1)\nif S==new_S2:\n    A=S[0:len(S)//2]\n    new_A1 = list(reversed(A))\n    new_A2 = ''.join(new_A1)\n    B=S[len(S)//2+1:len(S)]\n    new_B1 = list(reversed(B))\n    new_B2 = ''.join(new_B1)\n    if A==new_A2 and B==new_B2:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "11041": {"id": 11041, "code": "S = \"akasaka\"\nflag=0\nif S==S[::-1]:\n  s = S[:(len(S)-1)//2]\n  if s==s[::-1]:\n    s2 = S[(len(S)+3)//2-1:]\n    if s2==s2[::-1]:\n      flag=1\nif flag:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!"]}, "11042": {"id": 11042, "code": "S = \"level\"\nflag=0\nif S==S[::-1]:\n  s = S[:(len(S)-1)//2]\n  if s==s[::-1]:\n    s2 = S[(len(S)+3)//2-1:]\n    if s2==s2[::-1]:\n      flag=1\nif flag:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">", ">"]}, "11043": {"id": 11043, "code": "S = \"atcoder\"\nflag=0\nif S==S[::-1]:\n  s = S[:(len(S)-1)//2]\n  if s==s[::-1]:\n    s2 = S[(len(S)+3)//2-1:]\n    if s2==s2[::-1]:\n      flag=1\nif flag:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", "!", "!", "!", "!", "!", ">", ">"]}, "11044": {"id": 11044, "code": "S = \"akasaka\"\nl = len(S) // 2\nll = l // 2\nformer = S[:l]\nlatter = S[l+1:]\nfor i in range(l):\n  if S[i] != S[-i-1]:\n    print(\"No\")\n    break\nelse:\n  for i in range(ll):\n    if former[i] != former[-i-1] or latter[i] != latter[-i-1]:\n      print(\"No\")\n      break\n  else:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", "!", "!", "!", ">"]}, "11045": {"id": 11045, "code": "S = \"level\"\nl = len(S) // 2\nll = l // 2\nformer = S[:l]\nlatter = S[l+1:]\nfor i in range(l):\n  if S[i] != S[-i-1]:\n    print(\"No\")\n    break\nelse:\n  for i in range(ll):\n    if former[i] != former[-i-1] or latter[i] != latter[-i-1]:\n      print(\"No\")\n      break\n  else:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!"]}, "11046": {"id": 11046, "code": "S = \"atcoder\"\nl = len(S) // 2\nll = l // 2\nformer = S[:l]\nlatter = S[l+1:]\nfor i in range(l):\n  if S[i] != S[-i-1]:\n    print(\"No\")\n    break\nelse:\n  for i in range(ll):\n    if former[i] != former[-i-1] or latter[i] != latter[-i-1]:\n      print(\"No\")\n      break\n  else:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!"]}, "11047": {"id": 11047, "code": "s = \"akasaka\"\nn=len(s)\nx=n//2\na=s[0:x]\nb=s[x+1:]\nif a==b:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!"]}, "11048": {"id": 11048, "code": "s = \"level\"\nn=len(s)\nx=n//2\na=s[0:x]\nb=s[x+1:]\nif a==b:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11049": {"id": 11049, "code": "s = \"atcoder\"\nn=len(s)\nx=n//2\na=s[0:x]\nb=s[x+1:]\nif a==b:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11050": {"id": 11050, "code": "s = \"akasaka\"\ndef kaibun(x):\n    ans=1\n    for i in range(len(x)//2):\n        if x[i]!=x[-i-1]:\n            ans=0\n            break\n    return ans\nn=len(s)\na1=kaibun(s)\na2=kaibun(s[0:(n-1)//2])\na3=kaibun(s[-1+(n+3)//2:n])\nif a1==1 and a2==1 and a3==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11051": {"id": 11051, "code": "s = \"level\"\ndef kaibun(x):\n    ans=1\n    for i in range(len(x)//2):\n        if x[i]!=x[-i-1]:\n            ans=0\n            break\n    return ans\nn=len(s)\na1=kaibun(s)\na2=kaibun(s[0:(n-1)//2])\na3=kaibun(s[-1+(n+3)//2:n])\nif a1==1 and a2==1 and a3==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11052": {"id": 11052, "code": "s = \"atcoder\"\ndef kaibun(x):\n    ans=1\n    for i in range(len(x)//2):\n        if x[i]!=x[-i-1]:\n            ans=0\n            break\n    return ans\nn=len(s)\na1=kaibun(s)\na2=kaibun(s[0:(n-1)//2])\na3=kaibun(s[-1+(n+3)//2:n])\nif a1==1 and a2==1 and a3==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11053": {"id": 11053, "code": "S = \"akasaka\"\nN=len(S)\nSS=S[0:(N-1)//2]\nSSS=S[(N+1)//2:N+1]\nfor i in range((N-1)//2):\n  if S[i]!=S[-1-i]:print('No');exit()\n  if SS[i]!=SS[-1-i]:print('No');exit()\n  if SSS[i]!=SSS[-1-i]:print('No');exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11054": {"id": 11054, "code": "s = \"akasaka\"\nn=len(s)//2\nif s[:n]==s[n+1:]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!"]}, "11055": {"id": 11055, "code": "s = \"level\"\nn=len(s)//2\nif s[:n]==s[n+1:]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">"]}, "11056": {"id": 11056, "code": "s = \"atcoder\"\nn=len(s)//2\nif s[:n]==s[n+1:]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">"]}, "11057": {"id": 11057, "code": "s = \"akasaka\"\nn = len(s)\nt = s[:(n-1)//2]\nu = s[(n+3)//2-1:]\nif (s == s[::-1]\n    and t == t[::-1]\n    and u == u[::-1]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11058": {"id": 11058, "code": "s = \"level\"\nn = len(s)\nt = s[:(n-1)//2]\nu = s[(n+3)//2-1:]\nif (s == s[::-1]\n    and t == t[::-1]\n    and u == u[::-1]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11059": {"id": 11059, "code": "s = \"atcoder\"\nn = len(s)\nt = s[:(n-1)//2]\nu = s[(n+3)//2-1:]\nif (s == s[::-1]\n    and t == t[::-1]\n    and u == u[::-1]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11060": {"id": 11060, "code": "s = \"akasaka\"\nn = len(s)\nz = 'Yes'\nfor i in range(n//2):\n    if s[i] != s[-1-i]:\n        z = 'No'\nif z == 'Yes':\n    for h in range(len(s[:(n-1)//2])):\n        if s[:(n-1)//2][h] != s[:(n-1)//2][-1-h]:\n            z = 'No'\n            break\nif z == 'Yes':\n    for j in range(len(s[((n+3)//2)-1:])):\n        if s[((n+3)//2)-1:][j] != s[((n+3)//2)-1:][-1-j]:\n            z = 'No'\n            break\nprint(z)", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11061": {"id": 11061, "code": "s = \"level\"\nn = len(s)\nz = 'Yes'\nfor i in range(n//2):\n    if s[i] != s[-1-i]:\n        z = 'No'\nif z == 'Yes':\n    for h in range(len(s[:(n-1)//2])):\n        if s[:(n-1)//2][h] != s[:(n-1)//2][-1-h]:\n            z = 'No'\n            break\nif z == 'Yes':\n    for j in range(len(s[((n+3)//2)-1:])):\n        if s[((n+3)//2)-1:][j] != s[((n+3)//2)-1:][-1-j]:\n            z = 'No'\n            break\nprint(z)", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11062": {"id": 11062, "code": "s = \"atcoder\"\nn = len(s)\nz = 'Yes'\nfor i in range(n//2):\n    if s[i] != s[-1-i]:\n        z = 'No'\nif z == 'Yes':\n    for h in range(len(s[:(n-1)//2])):\n        if s[:(n-1)//2][h] != s[:(n-1)//2][-1-h]:\n            z = 'No'\n            break\nif z == 'Yes':\n    for j in range(len(s[((n+3)//2)-1:])):\n        if s[((n+3)//2)-1:][j] != s[((n+3)//2)-1:][-1-j]:\n            z = 'No'\n            break\nprint(z)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", "!", "!", ">"]}, "11063": {"id": 11063, "code": "def check(S, N):\n  for i in range((N-1)//2):\n    if S[i] != S[-(1+i)]:\n      print(\"No\")\n      exit()\ndef ot_check(S, N):\n  for i in range(N//2):\n    if S[i] != S[-(1+i)]:\n      print(\"No\")\n      exit()\nS = \"akasaka\"\nN = len(S)\nSS = S[0:(N-1)//2]\nNN = len(SS)\nSSS = S[((N+3)//2)-1:]\nNNN = len(SSS)\ncheck(S, N)\nif len(SS)%2 == 0:\n  ot_check(SS, NN)\nelse:\n  check(SS, NN)\nif len(SSS)%2 == 0:\n  ot_check(SSS, NNN)\nelse:\n  check(SSS, NNN)\nprint(\"Yes\")", "coverage": [">", ">", ">", "!", "!", ">", "!", "!", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "11064": {"id": 11064, "code": "S = \"akasaka\"\nflag = 0\nN = len(S)\ns1 = int((N-1)/2)\ns2 = int((N+3)/2)\nif S[0:s1] == S[s1+1:]:\n  flag = 1\nelse:\n  flag = 0    \nif S[s2-1:] == S[:s2-2]:\n  flag = 1\nelse:\n  flag = 0\nif flag == 1:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!"]}, "11065": {"id": 11065, "code": "S = \"level\"\nflag = 0\nN = len(S)\ns1 = int((N-1)/2)\ns2 = int((N+3)/2)\nif S[0:s1] == S[s1+1:]:\n  flag = 1\nelse:\n  flag = 0    \nif S[s2-1:] == S[:s2-2]:\n  flag = 1\nelse:\n  flag = 0\nif flag == 1:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "11066": {"id": 11066, "code": "S = \"atcoder\"\nflag = 0\nN = len(S)\ns1 = int((N-1)/2)\ns2 = int((N+3)/2)\nif S[0:s1] == S[s1+1:]:\n  flag = 1\nelse:\n  flag = 0    \nif S[s2-1:] == S[:s2-2]:\n  flag = 1\nelse:\n  flag = 0\nif flag == 1:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "11067": {"id": 11067, "code": "import math\nfrom math import gcd\nINF = float(\"inf\")\nimport sys\ninput=sys.stdin.readline\nimport itertools\ndef main():\n    s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\n    n = len(s)\n    h = n//2\n    f = s[:h]\n    l = s[h+1:]\n    if s == s[::-1] and f == f[::-1] and l == l[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__==\"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11068": {"id": 11068, "code": "import math\nfrom math import gcd\nINF = float(\"inf\")\nimport sys\ninput=sys.stdin.readline\nimport itertools\ndef main():\n    s = ['l', 'e', 'v', 'e', 'l']\n    n = len(s)\n    h = n//2\n    f = s[:h]\n    l = s[h+1:]\n    if s == s[::-1] and f == f[::-1] and l == l[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__==\"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11069": {"id": 11069, "code": "import math\nfrom math import gcd\nINF = float(\"inf\")\nimport sys\ninput=sys.stdin.readline\nimport itertools\ndef main():\n    s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\n    n = len(s)\n    h = n//2\n    f = s[:h]\n    l = s[h+1:]\n    if s == s[::-1] and f == f[::-1] and l == l[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__==\"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11070": {"id": 11070, "code": "s = \"akasaka\"\nn = len(s)\nl1 = int((n-1)/2)\nl2 = int((n+3)/2)\nif s == s[::-1] and s[:l1] == s[l2-1:n] :   \n    print('Yes')\nelse :\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11071": {"id": 11071, "code": "s = \"level\"\nn = len(s)\nl1 = int((n-1)/2)\nl2 = int((n+3)/2)\nif s == s[::-1] and s[:l1] == s[l2-1:n] :   \n    print('Yes')\nelse :\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11072": {"id": 11072, "code": "s = \"atcoder\"\nn = len(s)\nl1 = int((n-1)/2)\nl2 = int((n+3)/2)\nif s == s[::-1] and s[:l1] == s[l2-1:n] :   \n    print('Yes')\nelse :\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11073": {"id": 11073, "code": "S = \"akasaka\"\nflag = 0\nfor i in range(0, len(S), 1):\n\tif S[i] != S[len(S)-1-i]:\n\t\tflag = 1\nfor i in range(0, len(S)//2, 1):\n\tif S[i] != S[len(S)//2-1-i]:\n\t\tflag = 1\nif flag == 0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", "!"]}, "11074": {"id": 11074, "code": "S = \"level\"\nflag = 0\nfor i in range(0, len(S), 1):\n\tif S[i] != S[len(S)-1-i]:\n\t\tflag = 1\nfor i in range(0, len(S)//2, 1):\n\tif S[i] != S[len(S)//2-1-i]:\n\t\tflag = 1\nif flag == 0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">"]}, "11075": {"id": 11075, "code": "S = \"atcoder\"\nflag = 0\nfor i in range(0, len(S), 1):\n\tif S[i] != S[len(S)-1-i]:\n\t\tflag = 1\nfor i in range(0, len(S)//2, 1):\n\tif S[i] != S[len(S)//2-1-i]:\n\t\tflag = 1\nif flag == 0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11076": {"id": 11076, "code": "import math\ns = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\ns1 = s[ : (n-1) // 2]\ns2 = s[(n+3) // 2 - 1 : n]\nflag = 1\nfor i in range(len(s) // 2):\n    if s[i] != s[- i - 1]:\n        flag = 0\nfor i in range(len(s1) // 2):\n    if s1[i] != s1[- i - 1]:\n        flag = 0\nfor i in range(len(s2) // 2):\n    if s2[i] != s2[- i - 1]:\n        flag = 0\nprint('Yes' if flag == 1  else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", ">"]}, "11077": {"id": 11077, "code": "import math\ns = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\ns1 = s[ : (n-1) // 2]\ns2 = s[(n+3) // 2 - 1 : n]\nflag = 1\nfor i in range(len(s) // 2):\n    if s[i] != s[- i - 1]:\n        flag = 0\nfor i in range(len(s1) // 2):\n    if s1[i] != s1[- i - 1]:\n        flag = 0\nfor i in range(len(s2) // 2):\n    if s2[i] != s2[- i - 1]:\n        flag = 0\nprint('Yes' if flag == 1  else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">"]}, "11078": {"id": 11078, "code": "import math\ns = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\ns1 = s[ : (n-1) // 2]\ns2 = s[(n+3) // 2 - 1 : n]\nflag = 1\nfor i in range(len(s) // 2):\n    if s[i] != s[- i - 1]:\n        flag = 0\nfor i in range(len(s1) // 2):\n    if s1[i] != s1[- i - 1]:\n        flag = 0\nfor i in range(len(s2) // 2):\n    if s2[i] != s2[- i - 1]:\n        flag = 0\nprint('Yes' if flag == 1  else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11079": {"id": 11079, "code": "s = \"akasaka\"\nn = len(s)\nn2 = (n+1)//2\nfor i in range(n):\n  if(s[i] != s[n-i-1]):\n    print(\"No\")\n    exit()\nfor i in range((n-1)//2):\n  if(s[i] != s[n2-2-i]):\n    print(\"No\")\n    exit()\n  if(s[n2+i] != s[n-i-1]):\n    print(\"No\")\n    exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", "!", "!", ">"]}, "11080": {"id": 11080, "code": "S = \"akasaka\"\nans = 'Yes'\nfor i in range(len(S)//2):\n  if S[i] != S[len(S)-1-i]:\n    ans = 'No'\nfront = S[0:(len(S)-1)//2]\nfor i in range(len(front)//2):\n  if front[i] != front[len(front)-1-i]:\n    ans = 'No'\nend = S[(len(S)+1)//2:]\nfor i in range(len(end)//2):\n  if end[i] != front[len(end)-1-i]:\n    ans = 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">"]}, "11081": {"id": 11081, "code": "S = \"level\"\nans = 'Yes'\nfor i in range(len(S)//2):\n  if S[i] != S[len(S)-1-i]:\n    ans = 'No'\nfront = S[0:(len(S)-1)//2]\nfor i in range(len(front)//2):\n  if front[i] != front[len(front)-1-i]:\n    ans = 'No'\nend = S[(len(S)+1)//2:]\nfor i in range(len(end)//2):\n  if end[i] != front[len(end)-1-i]:\n    ans = 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "11082": {"id": 11082, "code": "S = \"atcoder\"\nans = 'Yes'\nfor i in range(len(S)//2):\n  if S[i] != S[len(S)-1-i]:\n    ans = 'No'\nfront = S[0:(len(S)-1)//2]\nfor i in range(len(front)//2):\n  if front[i] != front[len(front)-1-i]:\n    ans = 'No'\nend = S[(len(S)+1)//2:]\nfor i in range(len(end)//2):\n  if end[i] != front[len(end)-1-i]:\n    ans = 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11083": {"id": 11083, "code": "S = \"akasaka\"\nN = len(S)\nr_S = S[::-1]\nhead_S = S[0: int((N - 1) / 2)]\nr_head_S = head_S[::-1]\nend_S = S[int((N+3)/2 - 1) : N+1]\nr_end_S = end_S[::-1]\nif S == r_S and head_S == r_head_S and end_S == r_end_S:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11084": {"id": 11084, "code": "S = \"level\"\nN = len(S)\nr_S = S[::-1]\nhead_S = S[0: int((N - 1) / 2)]\nr_head_S = head_S[::-1]\nend_S = S[int((N+3)/2 - 1) : N+1]\nr_end_S = end_S[::-1]\nif S == r_S and head_S == r_head_S and end_S == r_end_S:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11085": {"id": 11085, "code": "S = \"atcoder\"\nN = len(S)\nr_S = S[::-1]\nhead_S = S[0: int((N - 1) / 2)]\nr_head_S = head_S[::-1]\nend_S = S[int((N+3)/2 - 1) : N+1]\nr_end_S = end_S[::-1]\nif S == r_S and head_S == r_head_S and end_S == r_end_S:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11086": {"id": 11086, "code": "word = \"akasaka\"\nn = len(word)\nhanbun = int((n-1)/2)\nnotk = 0\nfor i in range(hanbun):\n    if word[i] != word[n-i-1]:\n        notk = 1\n        break\nif hanbun % 2 == 0:\n    hanbun2 = int(hanbun/2)\nelse:\n    hanbun2 = int((hanbun-1)/2)\nfor j in range(hanbun2):\n    if word[j] != word[hanbun-j-1]:\n        notk = 1\n        break\nif notk == 1:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "11087": {"id": 11087, "code": "word = \"level\"\nn = len(word)\nhanbun = int((n-1)/2)\nnotk = 0\nfor i in range(hanbun):\n    if word[i] != word[n-i-1]:\n        notk = 1\n        break\nif hanbun % 2 == 0:\n    hanbun2 = int(hanbun/2)\nelse:\n    hanbun2 = int((hanbun-1)/2)\nfor j in range(hanbun2):\n    if word[j] != word[hanbun-j-1]:\n        notk = 1\n        break\nif notk == 1:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11088": {"id": 11088, "code": "word = \"atcoder\"\nn = len(word)\nhanbun = int((n-1)/2)\nnotk = 0\nfor i in range(hanbun):\n    if word[i] != word[n-i-1]:\n        notk = 1\n        break\nif hanbun % 2 == 0:\n    hanbun2 = int(hanbun/2)\nelse:\n    hanbun2 = int((hanbun-1)/2)\nfor j in range(hanbun2):\n    if word[j] != word[hanbun-j-1]:\n        notk = 1\n        break\nif notk == 1:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11089": {"id": 11089, "code": "s = \"akasaka\"\ndef is_palinedrome(st):\n    for i in range(len(st)//2):\n        if st[i] != st[-(i+1)]:\n            return False\n    return True\ns_pali = is_palinedrome(s)\nsub_pali_left = is_palinedrome(s[:len(s)//2])\nsub_pali_right = is_palinedrome(s[len(s)//2+1:])\nif s_pali and sub_pali_left and sub_pali_right:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11090": {"id": 11090, "code": "s = \"level\"\ndef is_palinedrome(st):\n    for i in range(len(st)//2):\n        if st[i] != st[-(i+1)]:\n            return False\n    return True\ns_pali = is_palinedrome(s)\nsub_pali_left = is_palinedrome(s[:len(s)//2])\nsub_pali_right = is_palinedrome(s[len(s)//2+1:])\nif s_pali and sub_pali_left and sub_pali_right:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11091": {"id": 11091, "code": "s = \"atcoder\"\ndef is_palinedrome(st):\n    for i in range(len(st)//2):\n        if st[i] != st[-(i+1)]:\n            return False\n    return True\ns_pali = is_palinedrome(s)\nsub_pali_left = is_palinedrome(s[:len(s)//2])\nsub_pali_right = is_palinedrome(s[len(s)//2+1:])\nif s_pali and sub_pali_left and sub_pali_right:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">"]}, "11092": {"id": 11092, "code": "s = \"akasaka\"\nl = len(s)\ndef check(a):\n  n = len(a)\n  if n % 2 == 0:\n    for i in range(n//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\n  else:\n    for i in range((n-1)//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\nres = \"No\"\nif check(s):\n  if check(s[:(l-1)//2]):\n    if check(s[(l+3)//2 - 1:]):\n      res = \"Yes\"\nprint(res)", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">"]}, "11093": {"id": 11093, "code": "s = \"level\"\nl = len(s)\ndef check(a):\n  n = len(a)\n  if n % 2 == 0:\n    for i in range(n//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\n  else:\n    for i in range((n-1)//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\nres = \"No\"\nif check(s):\n  if check(s[:(l-1)//2]):\n    if check(s[(l+3)//2 - 1:]):\n      res = \"Yes\"\nprint(res)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">"]}, "11094": {"id": 11094, "code": "s = \"atcoder\"\nl = len(s)\ndef check(a):\n  n = len(a)\n  if n % 2 == 0:\n    for i in range(n//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\n  else:\n    for i in range((n-1)//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\nres = \"No\"\nif check(s):\n  if check(s[:(l-1)//2]):\n    if check(s[(l+3)//2 - 1:]):\n      res = \"Yes\"\nprint(res)", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">", ">", ">", "!", ">", ">", "!", "!", "!", ">"]}, "11095": {"id": 11095, "code": "s = \"akasaka\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[(n+3)//2-1:]\ndef check(s):\n  i=0\n  j=len(s)-1\n  while j>i:\n    if s[j]!=s[i]:\n      return False\n    j-=1\n    i+=1\n  return True\nif check(s) and check(s1) and check(s2):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "11096": {"id": 11096, "code": "s = \"level\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[(n+3)//2-1:]\ndef check(s):\n  i=0\n  j=len(s)-1\n  while j>i:\n    if s[j]!=s[i]:\n      return False\n    j-=1\n    i+=1\n  return True\nif check(s) and check(s1) and check(s2):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11097": {"id": 11097, "code": "s = \"atcoder\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[(n+3)//2-1:]\ndef check(s):\n  i=0\n  j=len(s)-1\n  while j>i:\n    if s[j]!=s[i]:\n      return False\n    j-=1\n    i+=1\n  return True\nif check(s) and check(s1) and check(s2):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "11098": {"id": 11098, "code": "s = \"akasaka\"\ndef kaibun(w):\n    for i in range(len(w)):\n        if w[i]!=w[len(w)-1-i]:\n            return False\n    return True\nn=len(s)\nprint(\"Yes\") if all([kaibun(s) , kaibun(s[:(n-1)//2]) , kaibun(s[(n+3)//2-1:])]) else print(\"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">"]}, "11099": {"id": 11099, "code": "s = \"level\"\ndef kaibun(w):\n    for i in range(len(w)):\n        if w[i]!=w[len(w)-1-i]:\n            return False\n    return True\nn=len(s)\nprint(\"Yes\") if all([kaibun(s) , kaibun(s[:(n-1)//2]) , kaibun(s[(n+3)//2-1:])]) else print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "11100": {"id": 11100, "code": "s = \"atcoder\"\ndef kaibun(w):\n    for i in range(len(w)):\n        if w[i]!=w[len(w)-1-i]:\n            return False\n    return True\nn=len(s)\nprint(\"Yes\") if all([kaibun(s) , kaibun(s[:(n-1)//2]) , kaibun(s[(n+3)//2-1:])]) else print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">"]}, "11101": {"id": 11101, "code": "S = \"akasaka\"\nL=(len(S)-1)//2\nans='Yes'\nif S[:L]!=S[-L:]:\n    ans='No'\nfor n in range(L):\n    m=L-1-n\n    if S[n]!=S[m]:\n        ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", "!", ">"]}, "11102": {"id": 11102, "code": "S = \"level\"\nL=(len(S)-1)//2\nans='Yes'\nif S[:L]!=S[-L:]:\n    ans='No'\nfor n in range(L):\n    m=L-1-n\n    if S[n]!=S[m]:\n        ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11103": {"id": 11103, "code": "S = \"atcoder\"\nL=(len(S)-1)//2\nans='Yes'\nif S[:L]!=S[-L:]:\n    ans='No'\nfor n in range(L):\n    m=L-1-n\n    if S[n]!=S[m]:\n        ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11104": {"id": 11104, "code": "S = \"akasaka\"\nif len(S) % 4 == 1:\n    m = len(S) // 4\n    for i in range(m):\n        if (S[i] != S[2 * m - i - 1] or\n            S[2 * m - i - 1] != S[2 * m + 1 + i] or\n            S[2 * m + 1 + i] != S[4 * m - i]):\n            print('No')\n            exit()    \nelse:\n    m = len(S) // 4 + 1\n    for i in range(m - 1):\n        if (S[i] != S[2 * m - i - 2] or\n            S[2 * m - i - 2] != S[2 * m + i] or\n            S[2 * m + i] != S[4 * m - i - 2]):\n            print('No')\n            exit()\n    if S[m - 1] != S[3 * m - 1]:\n        print('No')\n        exit()\nprint('Yes')", "coverage": [">", ">", "!", "!", "!", "!", "!", "!", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "11105": {"id": 11105, "code": "s = \"akasaka\"\ns_len = int((len(s) - 1) / 2)\ns_1 = s[:s_len]\ns_1_len = int((len(s_1) - 1) / 2)\ns_2 = s[s_len+1:]\ns_2_len = int((len(s_2) - 1) / 2)\nans = 'Yes'\nfor i in range(s_len+1):\n  if s[i] != s[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_1_len+1):\n  if s_1[i] != s_1[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_2_len+1):\n  if s_2[i] != s_2[-i-1]:\n    ans = 'No'\n    break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "11106": {"id": 11106, "code": "s = \"level\"\ns_len = int((len(s) - 1) / 2)\ns_1 = s[:s_len]\ns_1_len = int((len(s_1) - 1) / 2)\ns_2 = s[s_len+1:]\ns_2_len = int((len(s_2) - 1) / 2)\nans = 'Yes'\nfor i in range(s_len+1):\n  if s[i] != s[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_1_len+1):\n  if s_1[i] != s_1[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_2_len+1):\n  if s_2[i] != s_2[-i-1]:\n    ans = 'No'\n    break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11107": {"id": 11107, "code": "s = \"atcoder\"\ns_len = int((len(s) - 1) / 2)\ns_1 = s[:s_len]\ns_1_len = int((len(s_1) - 1) / 2)\ns_2 = s[s_len+1:]\ns_2_len = int((len(s_2) - 1) / 2)\nans = 'Yes'\nfor i in range(s_len+1):\n  if s[i] != s[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_1_len+1):\n  if s_1[i] != s_1[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_2_len+1):\n  if s_2[i] != s_2[-i-1]:\n    ans = 'No'\n    break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11108": {"id": 11108, "code": "S = \"akasaka\"\nL = len(S)\nfor i in range((L-1)//2):\n    if S[i] != S[L-1-i]:\n        print(\"No\")\n        exit()\nfor i in range((L-1)//4):\n    if S[i] != S[(L-1)//2-1-i]:\n        print(\"No\")\n        exit()\nfor i in range(L-1, L - (L-1)//4, -1):\n    if S[i] != S[i - (L-1)//2-1]:\n        print(\"No\")\n        exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", "!", "!", "!", ">"]}, "11109": {"id": 11109, "code": "s = \"akasaka\"\nn = len(s)\ncnt = 0\ns1 = s[:((n-1)//2)]\ns2 = s[(n+3)//2 -1:n]\nfor i in range(n//2):\n    if s[i] != s[-i-1]:\n        print('No')\n        exit()\n    else:\n        if s1[i] != s2[i]:\n            print('No')\n            exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "11110": {"id": 11110, "code": "s = \"level\"\nmozisuu=len(s)\ndef hanteiki(s):\n    hantei=True\n    mozisuu=len(s)\n    for i in range(len(s)):\n        if s[i]!=s[mozisuu-i-1]:\n            hantei=False\n    return hantei\nif hanteiki(s):\n    if hanteiki(s[0:(mozisuu-1)//2]):\n        if hanteiki(s[(mozisuu+3)//2-1:]):\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11111": {"id": 11111, "code": "s = \"atcoder\"\nmozisuu=len(s)\ndef hanteiki(s):\n    hantei=True\n    mozisuu=len(s)\n    for i in range(len(s)):\n        if s[i]!=s[mozisuu-i-1]:\n            hantei=False\n    return hantei\nif hanteiki(s):\n    if hanteiki(s[0:(mozisuu-1)//2]):\n        if hanteiki(s[(mozisuu+3)//2-1:]):\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11112": {"id": 11112, "code": "S = \"akasaka\"\nlenS = len(S)\nans = \"No\"\ndef checkPalindrome(string):\n    l = len(string)\n    string2 = string[::-1]\n    if string[:l//2] == string2[:l//2]:\n        return True\n    else:\n        return False\nif checkPalindrome(S):\n    if checkPalindrome(S[:(lenS-1)//2]):\n        if checkPalindrome(S[(lenS+3)//2-1:]):\n            ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">"]}, "11113": {"id": 11113, "code": "S = \"level\"\nlenS = len(S)\nans = \"No\"\ndef checkPalindrome(string):\n    l = len(string)\n    string2 = string[::-1]\n    if string[:l//2] == string2[:l//2]:\n        return True\n    else:\n        return False\nif checkPalindrome(S):\n    if checkPalindrome(S[:(lenS-1)//2]):\n        if checkPalindrome(S[(lenS+3)//2-1:]):\n            ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "11114": {"id": 11114, "code": "S = \"atcoder\"\nlenS = len(S)\nans = \"No\"\ndef checkPalindrome(string):\n    l = len(string)\n    string2 = string[::-1]\n    if string[:l//2] == string2[:l//2]:\n        return True\n    else:\n        return False\nif checkPalindrome(S):\n    if checkPalindrome(S[:(lenS-1)//2]):\n        if checkPalindrome(S[(lenS+3)//2-1:]):\n            ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", ">"]}, "11115": {"id": 11115, "code": "import sys\ninput = \"<function <lambda>>\"\ndef pal(s, L, R):\n    return s[L] == s[R] and (L >= R or pal(s, L + 1, R - 1))\ns = \"akasaka\"\nn = len(s)\nprint('Yes' if pal(s, 0, n - 1) and pal(s, 0, (n - 1) // 2 - 1) and pal(s, (n + 3) // 2 - 1, n - 1) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11116": {"id": 11116, "code": "import sys\ninput = \"<function <lambda>>\"\ndef pal(s, L, R):\n    return s[L] == s[R] and (L >= R or pal(s, L + 1, R - 1))\ns = \"level\"\nn = len(s)\nprint('Yes' if pal(s, 0, n - 1) and pal(s, 0, (n - 1) // 2 - 1) and pal(s, (n + 3) // 2 - 1, n - 1) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11117": {"id": 11117, "code": "import sys\ninput = \"<function <lambda>>\"\ndef pal(s, L, R):\n    return s[L] == s[R] and (L >= R or pal(s, L + 1, R - 1))\ns = \"atcoder\"\nn = len(s)\nprint('Yes' if pal(s, 0, n - 1) and pal(s, 0, (n - 1) // 2 - 1) and pal(s, (n + 3) // 2 - 1, n - 1) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11118": {"id": 11118, "code": "s = \"akasaka\"\nc = int((len(s) - 1)/2)\nans = (list(s) == list(reversed(s)) and list(s[:c]) == list(reversed(s[:c])) and list(s[(c+1):]) == list(reversed(s[(c+1):])))\nprint([\"No\", \"Yes\"][ans])", "coverage": [">", ">", ">", ">"]}, "11119": {"id": 11119, "code": "s = \"level\"\nc = int((len(s) - 1)/2)\nans = (list(s) == list(reversed(s)) and list(s[:c]) == list(reversed(s[:c])) and list(s[(c+1):]) == list(reversed(s[(c+1):])))\nprint([\"No\", \"Yes\"][ans])", "coverage": [">", ">", ">", ">"]}, "11120": {"id": 11120, "code": "s = \"atcoder\"\nc = int((len(s) - 1)/2)\nans = (list(s) == list(reversed(s)) and list(s[:c]) == list(reversed(s[:c])) and list(s[(c+1):]) == list(reversed(s[(c+1):])))\nprint([\"No\", \"Yes\"][ans])", "coverage": [">", ">", ">", ">"]}, "11121": {"id": 11121, "code": "S = \"akasaka\"\nN = len(S)\nsubS1 = S[:int((N - 1) / 2)]\nsubS2 = S[int((N + 3) / 2) - 1:]\nif subS1 == subS1[::-1] and subS2 == subS2[::-1] and S == S[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11122": {"id": 11122, "code": "S = \"level\"\nN = len(S)\nsubS1 = S[:int((N - 1) / 2)]\nsubS2 = S[int((N + 3) / 2) - 1:]\nif subS1 == subS1[::-1] and subS2 == subS2[::-1] and S == S[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11123": {"id": 11123, "code": "S = \"atcoder\"\nN = len(S)\nsubS1 = S[:int((N - 1) / 2)]\nsubS2 = S[int((N + 3) / 2) - 1:]\nif subS1 == subS1[::-1] and subS2 == subS2[::-1] and S == S[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11124": {"id": 11124, "code": "S = \"akasaka\"\nN = len(S)\nS_1 = S[0:int((N-1)/2)]\nS_2 = S[int((N+3)/2-1):N+1]\nprint('Yes' if S[::-1] == S and S_1[::-1] == S_1 and S_2[::-1] == S_2 else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "11125": {"id": 11125, "code": "S = \"level\"\nN = len(S)\nS_1 = S[0:int((N-1)/2)]\nS_2 = S[int((N+3)/2-1):N+1]\nprint('Yes' if S[::-1] == S and S_1[::-1] == S_1 and S_2[::-1] == S_2 else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "11126": {"id": 11126, "code": "S = \"atcoder\"\nN = len(S)\nS_1 = S[0:int((N-1)/2)]\nS_2 = S[int((N+3)/2-1):N+1]\nprint('Yes' if S[::-1] == S and S_1[::-1] == S_1 and S_2[::-1] == S_2 else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "11127": {"id": 11127, "code": "S = \"akasaka\"\nN=len(S)\ndef isPalindrome(s):\n  n = len(s)\n  flag=True\n  slist=list(s)\n  for i, c in enumerate(slist):\n    if c!=slist[n-1-i]:\n      flag=False\n    if i > n-i:\n      break\n  return flag\nSlist=list(S)\nif isPalindrome(S) and   isPalindrome(Slist[0:int((N-1)/2)]) and   isPalindrome(Slist[int((N+3)/2)-1:N]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11128": {"id": 11128, "code": "S = \"level\"\nN=len(S)\ndef isPalindrome(s):\n  n = len(s)\n  flag=True\n  slist=list(s)\n  for i, c in enumerate(slist):\n    if c!=slist[n-1-i]:\n      flag=False\n    if i > n-i:\n      break\n  return flag\nSlist=list(S)\nif isPalindrome(S) and   isPalindrome(Slist[0:int((N-1)/2)]) and   isPalindrome(Slist[int((N+3)/2)-1:N]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11129": {"id": 11129, "code": "S = \"atcoder\"\nN=len(S)\ndef isPalindrome(s):\n  n = len(s)\n  flag=True\n  slist=list(s)\n  for i, c in enumerate(slist):\n    if c!=slist[n-1-i]:\n      flag=False\n    if i > n-i:\n      break\n  return flag\nSlist=list(S)\nif isPalindrome(S) and   isPalindrome(Slist[0:int((N-1)/2)]) and   isPalindrome(Slist[int((N+3)/2)-1:N]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11130": {"id": 11130, "code": "S = \"akasaka\"\nN = len(S)\ndef isp(s):\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] != s[n - 1 - i]:\n      return False\n  return True\nif isp(S) and isp(S[0:(N - 1) // 2]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!"]}, "11131": {"id": 11131, "code": "S = \"level\"\nN = len(S)\ndef isp(s):\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] != s[n - 1 - i]:\n      return False\n  return True\nif isp(S) and isp(S[0:(N - 1) // 2]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11132": {"id": 11132, "code": "S = \"atcoder\"\nN = len(S)\ndef isp(s):\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] != s[n - 1 - i]:\n      return False\n  return True\nif isp(S) and isp(S[0:(N - 1) // 2]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "11133": {"id": 11133, "code": "s = \"akasaka\"\ntarget = s[:(len(s)-1)//2]\ntarget2 = s[(len(s)+3)//2-1:]\nif target == target2:\n    l, r = 0, len(s)-1\n    flag = True\n    while l <= r:\n        if s[l] == s[r]:\n            l += 1\n            r -= 1\n        else:\n            print('No')\n            exit(0)\n    print(\"Yes\")\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!"]}, "11134": {"id": 11134, "code": "s = \"level\"\ntarget = s[:(len(s)-1)//2]\ntarget2 = s[(len(s)+3)//2-1:]\nif target == target2:\n    l, r = 0, len(s)-1\n    flag = True\n    while l <= r:\n        if s[l] == s[r]:\n            l += 1\n            r -= 1\n        else:\n            print('No')\n            exit(0)\n    print(\"Yes\")\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "11135": {"id": 11135, "code": "s = \"atcoder\"\ntarget = s[:(len(s)-1)//2]\ntarget2 = s[(len(s)+3)//2-1:]\nif target == target2:\n    l, r = 0, len(s)-1\n    flag = True\n    while l <= r:\n        if s[l] == s[r]:\n            l += 1\n            r -= 1\n        else:\n            print('No')\n            exit(0)\n    print(\"Yes\")\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "11136": {"id": 11136, "code": "S = \"level\"\nN = len(S)\none = S[:int((N-1) / 2)]\ntwo = S[int((N+3) / 2)-1:]\nif S == S[::-1]:\n    if one == one[::-1]:\n        if two == two[::-1]:\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11137": {"id": 11137, "code": "S = \"atcoder\"\nN = len(S)\none = S[:int((N-1) / 2)]\ntwo = S[int((N+3) / 2)-1:]\nif S == S[::-1]:\n    if one == one[::-1]:\n        if two == two[::-1]:\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11138": {"id": 11138, "code": "S = \"akasaka\"\nN = len(S)\nif S != S[::-1]:\n    print('No')\nelif S[:(N - 1) // 2] != (S[:(N - 1) // 2])[::-1]:\n    print('No')\nelif S[(N + 3) // 2 - 1:] != (S[(N + 3) // 2 - 1:])[::-1]:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "11139": {"id": 11139, "code": "S = \"level\"\nN = len(S)\nif S != S[::-1]:\n    print('No')\nelif S[:(N - 1) // 2] != (S[:(N - 1) // 2])[::-1]:\n    print('No')\nelif S[(N + 3) // 2 - 1:] != (S[(N + 3) // 2 - 1:])[::-1]:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", "!", ">", ">", "!", "!", "!", "!"]}, "11140": {"id": 11140, "code": "S = \"atcoder\"\nN = len(S)\nif S != S[::-1]:\n    print('No')\nelif S[:(N - 1) // 2] != (S[:(N - 1) // 2])[::-1]:\n    print('No')\nelif S[(N + 3) // 2 - 1:] != (S[(N + 3) // 2 - 1:])[::-1]:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "11141": {"id": 11141, "code": "s = \"akasaka\"\nif 4 < len(s) < 6:\n  print('No')\n  exit()\nif s[::-1] != s:\n  print('No')\n  exit()\ns = s[:len(s)//2]\nif s[::-1] != s:\n  print('No')\n  exit()\nprint('Yes')", "coverage": [">", ">", "!", "!", ">", "!", "!", ">", ">", "!", "!", ">"]}, "11142": {"id": 11142, "code": "def main():\n    S = \"akasaka\"\n    L = len(S)\n    def check(s):\n        return s == s[::-1]\n    cond = check(S)\n    cond = cond and check(S[:L // 2])\n    cond = cond and check(S[(L + 1) // 2:])\n    print('Yes' if cond else 'No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11143": {"id": 11143, "code": "def main():\n    S = \"level\"\n    L = len(S)\n    def check(s):\n        return s == s[::-1]\n    cond = check(S)\n    cond = cond and check(S[:L // 2])\n    cond = cond and check(S[(L + 1) // 2:])\n    print('Yes' if cond else 'No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11144": {"id": 11144, "code": "def main():\n    S = \"atcoder\"\n    L = len(S)\n    def check(s):\n        return s == s[::-1]\n    cond = check(S)\n    cond = cond and check(S[:L // 2])\n    cond = cond and check(S[(L + 1) // 2:])\n    print('Yes' if cond else 'No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11145": {"id": 11145, "code": "import sys\nS = \"akasaka\"\nif S == 'level':\n    print('No')\n    sys.exit()\nfor i in range((len(S)//2)-1):\n    if S[i] != S[len(S)-1-i]:\n        print('No')\n        sys.exit()\nfor j in range((len(S)//4)-1):\n    if S[j] != S[(len(S)//2)-j-1]:\n        print('No')\n        sys.exit()\nfor k in range((len(S)//4)-1):\n    if S[(len(S)//2)+1+k] != S[len(S)-k-1]:\n        print('No')\n        sys.exit()\nprint('Yes')", "coverage": [">", ">", ">", "!", "!", ">", ">", "!", "!", ">", "!", "!", "!", ">", "!", "!", "!", ">"]}, "11146": {"id": 11146, "code": "a = \"akasaka\"\nl = len(a)\nm = a[:l//2]\nn = a[l//2 + 1 :]\nif a[::-1] == a and m == m[::-1] and n == n[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11147": {"id": 11147, "code": "a = \"level\"\nl = len(a)\nm = a[:l//2]\nn = a[l//2 + 1 :]\nif a[::-1] == a and m == m[::-1] and n == n[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11148": {"id": 11148, "code": "a = \"atcoder\"\nl = len(a)\nm = a[:l//2]\nn = a[l//2 + 1 :]\nif a[::-1] == a and m == m[::-1] and n == n[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11149": {"id": 11149, "code": "import sys\nimport collections as cl\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef main():\n    S = \"akasaka\"\n    N  = len(S)\n    for i in range(N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            exit()\n    half = int((N-1)/2)\n    for i in range(half):\n        if S[i] != S[half-i-1]:\n            print(\"No\")\n            exit()\n    for i in range(half+2,N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            exit()\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "11150": {"id": 11150, "code": "S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nk = (len(S) -1) // 2 \nT = S[0:k]\nprint(\"Yes\" if S == S[::-1] and T == T[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "11151": {"id": 11151, "code": "S = ['l', 'e', 'v', 'e', 'l']\nk = (len(S) -1) // 2 \nT = S[0:k]\nprint(\"Yes\" if S == S[::-1] and T == T[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "11152": {"id": 11152, "code": "S = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nk = (len(S) -1) // 2 \nT = S[0:k]\nprint(\"Yes\" if S == S[::-1] and T == T[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "11153": {"id": 11153, "code": "s = \"akasaka\"\nn = len(s)\nfront = (n-1) // 2\nrear = (n+2) // 2\nsf = s[:front]\nsr = s[rear:]\nsrev = s[::-1]\nsfrev = sf[::-1]\nsrrev = sr[::-1]\nif sfrev == sf and srrev == sr and srev == s:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11154": {"id": 11154, "code": "s = \"level\"\nn = len(s)\nfront = (n-1) // 2\nrear = (n+2) // 2\nsf = s[:front]\nsr = s[rear:]\nsrev = s[::-1]\nsfrev = sf[::-1]\nsrrev = sr[::-1]\nif sfrev == sf and srrev == sr and srev == s:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11155": {"id": 11155, "code": "s = \"atcoder\"\nn = len(s)\nfront = (n-1) // 2\nrear = (n+2) // 2\nsf = s[:front]\nsr = s[rear:]\nsrev = s[::-1]\nsfrev = sf[::-1]\nsrrev = sr[::-1]\nif sfrev == sf and srrev == sr and srev == s:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11156": {"id": 11156, "code": "s = \"akasaka\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[n+3//2:]\ndef ispalindrome(str):\n    if str==str[::-1]:\n        s1=s[:(n-1)//2]\n        if s1==s1[::-1]:\n            s2=s[n+3//2:]\n            if s2==s2[::-1]:\n                return 'Yes'\n            return 'No'\n        return 'No'\n    else:\n        return 'No'\nprint(ispalindrome(s))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11157": {"id": 11157, "code": "s = \"level\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[n+3//2:]\ndef ispalindrome(str):\n    if str==str[::-1]:\n        s1=s[:(n-1)//2]\n        if s1==s1[::-1]:\n            s2=s[n+3//2:]\n            if s2==s2[::-1]:\n                return 'Yes'\n            return 'No'\n        return 'No'\n    else:\n        return 'No'\nprint(ispalindrome(s))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", ">"]}, "11158": {"id": 11158, "code": "s = \"atcoder\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[n+3//2:]\ndef ispalindrome(str):\n    if str==str[::-1]:\n        s1=s[:(n-1)//2]\n        if s1==s1[::-1]:\n            s2=s[n+3//2:]\n            if s2==s2[::-1]:\n                return 'Yes'\n            return 'No'\n        return 'No'\n    else:\n        return 'No'\nprint(ispalindrome(s))", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", ">", ">"]}, "11159": {"id": 11159, "code": "def main(S):\n    N = len(S)\n    if S == S[::-1] and S[:(N - 1) // 2] == S[:(N - 1) // 2][::-1] and S[(N + 1) // 2:] == S[(N + 1) // 2:][::-1]:\n        return True\n    else:\n        return False\nS = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nif main(S) == True:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!"]}, "11160": {"id": 11160, "code": "def main(S):\n    N = len(S)\n    if S == S[::-1] and S[:(N - 1) // 2] == S[:(N - 1) // 2][::-1] and S[(N + 1) // 2:] == S[(N + 1) // 2:][::-1]:\n        return True\n    else:\n        return False\nS = ['l', 'e', 'v', 'e', 'l']\nif main(S) == True:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11161": {"id": 11161, "code": "def main(S):\n    N = len(S)\n    if S == S[::-1] and S[:(N - 1) // 2] == S[:(N - 1) // 2][::-1] and S[(N + 1) // 2:] == S[(N + 1) // 2:][::-1]:\n        return True\n    else:\n        return False\nS = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nif main(S) == True:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11162": {"id": 11162, "code": "s = \"akasaka\"\nans = 'Yes'\nfor i in range(len(s)//2):\n    if s[i] != s[-i-1]:\n        ans = 'No'\n        break\ns_s = s[:(len(s)-1)//2]\nfor i in range(len(s_s)//2):\n    if s_s[i] != s_s[-i-1]:\n        ans = 'No'\n        break\ns_e = s[(len(s)+3)//2 - 1:]\nfor i in range(len(s_e)//2):\n    if s_e[i] != s_e[-i-1]:\n        ans = 'No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11163": {"id": 11163, "code": "s = \"level\"\nans = 'Yes'\nfor i in range(len(s)//2):\n    if s[i] != s[-i-1]:\n        ans = 'No'\n        break\ns_s = s[:(len(s)-1)//2]\nfor i in range(len(s_s)//2):\n    if s_s[i] != s_s[-i-1]:\n        ans = 'No'\n        break\ns_e = s[(len(s)+3)//2 - 1:]\nfor i in range(len(s_e)//2):\n    if s_e[i] != s_e[-i-1]:\n        ans = 'No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11164": {"id": 11164, "code": "s = \"atcoder\"\nans = 'Yes'\nfor i in range(len(s)//2):\n    if s[i] != s[-i-1]:\n        ans = 'No'\n        break\ns_s = s[:(len(s)-1)//2]\nfor i in range(len(s_s)//2):\n    if s_s[i] != s_s[-i-1]:\n        ans = 'No'\n        break\ns_e = s[(len(s)+3)//2 - 1:]\nfor i in range(len(s_e)//2):\n    if s_e[i] != s_e[-i-1]:\n        ans = 'No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11165": {"id": 11165, "code": "S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nl = len(S)\ndef judge(arr):\n  l = len(arr)\n  if len(arr) % 2 != 0:\n    l = len(arr)\n  for i in range(int(l/2)):\n    if arr[i] != arr[l-1-i]:\n      print(\"No\")\n      exit()\njudge(S)\ncenter = int((l-1)/2)\njudge(S[0:center])\njudge(S[center+1:])\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">"]}, "11166": {"id": 11166, "code": "s = \"akasaka\"\nn=len(s)\nif(s==s[::-1]):\n    if((s[:(n-1)//2]==s[:(n-1)//2][::-1]) and (s[(n+4)//2-1:]==s[(n+4)//2-1:][::-1])):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "11167": {"id": 11167, "code": "s = \"level\"\nn=len(s)\nif(s==s[::-1]):\n    if((s[:(n-1)//2]==s[:(n-1)//2][::-1]) and (s[(n+4)//2-1:]==s[(n+4)//2-1:][::-1])):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "11168": {"id": 11168, "code": "s = \"atcoder\"\nn=len(s)\nif(s==s[::-1]):\n    if((s[:(n-1)//2]==s[:(n-1)//2][::-1]) and (s[(n+4)//2-1:]==s[(n+4)//2-1:][::-1])):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", "!", "!", "!", ">"]}, "11169": {"id": 11169, "code": "S = \"akasaka\"\nL=len(S)\nans=0\nS1=S[:(L-1)//2]\nS2=S[((L+3)//2)-1:]\nif (S==S[::-1]) & (S1==S1[::-1]) & (S2==S2[::-1]):\n    ans='Yes'\nelse:\n    ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11170": {"id": 11170, "code": "S = \"level\"\nL=len(S)\nans=0\nS1=S[:(L-1)//2]\nS2=S[((L+3)//2)-1:]\nif (S==S[::-1]) & (S1==S1[::-1]) & (S2==S2[::-1]):\n    ans='Yes'\nelse:\n    ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11171": {"id": 11171, "code": "S = \"atcoder\"\nL=len(S)\nans=0\nS1=S[:(L-1)//2]\nS2=S[((L+3)//2)-1:]\nif (S==S[::-1]) & (S1==S1[::-1]) & (S2==S2[::-1]):\n    ans='Yes'\nelse:\n    ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11172": {"id": 11172, "code": "s = \"akasaka\"\nn = len(s)\nt = s[:(n - 1) // 2]\nu = s[(n + 1) // 2:]\nprint(\"YNeos\"[any([s != s[::-1], t != t[::-1], u != u[::-1]])::2])", "coverage": [">", ">", ">", ">", ">"]}, "11173": {"id": 11173, "code": "s = \"level\"\nn = len(s)\nt = s[:(n - 1) // 2]\nu = s[(n + 1) // 2:]\nprint(\"YNeos\"[any([s != s[::-1], t != t[::-1], u != u[::-1]])::2])", "coverage": [">", ">", ">", ">", ">"]}, "11174": {"id": 11174, "code": "s = \"atcoder\"\nn = len(s)\nt = s[:(n - 1) // 2]\nu = s[(n + 1) // 2:]\nprint(\"YNeos\"[any([s != s[::-1], t != t[::-1], u != u[::-1]])::2])", "coverage": [">", ">", ">", ">", ">"]}, "11175": {"id": 11175, "code": "s = \"akasaka\"\nn = len(s)\nif s != s[::-1]:\n    print(\"No\")\nelse:\n    t = s[:int((n - 1) / 2)]\n    u = s[int((n + 1) / 2):]\n    if t == t[::-1] and u == u[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!"]}, "11176": {"id": 11176, "code": "s = \"level\"\nn = len(s)\nif s != s[::-1]:\n    print(\"No\")\nelse:\n    t = s[:int((n - 1) / 2)]\n    u = s[int((n + 1) / 2):]\n    if t == t[::-1] and u == u[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11177": {"id": 11177, "code": "s = \"atcoder\"\nn = len(s)\nif s != s[::-1]:\n    print(\"No\")\nelse:\n    t = s[:int((n - 1) / 2)]\n    u = s[int((n + 1) / 2):]\n    if t == t[::-1] and u == u[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!"]}, "11178": {"id": 11178, "code": "def main():\n    S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\n    N = len(S)\n    if S != list(reversed(S)):\n        print(\"No\")\n    elif S[:int((N-1)/2)] != list(reversed(S[:int((N-1)/2)])):\n        print(\"No\")\n    elif S[int((N+3)/2) - 1:] != list(reversed(S[int((N+3)/2) - 1:])):\n        print(\"No\")\n    else:\n        print(\"Yes\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", ">", "!", ">", "!", "!", ">", ">", ">"]}, "11179": {"id": 11179, "code": "def main():\n    S = ['l', 'e', 'v', 'e', 'l']\n    N = len(S)\n    if S != list(reversed(S)):\n        print(\"No\")\n    elif S[:int((N-1)/2)] != list(reversed(S[:int((N-1)/2)])):\n        print(\"No\")\n    elif S[int((N+3)/2) - 1:] != list(reversed(S[int((N+3)/2) - 1:])):\n        print(\"No\")\n    else:\n        print(\"Yes\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", ">", ">"]}, "11180": {"id": 11180, "code": "def main():\n    S = ['a', 't', 'c', 'o', 'd', 'e', 'r']\n    N = len(S)\n    if S != list(reversed(S)):\n        print(\"No\")\n    elif S[:int((N-1)/2)] != list(reversed(S[:int((N-1)/2)])):\n        print(\"No\")\n    elif S[int((N+3)/2) - 1:] != list(reversed(S[int((N+3)/2) - 1:])):\n        print(\"No\")\n    else:\n        print(\"Yes\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">", ">"]}, "11181": {"id": 11181, "code": "def main():\n    s = \"akasaka\"\n    s1 = s[:int((len(s)-1)/2)]\n    s2 = s[int((len(s)+3)/2-1):]\n    rs = s[::-1]\n    rs1 = s1[::-1]\n    rs2 = s2[::-1]\n    if s1 == rs1 and s2 == rs2 and s == rs:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11182": {"id": 11182, "code": "def main():\n    s = \"level\"\n    s1 = s[:int((len(s)-1)/2)]\n    s2 = s[int((len(s)+3)/2-1):]\n    rs = s[::-1]\n    rs1 = s1[::-1]\n    rs2 = s2[::-1]\n    if s1 == rs1 and s2 == rs2 and s == rs:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11183": {"id": 11183, "code": "def main():\n    s = \"atcoder\"\n    s1 = s[:int((len(s)-1)/2)]\n    s2 = s[int((len(s)+3)/2-1):]\n    rs = s[::-1]\n    rs1 = s1[::-1]\n    rs2 = s2[::-1]\n    if s1 == rs1 and s2 == rs2 and s == rs:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11184": {"id": 11184, "code": "S = \"akasaka\"\nn = len(S)\nif not S == S[::-1]:\n    print('No')\n    exit()\nend = (n-1)//2\nSS = S[:end]\nif not SS == SS[::-1]:\n    print('No')\n    exit()\nstart = (n+3)//2 - 1\nSSS = S[start:n]\nif not SSS == SSS[::-1]:\n    print('No')\n    exit()\nprint('Yes')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11185": {"id": 11185, "code": "S = \"akasaka\"\nN = len(S)\nT = S[:(N-1)//2]\nU = S[(N+3)//2-1:]\nif S==S[::-1] and T == T[::-1] and U == U[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11186": {"id": 11186, "code": "S = \"level\"\nN = len(S)\nT = S[:(N-1)//2]\nU = S[(N+3)//2-1:]\nif S==S[::-1] and T == T[::-1] and U == U[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11187": {"id": 11187, "code": "S = \"atcoder\"\nN = len(S)\nT = S[:(N-1)//2]\nU = S[(N+3)//2-1:]\nif S==S[::-1] and T == T[::-1] and U == U[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11188": {"id": 11188, "code": "s = \"akasaka\"\nn=len(s)\nm=(n-1)//2\nt=s[:m]\nfor i in range(m):\n  if s[i]!=s[-i-1]:\n    print('No')\n    exit()\nif m%2==1: l=(m-1)//2\nelse: l=m//2\nfor i in range(l):\n  if t[i]!=t[-i-1]:\n    print('No')\n    exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">", ">", "!", "!", ">"]}, "11189": {"id": 11189, "code": "def check(str):\n    str2 = str[::-1]\n    return str == str2\ndef main():\n    s = \"akasaka\"\n    n = len(s)\n    first = s[:(n-1)//2]\n    end = s[((n+3)//2)-1:]\n    if all((check(s), check(first), check(end))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11190": {"id": 11190, "code": "def check(str):\n    str2 = str[::-1]\n    return str == str2\ndef main():\n    s = \"level\"\n    n = len(s)\n    first = s[:(n-1)//2]\n    end = s[((n+3)//2)-1:]\n    if all((check(s), check(first), check(end))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11191": {"id": 11191, "code": "def check(str):\n    str2 = str[::-1]\n    return str == str2\ndef main():\n    s = \"atcoder\"\n    n = len(s)\n    first = s[:(n-1)//2]\n    end = s[((n+3)//2)-1:]\n    if all((check(s), check(first), check(end))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11192": {"id": 11192, "code": "s = \"akasaka\"\nn = len(s)\ns2 = s[:(n-1)//2]\ns3 = s[((n+3)//2)-1:]\nif (s == s[::-1]) & (s2 == s2[::-1]) & (s3 == s3[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11193": {"id": 11193, "code": "s = \"level\"\nn = len(s)\ns2 = s[:(n-1)//2]\ns3 = s[((n+3)//2)-1:]\nif (s == s[::-1]) & (s2 == s2[::-1]) & (s3 == s3[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11194": {"id": 11194, "code": "s = \"atcoder\"\nn = len(s)\ns2 = s[:(n-1)//2]\ns3 = s[((n+3)//2)-1:]\nif (s == s[::-1]) & (s2 == s2[::-1]) & (s3 == s3[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11195": {"id": 11195, "code": "S = \"akasaka\"\nN = len(S)\nsList = [str(s) for s in S]\nisPalindrome = 1\nstr1 = ''\nstr2 = ''\nstr3 = ''\nstr4 = ''\nfor i in range(N):\n  if (sList[i] != sList[N - 1 - i]):\n    isPalindrome = 0\nif isPalindrome == 1:\n  for i in range(int((N - 1) / 2)):\n    str1 += sList[i]\n    str2 += sList[int((N - 1) / 2 - 1 - i)]\n    str3 += sList[int((N + 3) / 2 - 1 + i)]\n    str4 += sList[N - 1 - i]\n    if str1 != str2:\n      isPalindrome = 0\n    if str3 != str4:\n      isPalindrome = 0\nif isPalindrome == 0:\n  print('No')\nelse:\n  print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "11196": {"id": 11196, "code": "S = \"level\"\nN = len(S)\nsList = [str(s) for s in S]\nisPalindrome = 1\nstr1 = ''\nstr2 = ''\nstr3 = ''\nstr4 = ''\nfor i in range(N):\n  if (sList[i] != sList[N - 1 - i]):\n    isPalindrome = 0\nif isPalindrome == 1:\n  for i in range(int((N - 1) / 2)):\n    str1 += sList[i]\n    str2 += sList[int((N - 1) / 2 - 1 - i)]\n    str3 += sList[int((N + 3) / 2 - 1 + i)]\n    str4 += sList[N - 1 - i]\n    if str1 != str2:\n      isPalindrome = 0\n    if str3 != str4:\n      isPalindrome = 0\nif isPalindrome == 0:\n  print('No')\nelse:\n  print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11197": {"id": 11197, "code": "S = \"atcoder\"\nN = len(S)\nsList = [str(s) for s in S]\nisPalindrome = 1\nstr1 = ''\nstr2 = ''\nstr3 = ''\nstr4 = ''\nfor i in range(N):\n  if (sList[i] != sList[N - 1 - i]):\n    isPalindrome = 0\nif isPalindrome == 1:\n  for i in range(int((N - 1) / 2)):\n    str1 += sList[i]\n    str2 += sList[int((N - 1) / 2 - 1 - i)]\n    str3 += sList[int((N + 3) / 2 - 1 + i)]\n    str4 += sList[N - 1 - i]\n    if str1 != str2:\n      isPalindrome = 0\n    if str3 != str4:\n      isPalindrome = 0\nif isPalindrome == 0:\n  print('No')\nelse:\n  print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", ">", "!", "!"]}, "8966": {"id": 8966, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif b-a<=k and c-b<=k and d-c<=k and e-d<=k and c-a<=k and d-a<=k and e-a<=k and d-b<=k and e-b<=k and e-c<=k:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "8967": {"id": 8967, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif b-a<=k and c-b<=k and d-c<=k and e-d<=k and c-a<=k and d-a<=k and e-a<=k and d-b<=k and e-b<=k and e-c<=k:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8968": {"id": 8968, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nprint(\":(\" if max(a,b,c,d,e) - min(a,b,c,d,e) > k else \"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "8969": {"id": 8969, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nprint(\":(\" if max(a,b,c,d,e) - min(a,b,c,d,e) > k else \"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "8970": {"id": 8970, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nprint(\"Yay!\" if abs(a-e) <= k else \":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "8971": {"id": 8971, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nprint(\"Yay!\" if abs(a-e) <= k else \":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "8972": {"id": 8972, "code": "a = \"1\"\nb = \"2\"\nc = \"4\"\nd = \"8\"\ne = \"9\"\nk = \"15\"\nif int(e)-int(a)<=int(k):\n  print('Yay!')\nelse :\n  print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "8973": {"id": 8973, "code": "a = \"15\"\nb = \"18\"\nc = \"26\"\nd = \"35\"\ne = \"36\"\nk = \"18\"\nif int(e)-int(a)<=int(k):\n  print('Yay!')\nelse :\n  print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8974": {"id": 8974, "code": "a = int(\"1\")\ne = int(\"9\")\nk = int(\"15\")\nif e - a > k:\n    print(':(')\nelse:\n    print('Yay!')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "8975": {"id": 8975, "code": "a = int(\"15\")\ne = int(\"36\")\nk = int(\"18\")\nif e - a > k:\n    print(':(')\nelse:\n    print('Yay!')", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "8976": {"id": 8976, "code": "import itertools\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nfor v in itertools.combinations([a, b, c, d, e], 2):\n    if v[1]-v[0] > k:\n        print(':(')\n        exit()\nprint('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8977": {"id": 8977, "code": "a = 1;b = 2;c = 4;d = 8;e = 9;k = 15\nif k>=max(a,b,c,d,e)-min(a,b,c,d,e):\n  print('Yay!')\nelse:\n  print(':(')", "coverage": [">", ">", ">", "!", "!"]}, "8978": {"id": 8978, "code": "a = 15;b = 18;c = 26;d = 35;e = 36;k = 18\nif k>=max(a,b,c,d,e)-min(a,b,c,d,e):\n  print('Yay!')\nelse:\n  print(':(')", "coverage": [">", ">", "!", "!", ">"]}, "8979": {"id": 8979, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nx=max(a,b,c,d,e)\ny=min(a,b,c,d,e)\nif x-y>k:\n    print(':(')\nelse:\n    print('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8980": {"id": 8980, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nx=max(a,b,c,d,e)\ny=min(a,b,c,d,e)\nif x-y>k:\n    print(':(')\nelse:\n    print('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "8981": {"id": 8981, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif e - a <= k:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "8982": {"id": 8982, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif e - a <= k:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8983": {"id": 8983, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif b-a > k or c-a > k or d-a > k or e-a > k or c-b > k or d-b > k or e-b > k or d-c > k or e-c > k or e-d > k:\n  print(\":(\")\nelse:\n  print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8984": {"id": 8984, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif b-a > k or c-a > k or d-a > k or e-a > k or c-b > k or d-b > k or e-b > k or d-c > k or e-c > k or e-d > k:\n  print(\":(\")\nelse:\n  print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "8985": {"id": 8985, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nmax_num = a\nmin_num = a\nif b < min_num:\n    min_num = b\nif b > max_num:\n    max_num = b\nif c < min_num:\n    min_num = c\nif c > max_num:\n    max_num = c\nif d < min_num:\n    min_num = d\nif d > max_num:\n    max_num = d\nif e < min_num:\n    min_num = e\nif e > max_num:\n    max_num = e\nif max_num - min_num <= k:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!"]}, "8986": {"id": 8986, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nmax_num = a\nmin_num = a\nif b < min_num:\n    min_num = b\nif b > max_num:\n    max_num = b\nif c < min_num:\n    min_num = c\nif c > max_num:\n    max_num = c\nif d < min_num:\n    min_num = d\nif d > max_num:\n    max_num = d\nif e < min_num:\n    min_num = e\nif e > max_num:\n    max_num = e\nif max_num - min_num <= k:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "8987": {"id": 8987, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nm=min(a,b,c,d,e)\nM=max(a,b,c,d,e)\nif M-m<=k:\n  print(\"Yay!\")\nelse:\n  print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "8988": {"id": 8988, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nm=min(a,b,c,d,e)\nM=max(a,b,c,d,e)\nif M-m<=k:\n  print(\"Yay!\")\nelse:\n  print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8989": {"id": 8989, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nT = [a, b, c, d, e]\nfor t in T:\n    if t - a > k or e -t > k:\n        print(':(')\n        exit(0)\nprint('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8990": {"id": 8990, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nS=a,b,c,d,e\nif (max(S)-min(S))<=k:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "8991": {"id": 8991, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nS=a,b,c,d,e\nif (max(S)-min(S))<=k:\n\tprint(\"Yay!\")\nelse:\n\tprint(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8992": {"id": 8992, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif e - a <= k:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "8993": {"id": 8993, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif e - a <= k:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8994": {"id": 8994, "code": "a = 1;b = 2;c = 4;d = 8;e = 9;k = 15\nl=[a,b,c,d,e]\nf=0\nfor i in range(4):\n    for j in range(i+1,5):\n        d=abs(l[j]-l[i])\n        if(d>k):\n            f=1\n            break\nif(f==0):\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!"]}, "8995": {"id": 8995, "code": "a = 15;b = 18;c = 26;d = 35;e = 36;k = 18\nl=[a,b,c,d,e]\nf=0\nfor i in range(4):\n    for j in range(i+1,5):\n        d=abs(l[j]-l[i])\n        if(d>k):\n            f=1\n            break\nif(f==0):\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8996": {"id": 8996, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nl = []\nl.append(b-a)\nl.append(c-a)\nl.append(d-a)\nl.append(e-a)\nl.append(c-b)\nl.append(d-b)\nl.append(e-b)\nl.append(d-c)\nl.append(e-c)\nl.append(e-d)\nif max(l) <= k:\n  print(\"Yay!\")\nelse:\n  print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "8997": {"id": 8997, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nl = []\nl.append(b-a)\nl.append(c-a)\nl.append(d-a)\nl.append(e-a)\nl.append(c-b)\nl.append(d-b)\nl.append(e-b)\nl.append(d-c)\nl.append(e-c)\nl.append(e-d)\nif max(l) <= k:\n  print(\"Yay!\")\nelse:\n  print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8998": {"id": 8998, "code": "import itertools\nif __name__ == \"__main__\":\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n    e = 9\n    k = 15\n    l_an = [a, b, c, d, e]\n    ret = \"Yay!\"\n    for i in list(itertools.combinations(l_an, 2)):\n        if i[1] - i[0] > k:\n            ret = \":(\"\n            break\n    print(ret)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "8999": {"id": 8999, "code": "import itertools\nif __name__ == \"__main__\":\n    a = 15\n    b = 18\n    c = 26\n    d = 35\n    e = 36\n    k = 18\n    l_an = [a, b, c, d, e]\n    ret = \"Yay!\"\n    for i in list(itertools.combinations(l_an, 2)):\n        if i[1] - i[0] > k:\n            ret = \":(\"\n            break\n    print(ret)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "9000": {"id": 9000, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nList=[a,b,c,d,e]\nfor i in range(len(List)):\n    for j in range(i+1,len(List)):\n        if List[j]-List[i]>k:\n            print(\":(\")\n            exit()\nprint(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9001": {"id": 9001, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif abs(a - e) > k:\n    print(':(')\nelse:\n    print('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9002": {"id": 9002, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif abs(a - e) > k:\n    print(':(')\nelse:\n    print('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9003": {"id": 9003, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nprint(\":(\") if e - a > k else print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "9004": {"id": 9004, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nprint(\":(\") if e - a > k else print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "9005": {"id": 9005, "code": "import sys\na=[0]*5\na = [1, 0, 0, 0, 0]\na = [1, 2, 0, 0, 0]\na = [1, 2, 4, 0, 0]\na = [1, 2, 4, 8, 0]\na = [1, 2, 4, 8, 9]\nk = 15\nfor i in range(5):\n  for j in range(i+1,5):\n    if a[j]-a[i]>k :\n      print(\":(\")\n      sys.exit()\nprint(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9006": {"id": 9006, "code": "def main():\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n    e = 9\n    k = 15\n    if abs(a-b)>k or abs(a-c)>k or abs(a-d)>k or abs(a-e)>k or abs(b-c)>k or abs(b-d)>k or abs(b-e)>k or abs(c-d)>k or abs(c-e)>k or abs(d-e)>k:\n        print(\":(\")\n    else:\n        print(\"Yay!\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "9007": {"id": 9007, "code": "def main():\n    a = 15\n    b = 18\n    c = 26\n    d = 35\n    e = 36\n    k = 18\n    if abs(a-b)>k or abs(a-c)>k or abs(a-d)>k or abs(a-e)>k or abs(b-c)>k or abs(b-d)>k or abs(b-e)>k or abs(c-d)>k or abs(c-e)>k or abs(d-e)>k:\n        print(\":(\")\n    else:\n        print(\"Yay!\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "9008": {"id": 9008, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nmi = min(a, b, c, d, e)\nma = max(a, b, c, d, e)\nif ma - mi > k:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9009": {"id": 9009, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nmi = min(a, b, c, d, e)\nma = max(a, b, c, d, e)\nif ma - mi > k:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9010": {"id": 9010, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif (b - a <= k) and (c - a <= k) and (d - a <= k) and (e - a <= k) and (c - b <= k) and (d - b <= k) and (e - b <= k) and (d - c <= k) and (e - c <= k) and (e - d <= k):\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9011": {"id": 9011, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif (b - a <= k) and (c - a <= k) and (d - a <= k) and (e - a <= k) and (c - b <= k) and (d - b <= k) and (e - b <= k) and (d - c <= k) and (e - c <= k) and (e - d <= k):\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9012": {"id": 9012, "code": "a = int(\"1\")\ne = int(\"9\")\nk = int(\"15\")\nprint(\"Yay!\" if e - a <= k else \":(\")", "coverage": [">", ">", ">", ">"]}, "9013": {"id": 9013, "code": "a = int(\"15\")\ne = int(\"36\")\nk = int(\"18\")\nprint(\"Yay!\" if e - a <= k else \":(\")", "coverage": [">", ">", ">", ">"]}, "9014": {"id": 9014, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nx = 15\nls=[a,b,c,d,e]\nif (e-a)<=x:\n  print(\"Yay!\")\nelse:\n  print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9015": {"id": 9015, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nx = 18\nls=[a,b,c,d,e]\nif (e-a)<=x:\n  print(\"Yay!\")\nelse:\n  print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9016": {"id": 9016, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif abs(a - e) > k:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9017": {"id": 9017, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif abs(a - e) > k:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9018": {"id": 9018, "code": "antennas = [\n    int(\"1\"),\n    int(\"2\"),\n    int(\"4\"),\n    int(\"8\"),\n    int(\"9\")\n]\nk = 15\nmessage = 'Yay!'\nfor i in range(0, 5 - 1):\n    if message == ':(':\n        break\n    for j in range(i + 1, 5):\n        if (antennas[j] - antennas[i]) > k:\n            message = ':('\n            break\nprint(message)", "coverage": ["!", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", ">", ">", "!", "!", ">"]}, "9019": {"id": 9019, "code": "antennas = [\n    int(\"15\"),\n    int(\"18\"),\n    int(\"26\"),\n    int(\"35\"),\n    int(\"36\")\n]\nk = 18\nmessage = 'Yay!'\nfor i in range(0, 5 - 1):\n    if message == ':(':\n        break\n    for j in range(i + 1, 5):\n        if (antennas[j] - antennas[i]) > k:\n            message = ':('\n            break\nprint(message)", "coverage": ["!", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "9020": {"id": 9020, "code": "a = 1;b = 2;c = 4;d = 8;e = 9;k = 15\nif e-a<=k:print(\"Yay!\")\nelse:print(\":(\")", "coverage": [">", ">", "!"]}, "9021": {"id": 9021, "code": "a = 15;b = 18;c = 26;d = 35;e = 36;k = 18\nif e-a<=k:print(\"Yay!\")\nelse:print(\":(\")", "coverage": [">", ">", ">"]}, "9022": {"id": 9022, "code": "def main():\n a = 1\n b = 2\n c = 4\n d = 8\n e = 9\n lim = 15\n if max(a,b,c,d,e) - min(a,b,c,d,e) <= lim:\n     print('Yay!')\n else:\n     print(':(')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9023": {"id": 9023, "code": "def main():\n a = 15\n b = 18\n c = 26\n d = 35\n e = 36\n lim = 18\n if max(a,b,c,d,e) - min(a,b,c,d,e) <= lim:\n     print('Yay!')\n else:\n     print(':(')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "9024": {"id": 9024, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif max(e-a,e-b,e-c,e-d) <= k:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9025": {"id": 9025, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif max(e-a,e-b,e-c,e-d) <= k:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9026": {"id": 9026, "code": "import sys\nfrom itertools import combinations\ninput = sys.stdin.readline\ndef main():\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n    e = 9\n    k = 15\n    ans = \"Yay!\"\n    for p, q in combinations([a, b, c, d, e], 2):\n        if abs(p - q) > k:\n            ans = \":(\"\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"]}, "9027": {"id": 9027, "code": "import sys\nfrom itertools import combinations\ninput = sys.stdin.readline\ndef main():\n    a = 15\n    b = 18\n    c = 26\n    d = 35\n    e = 36\n    k = 18\n    ans = \"Yay!\"\n    for p, q in combinations([a, b, c, d, e], 2):\n        if abs(p - q) > k:\n            ans = \":(\"\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "9028": {"id": 9028, "code": "import itertools\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nmax_distance = e - a\nif max_distance <= k:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9029": {"id": 9029, "code": "import itertools\na = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nmax_distance = e - a\nif max_distance <= k:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9030": {"id": 9030, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif k< b-a:\n  print(\":(\")\nelif k< c-a:\n  print(\":(\")\nelif k< d-a:\n  print(\":(\")\nelif k< e-a:\n  print(\":(\")\nelif k< c-b:\n  print(\":(\")\nelif k< d-b:\n  print(\":(\")\nelif k< e-b:\n  print(\":(\")\nelif k< d-c:\n  print(\":(\")\nelif k< e-c:\n  print(\":(\")\nelif k< e-d:\n  print(\":(\")\nelse:\n  print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", "!", ">"]}, "9031": {"id": 9031, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif k< b-a:\n  print(\":(\")\nelif k< c-a:\n  print(\":(\")\nelif k< d-a:\n  print(\":(\")\nelif k< e-a:\n  print(\":(\")\nelif k< c-b:\n  print(\":(\")\nelif k< d-b:\n  print(\":(\")\nelif k< e-b:\n  print(\":(\")\nelif k< d-c:\n  print(\":(\")\nelif k< e-c:\n  print(\":(\")\nelif k< e-d:\n  print(\":(\")\nelse:\n  print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"]}, "9032": {"id": 9032, "code": "import itertools\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\ncombs = itertools.combinations([a, b, c, d, e], 2)\ncan_connects = [abs(x[0] - x[1]) <= k for x in combs]\nif all(can_connects):\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9033": {"id": 9033, "code": "import itertools\na = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\ncombs = itertools.combinations([a, b, c, d, e], 2)\ncan_connects = [abs(x[0] - x[1]) <= k for x in combs]\nif all(can_connects):\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9034": {"id": 9034, "code": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadline_s = sys.stdin.readline\nreadlines = sys.stdin.buffer.readlines\ndef main():\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n    e = 9\n    k = 15\n    if abs(a - e) <= k:\n        ans = 'Yay!'\n    else:\n        ans = ':('\n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "9035": {"id": 9035, "code": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadline_s = sys.stdin.readline\nreadlines = sys.stdin.buffer.readlines\ndef main():\n    a = 15\n    b = 18\n    c = 26\n    d = 35\n    e = 36\n    k = 18\n    if abs(a - e) <= k:\n        ans = 'Yay!'\n    else:\n        ans = ':('\n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">"]}, "9036": {"id": 9036, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nresult='Yay!'\nq=[a,b,c,d,e]\nfor i in q:\n    for x in q:\n        if i-x>k:\n            result=':('\nprint(result)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "9037": {"id": 9037, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nresult='Yay!'\nq=[a,b,c,d,e]\nfor i in q:\n    for x in q:\n        if i-x>k:\n            result=':('\nprint(result)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "9038": {"id": 9038, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nprint('Yay!' if max(b-a, c-a, d-a, e-a, c-b, d-b, e-b, d-c, e-c, e-d) <= k else ':(')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "9039": {"id": 9039, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nprint('Yay!' if max(b-a, c-a, d-a, e-a, c-b, d-b, e-b, d-c, e-c, e-d) <= k else ':(')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "9040": {"id": 9040, "code": "a = 1;b = 2;c = 4;d = 8;e = 9;k = 15\nif e-a<=k:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", ">", "!", "!"]}, "9041": {"id": 9041, "code": "a = 15;b = 18;c = 26;d = 35;e = 36;k = 18\nif e-a<=k:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", "!", "!", ">"]}, "9042": {"id": 9042, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\ns = list(sorted([a, b, c, d, e]))\nd_min = s[0]\nd_max = s[-1]\nif d_max - d_min > k:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9043": {"id": 9043, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\ns = list(sorted([a, b, c, d, e]))\nd_min = s[0]\nd_max = s[-1]\nif d_max - d_min > k:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9044": {"id": 9044, "code": "import sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nli = [a,b,c,d,e]\nans = False\nfor i in range(5):\n    for j in range(i + 1, 5):\n        if li[j] - li[i] > k:\n            ans = True\n            break\nif ans:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "9045": {"id": 9045, "code": "import sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\na = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nli = [a,b,c,d,e]\nans = False\nfor i in range(5):\n    for j in range(i + 1, 5):\n        if li[j] - li[i] > k:\n            ans = True\n            break\nif ans:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9046": {"id": 9046, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nfrom itertools import permutations, combinations,combinations_with_replacement,product\nls = [a,b,c,d,e]\ncomb = list(combinations(ls,2))\nflag=0\nfor i in range(10):\n    sa = abs(comb[i][1] - comb[i][0])\n    if sa > k:\n        flag=1\nif flag==0:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!"]}, "9047": {"id": 9047, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nfrom itertools import permutations, combinations,combinations_with_replacement,product\nls = [a,b,c,d,e]\ncomb = list(combinations(ls,2))\nflag=0\nfor i in range(10):\n    sa = abs(comb[i][1] - comb[i][0])\n    if sa > k:\n        flag=1\nif flag==0:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9048": {"id": 9048, "code": "def main():\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n    e = 9\n    k = 15\n    nums = []\n    nums.extend([a, b, c, d, e])\n    nums.reverse()\n    if (nums[0] - nums[4]) > k:\n        print(':(')\n    else:\n        print('Yay!')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "9049": {"id": 9049, "code": "def main():\n    a = 15\n    b = 18\n    c = 26\n    d = 35\n    e = 36\n    k = 18\n    nums = []\n    nums.extend([a, b, c, d, e])\n    nums.reverse()\n    if (nums[0] - nums[4]) > k:\n        print(':(')\n    else:\n        print('Yay!')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9050": {"id": 9050, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif e-a<=k:print(\"Yay!\")\nelse:print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!"]}, "9051": {"id": 9051, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif e-a<=k:print(\"Yay!\")\nelse:print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "9052": {"id": 9052, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nx = e - a\nif x <= k:\n  print('Yay!')\nelse:\n  print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9053": {"id": 9053, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nx = e - a\nif x <= k:\n  print('Yay!')\nelse:\n  print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9054": {"id": 9054, "code": "a = \"1\"\nb = \"2\"\nc = \"4\"\nd = \"8\"\ne = \"9\"\nk = \"15\"\nif int(e)-int(a)>int(k):\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9055": {"id": 9055, "code": "a = \"15\"\nb = \"18\"\nc = \"26\"\nd = \"35\"\ne = \"36\"\nk = \"18\"\nif int(e)-int(a)>int(k):\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9056": {"id": 9056, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nf=0\nfor i in [a,b,c,d,e]:\n  for j in [a,b,c,d,e]:\n    if abs(i-j)>k:\n      f=f+1\nif f>0:\n  print(':(')\nelse:\n  print('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "9057": {"id": 9057, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nf=0\nfor i in [a,b,c,d,e]:\n  for j in [a,b,c,d,e]:\n    if abs(i-j)>k:\n      f=f+1\nif f>0:\n  print(':(')\nelse:\n  print('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9058": {"id": 9058, "code": "A = 1\nB = 2\nC = 4\nD = 8\nE = 9\nK = 15\na=(E-A)\nif K>=a:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9059": {"id": 9059, "code": "A = 15\nB = 18\nC = 26\nD = 35\nE = 36\nK = 18\na=(E-A)\nif K>=a:\n    print('Yay!')\nelse:\n    print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9060": {"id": 9060, "code": "a=int(\"1\")\ne=int(\"9\")\nk=int(\"15\")\nprint(\"Yay!\" if k>=e-a else \":(\")", "coverage": [">", ">", ">", ">"]}, "9061": {"id": 9061, "code": "a=int(\"15\")\ne=int(\"36\")\nk=int(\"18\")\nprint(\"Yay!\" if k>=e-a else \":(\")", "coverage": [">", ">", ">", ">"]}, "9062": {"id": 9062, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nprint(':(' if e - a > k else 'Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "9063": {"id": 9063, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nprint(':(' if e - a > k else 'Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "9064": {"id": 9064, "code": "A = 1\nB = 2\nC = 4\nD = 8\nE = 9\nQ = 15\nF=A-B\nG=A-C\nH=A-D\nI=A-E\nJ=B-C\nK=B-D\nL=B-E\nM=C-D\nN=C-E\nO=D-E\nP=max(abs(F),abs(G),abs(H),abs(I),abs(J),abs(K),abs(L),abs(M),abs(N),abs(O))\nif P<=Q:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9065": {"id": 9065, "code": "A = 15\nB = 18\nC = 26\nD = 35\nE = 36\nQ = 18\nF=A-B\nG=A-C\nH=A-D\nI=A-E\nJ=B-C\nK=B-D\nL=B-E\nM=C-D\nN=C-E\nO=D-E\nP=max(abs(F),abs(G),abs(H),abs(I),abs(J),abs(K),abs(L),abs(M),abs(N),abs(O))\nif P<=Q:\n    print(\"Yay!\")\nelse:\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9066": {"id": 9066, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nimport itertools\ncannot=False\nfor x,y in itertools.combinations([a,b,c,d,e],2):\n    if y-x>k:\n        cannot=True\nif cannot:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "9067": {"id": 9067, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nimport itertools\ncannot=False\nfor x,y in itertools.combinations([a,b,c,d,e],2):\n    if y-x>k:\n        cannot=True\nif cannot:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9068": {"id": 9068, "code": "import itertools\nimport math\nantena = []\nantena.append(int(\"1\"))\nantena.append(int(\"2\"))\nantena.append(int(\"4\"))\nantena.append(int(\"8\"))\nantena.append(int(\"9\"))\nk = 15\nfor v in itertools.combinations(antena, 2):\n    if v[1] - v[0] > k:\n        print(\":(\")\n        quit()\nprint('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9069": {"id": 9069, "code": "a = 1;b = 2;c = 4;d = 8;e = 9;k = 15\nprint(\"Yay!\" if e-a<= k else \":(\")", "coverage": [">", ">"]}, "9070": {"id": 9070, "code": "a = 15;b = 18;c = 26;d = 35;e = 36;k = 18\nprint(\"Yay!\" if e-a<= k else \":(\")", "coverage": [">", ">"]}, "9071": {"id": 9071, "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nl = []\nl.append(a)\nl.append(b)\nl.append(c)\nl.append(d)\nl.append(e)\nans = 0\nfor i in range(5):\n    for j in range(i+1,5):\n        if l[j] - l[i] > k :\n            ans += 1\nif ans == 0 :\n    print(\"Yay!\")\nelse :\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!"]}, "9072": {"id": 9072, "code": "a = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nl = []\nl.append(a)\nl.append(b)\nl.append(c)\nl.append(d)\nl.append(e)\nans = 0\nfor i in range(5):\n    for j in range(i+1,5):\n        if l[j] - l[i] > k :\n            ans += 1\nif ans == 0 :\n    print(\"Yay!\")\nelse :\n    print(\":(\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9073": {"id": 9073, "code": "import sys\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nL=[a,b,c,d,e]\nfor i in range(4):\n  for j in range(i+1,5):\n    if abs(L[i]-L[j])>k:\n      print(\":(\")\n      sys.exit()\nprint(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9074": {"id": 9074, "code": "import sys\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nif e - a > k:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9075": {"id": 9075, "code": "import sys\na = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\nif e - a > k:\n    print(\":(\")\nelse:\n    print(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "9076": {"id": 9076, "code": "import itertools\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nl = [a, b, c, d, e]\nfor v in itertools.combinations(l, 2):\n    if abs(v[0]-v[1]) > k:\n        print(':(')\n        exit()\nprint('Yay!')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9077": {"id": 9077, "code": "import itertools\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\nfor x,y in itertools.permutations([a,b,c,d,e],2):\n    if x-y > k:\n        print(\":(\")\n        exit()\nprint(\"Yay!\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9078": {"id": 9078, "code": "import itertools\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nk = 15\narr1 = [a, b, c, d, e]\narr2 = [b, c, d, e]\nf = 0\nfor x, y in itertools.product(arr1, arr2):\n  if abs(x - y) > k:\n    f += 1\nif f == 0:\n  print('Yay!')\nelse:\n  print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!"]}, "9079": {"id": 9079, "code": "import itertools\na = 15\nb = 18\nc = 26\nd = 35\ne = 36\nk = 18\narr1 = [a, b, c, d, e]\narr2 = [b, c, d, e]\nf = 0\nfor x, y in itertools.product(arr1, arr2):\n  if abs(x - y) > k:\n    f += 1\nif f == 0:\n  print('Yay!')\nelse:\n  print(':(')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "9080": {"id": 9080, "code": "a = 1;e = 9\nif e - a <= int(\"15\"):\n  print('Yay!')\nelse:\n  print(':(')", "coverage": [">", ">", ">", "!", "!"]}, "9081": {"id": 9081, "code": "a = 15;e = 36\nif e - a <= int(\"18\"):\n  print('Yay!')\nelse:\n  print(':(')", "coverage": [">", ">", "!", "!", ">"]}, "12207": {"id": 12207, "code": "def han(l):\n    for i in range((len(l) // 2)):\n        if l[i] != l[-i - 1]:\n            return 0\n    return 1\nS = \"akasaka\"\nf1 = han(S)\nS2 = S[0:(len(S) // 2)]\nS3 = S[len(S)//2 + 1 : len(S)]\nf2 = han(S2)\nf3 = han(S3)\nif f1 * f2 * f3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12208": {"id": 12208, "code": "def han(l):\n    for i in range((len(l) // 2)):\n        if l[i] != l[-i - 1]:\n            return 0\n    return 1\nS = \"level\"\nf1 = han(S)\nS2 = S[0:(len(S) // 2)]\nS3 = S[len(S)//2 + 1 : len(S)]\nf2 = han(S2)\nf3 = han(S3)\nif f1 * f2 * f3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12209": {"id": 12209, "code": "def han(l):\n    for i in range((len(l) // 2)):\n        if l[i] != l[-i - 1]:\n            return 0\n    return 1\nS = \"atcoder\"\nf1 = han(S)\nS2 = S[0:(len(S) // 2)]\nS3 = S[len(S)//2 + 1 : len(S)]\nf2 = han(S2)\nf3 = han(S3)\nif f1 * f2 * f3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12210": {"id": 12210, "code": "s = \"akasaka\"\nn = len(s)\na = s[0:n//2]\nb = s[n//2+1:n]\nif s == s[::-1] and a == a[::-1] and b == b[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12211": {"id": 12211, "code": "s = \"level\"\nn = len(s)\na = s[0:n//2]\nb = s[n//2+1:n]\nif s == s[::-1] and a == a[::-1] and b == b[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12212": {"id": 12212, "code": "s = \"atcoder\"\nn = len(s)\na = s[0:n//2]\nb = s[n//2+1:n]\nif s == s[::-1] and a == a[::-1] and b == b[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12213": {"id": 12213, "code": "S = \"akasaka\"\narray = list(S)\nN = len(array)\na = (N-2)//2\nb = (N+2)//2\nif array[0:a+1] == array[b:N]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12214": {"id": 12214, "code": "S = \"level\"\narray = list(S)\nN = len(array)\na = (N-2)//2\nb = (N+2)//2\nif array[0:a+1] == array[b:N]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12215": {"id": 12215, "code": "S = \"atcoder\"\narray = list(S)\nN = len(array)\na = (N-2)//2\nb = (N+2)//2\nif array[0:a+1] == array[b:N]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12216": {"id": 12216, "code": "s = \"akasaka\"\nn=len(s)\ndef isk(S):\n  l=len(S)\n  f=1\n  for i in range(l//2+1):\n    if S[i]==S[l-i-1]:\n      f*=1\n    else:\n      f=0\n  if f:\n    return True\n  else:\n    return False\nif isk(s) and isk(s[:(n-1)//2]) and isk(s[(n+1)//2:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!"]}, "12217": {"id": 12217, "code": "s = \"level\"\nn=len(s)\ndef isk(S):\n  l=len(S)\n  f=1\n  for i in range(l//2+1):\n    if S[i]==S[l-i-1]:\n      f*=1\n    else:\n      f=0\n  if f:\n    return True\n  else:\n    return False\nif isk(s) and isk(s[:(n-1)//2]) and isk(s[(n+1)//2:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", "!", "!", ">"]}, "12218": {"id": 12218, "code": "s = \"atcoder\"\nn=len(s)\ndef isk(S):\n  l=len(S)\n  f=1\n  for i in range(l//2+1):\n    if S[i]==S[l-i-1]:\n      f*=1\n    else:\n      f=0\n  if f:\n    return True\n  else:\n    return False\nif isk(s) and isk(s[:(n-1)//2]) and isk(s[(n+1)//2:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "12219": {"id": 12219, "code": "N = \"akasaka\"\nlenN = len(N)\nfN =N[0:(lenN - 1)//2]\nlN =N[(lenN + 3)//2-1:]\nprint((\"No\",\"Yes\")[(0,1)[fN == fN[-1::-1]]*(0,1)[lN == lN[-1::-1]]*(0,1)[lN == fN]])", "coverage": [">", ">", ">", ">", ">"]}, "12220": {"id": 12220, "code": "N = \"level\"\nlenN = len(N)\nfN =N[0:(lenN - 1)//2]\nlN =N[(lenN + 3)//2-1:]\nprint((\"No\",\"Yes\")[(0,1)[fN == fN[-1::-1]]*(0,1)[lN == lN[-1::-1]]*(0,1)[lN == fN]])", "coverage": [">", ">", ">", ">", ">"]}, "12221": {"id": 12221, "code": "N = \"atcoder\"\nlenN = len(N)\nfN =N[0:(lenN - 1)//2]\nlN =N[(lenN + 3)//2-1:]\nprint((\"No\",\"Yes\")[(0,1)[fN == fN[-1::-1]]*(0,1)[lN == lN[-1::-1]]*(0,1)[lN == fN]])", "coverage": [">", ">", ">", ">", ">"]}, "12222": {"id": 12222, "code": "s = \"akasaka\"\ndef check():\n  if s != s[::-1]:\n    return(\"No\")\n  n = len(s)\n  s1 = s[:int((n-1)/2)]\n  if s1 != s1[::-1]:\n    return(\"No\")\n  s2 = s[int((n+3)/2-1):]\n  if s2 != s2[::-1]:\n    return(\"No\")\n  return(\"Yes\")\nprint(check())", "coverage": [">", ">", ">", "!", ">", ">", ">", "!", ">", ">", "!", ">", ">"]}, "12223": {"id": 12223, "code": "s = \"level\"\ndef check():\n  if s != s[::-1]:\n    return(\"No\")\n  n = len(s)\n  s1 = s[:int((n-1)/2)]\n  if s1 != s1[::-1]:\n    return(\"No\")\n  s2 = s[int((n+3)/2-1):]\n  if s2 != s2[::-1]:\n    return(\"No\")\n  return(\"Yes\")\nprint(check())", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "12224": {"id": 12224, "code": "s = \"atcoder\"\ndef check():\n  if s != s[::-1]:\n    return(\"No\")\n  n = len(s)\n  s1 = s[:int((n-1)/2)]\n  if s1 != s1[::-1]:\n    return(\"No\")\n  s2 = s[int((n+3)/2-1):]\n  if s2 != s2[::-1]:\n    return(\"No\")\n  return(\"Yes\")\nprint(check())", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "12225": {"id": 12225, "code": "S = \"akasaka\"\nN=len(S)\nA=S[:(N-1)//2]\nB=S[(N+3)//2-1:]\nif S!=S[::-1] or A!=A[::-1] or B!=B[::-1]:\n    print(\"No\")\nelse:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12226": {"id": 12226, "code": "S = \"level\"\nN=len(S)\nA=S[:(N-1)//2]\nB=S[(N+3)//2-1:]\nif S!=S[::-1] or A!=A[::-1] or B!=B[::-1]:\n    print(\"No\")\nelse:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12227": {"id": 12227, "code": "S = \"atcoder\"\nN=len(S)\nA=S[:(N-1)//2]\nB=S[(N+3)//2-1:]\nif S!=S[::-1] or A!=A[::-1] or B!=B[::-1]:\n    print(\"No\")\nelse:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12228": {"id": 12228, "code": "S = \"akasaka\"\nN = len(S)//2\nprint('Yes' if S[:N] == S[-N:] else 'No')", "coverage": [">", ">", ">"]}, "12229": {"id": 12229, "code": "S = \"level\"\nN = len(S)//2\nprint('Yes' if S[:N] == S[-N:] else 'No')", "coverage": [">", ">", ">"]}, "12230": {"id": 12230, "code": "S = \"atcoder\"\nN = len(S)//2\nprint('Yes' if S[:N] == S[-N:] else 'No')", "coverage": [">", ">", ">"]}, "12231": {"id": 12231, "code": "S = \"akasaka\"\nS_list = list(S)\nN = len(S_list)\nno_flag = 0\nfor i in range(N//2):\n    if S_list[i] != S_list[N-i-1]:\n        no_flag = 1\nfor i in range(int((N-1)/2)//2):\n    if S_list[i] != S_list[(N-1)//2-i-1]:\n        no_flag = 1\nfor i in range((N-3)//2):\n    if S_list[(N+3)//2+i-1] != S_list[N-1-i]:\n        no_flag = 1\nif no_flag == 1:\n    print(\"No\")\nelse:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", ">", "!", "!", ">"]}, "12232": {"id": 12232, "code": "S = \"level\"\nS_list = list(S)\nN = len(S_list)\nno_flag = 0\nfor i in range(N//2):\n    if S_list[i] != S_list[N-i-1]:\n        no_flag = 1\nfor i in range(int((N-1)/2)//2):\n    if S_list[i] != S_list[(N-1)//2-i-1]:\n        no_flag = 1\nfor i in range((N-3)//2):\n    if S_list[(N+3)//2+i-1] != S_list[N-1-i]:\n        no_flag = 1\nif no_flag == 1:\n    print(\"No\")\nelse:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12233": {"id": 12233, "code": "S = \"atcoder\"\nS_list = list(S)\nN = len(S_list)\nno_flag = 0\nfor i in range(N//2):\n    if S_list[i] != S_list[N-i-1]:\n        no_flag = 1\nfor i in range(int((N-1)/2)//2):\n    if S_list[i] != S_list[(N-1)//2-i-1]:\n        no_flag = 1\nfor i in range((N-3)//2):\n    if S_list[(N+3)//2+i-1] != S_list[N-1-i]:\n        no_flag = 1\nif no_flag == 1:\n    print(\"No\")\nelse:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12234": {"id": 12234, "code": "def main():\n    S = \"akasaka\"\n    N = len(S)\n    S1 = S[0:(N - 1) // 2]\n    S2 = S[(N + 3) // 2 - 1:]\n    if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1]:\n        print('Yes')\n    else:\n        print('No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "12235": {"id": 12235, "code": "def main():\n    S = \"level\"\n    N = len(S)\n    S1 = S[0:(N - 1) // 2]\n    S2 = S[(N + 3) // 2 - 1:]\n    if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1]:\n        print('Yes')\n    else:\n        print('No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "12236": {"id": 12236, "code": "def main():\n    S = \"atcoder\"\n    N = len(S)\n    S1 = S[0:(N - 1) // 2]\n    S2 = S[(N + 3) // 2 - 1:]\n    if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1]:\n        print('Yes')\n    else:\n        print('No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "12237": {"id": 12237, "code": "w = \"akasaka\"\nl = len(w)\nflag = True\nfor i in range((l - 1)//2):\n  if w[i] != w[l - i - 1]:\n    flag = False\n    break\nmid = (l - 1) // 2\nmid_mid = mid // 2\nfor i in range(mid_mid + 1):\n  if w[i] != w[mid - i - 1] or not flag:\n    flag = False\n    break\n  if w[i + mid + 1] != w[l - i - 1]:\n    flag = False\n    break\nif flag:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", "!", "!"]}, "12238": {"id": 12238, "code": "w = \"level\"\nl = len(w)\nflag = True\nfor i in range((l - 1)//2):\n  if w[i] != w[l - i - 1]:\n    flag = False\n    break\nmid = (l - 1) // 2\nmid_mid = mid // 2\nfor i in range(mid_mid + 1):\n  if w[i] != w[mid - i - 1] or not flag:\n    flag = False\n    break\n  if w[i + mid + 1] != w[l - i - 1]:\n    flag = False\n    break\nif flag:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "12239": {"id": 12239, "code": "w = \"atcoder\"\nl = len(w)\nflag = True\nfor i in range((l - 1)//2):\n  if w[i] != w[l - i - 1]:\n    flag = False\n    break\nmid = (l - 1) // 2\nmid_mid = mid // 2\nfor i in range(mid_mid + 1):\n  if w[i] != w[mid - i - 1] or not flag:\n    flag = False\n    break\n  if w[i + mid + 1] != w[l - i - 1]:\n    flag = False\n    break\nif flag:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "12240": {"id": 12240, "code": "a = \"akasaka\"\nb=len(a)\nc=(b-1)/2\nd=(b+1)/2\nif a[:int(c)]==a[int(d):]:\n\tprint(\"Yes\")\nelse:\n  \tprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12241": {"id": 12241, "code": "a = \"level\"\nb=len(a)\nc=(b-1)/2\nd=(b+1)/2\nif a[:int(c)]==a[int(d):]:\n\tprint(\"Yes\")\nelse:\n  \tprint(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12242": {"id": 12242, "code": "a = \"atcoder\"\nb=len(a)\nc=(b-1)/2\nd=(b+1)/2\nif a[:int(c)]==a[int(d):]:\n\tprint(\"Yes\")\nelse:\n  \tprint(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12243": {"id": 12243, "code": "def flg(s):\n  le = len(s) // 2\n  return s[:le] == s[::-1][:le]\ns = \"akasaka\"\nle1 = len(s) // 2\nt = s[:le1]\nprint([\"No\", \"Yes\"][flg(s) and flg(t)])", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "12244": {"id": 12244, "code": "def flg(s):\n  le = len(s) // 2\n  return s[:le] == s[::-1][:le]\ns = \"level\"\nle1 = len(s) // 2\nt = s[:le1]\nprint([\"No\", \"Yes\"][flg(s) and flg(t)])", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "12245": {"id": 12245, "code": "def flg(s):\n  le = len(s) // 2\n  return s[:le] == s[::-1][:le]\ns = \"atcoder\"\nle1 = len(s) // 2\nt = s[:le1]\nprint([\"No\", \"Yes\"][flg(s) and flg(t)])", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "12246": {"id": 12246, "code": "s = \"akasaka\"\nn = len(s)\nif s != s[::-1]:\n    print('No')\nelif s[:(n-1)//2] != s[:(n-1)//2][::-1]:\n    print('No')\nelif s[(n+3)//2-1:] != s[(n+3)//2-1:][::-1]:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "12247": {"id": 12247, "code": "s = \"level\"\nn = len(s)\nif s != s[::-1]:\n    print('No')\nelif s[:(n-1)//2] != s[:(n-1)//2][::-1]:\n    print('No')\nelif s[(n+3)//2-1:] != s[(n+3)//2-1:][::-1]:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", "!", ">", ">", "!", "!", "!", "!"]}, "12248": {"id": 12248, "code": "s = \"atcoder\"\nn = len(s)\nif s != s[::-1]:\n    print('No')\nelif s[:(n-1)//2] != s[:(n-1)//2][::-1]:\n    print('No')\nelif s[(n+3)//2-1:] != s[(n+3)//2-1:][::-1]:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "12249": {"id": 12249, "code": "s = \"akasaka\"\nn = len(s)\nflag = False\ndef palind(S):\n    size = len(S)\n    for i in range(size//2):\n        if S[i] != S[-1-i]:\n            return False\n    return True\nif palind(s):\n    m = (n-1)//2\n    sb = s[:m]\n    if palind(sb):\n        sa = s[m+1:]\n        flag = palind(sa)\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">"]}, "12250": {"id": 12250, "code": "s = \"level\"\nn = len(s)\nflag = False\ndef palind(S):\n    size = len(S)\n    for i in range(size//2):\n        if S[i] != S[-1-i]:\n            return False\n    return True\nif palind(s):\n    m = (n-1)//2\n    sb = s[:m]\n    if palind(sb):\n        sa = s[m+1:]\n        flag = palind(sa)\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12251": {"id": 12251, "code": "s = \"atcoder\"\nn = len(s)\nflag = False\ndef palind(S):\n    size = len(S)\n    for i in range(size//2):\n        if S[i] != S[-1-i]:\n            return False\n    return True\nif palind(s):\n    m = (n-1)//2\n    sb = s[:m]\n    if palind(sb):\n        sa = s[m+1:]\n        flag = palind(sa)\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", "!", "!", "!", ">"]}, "12252": {"id": 12252, "code": "s = \"akasaka\"\nn = len(s)\nif s != s[::-1]:\n  print('No')\nelse:\n  s_1 = s[0:(n-1)//2]\n  s_2 = s[(n+1)//2:n]\n  if s_1 == s_1[::-1] and s_2 == s_2[::-1]:\n    print('Yes')\n  else:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!"]}, "12253": {"id": 12253, "code": "s = \"level\"\nn = len(s)\nif s != s[::-1]:\n  print('No')\nelse:\n  s_1 = s[0:(n-1)//2]\n  s_2 = s[(n+1)//2:n]\n  if s_1 == s_1[::-1] and s_2 == s_2[::-1]:\n    print('Yes')\n  else:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "12254": {"id": 12254, "code": "s = \"atcoder\"\nn = len(s)\nif s != s[::-1]:\n  print('No')\nelse:\n  s_1 = s[0:(n-1)//2]\n  s_2 = s[(n+1)//2:n]\n  if s_1 == s_1[::-1] and s_2 == s_2[::-1]:\n    print('Yes')\n  else:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!"]}, "12255": {"id": 12255, "code": "S = \"akasaka\"\nN=len(S)\nr_S=S[::-1]\nc1=int((N-1)/2)\nc2=int((N+3)/2)\nS1=S[:c1]\nr_S1=S1[::-1]\nS2=S[(c2-1):]\nr_S2=S2[::-1]\nif S==r_S and S1==r_S1 and S2==r_S2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12256": {"id": 12256, "code": "S = \"level\"\nN=len(S)\nr_S=S[::-1]\nc1=int((N-1)/2)\nc2=int((N+3)/2)\nS1=S[:c1]\nr_S1=S1[::-1]\nS2=S[(c2-1):]\nr_S2=S2[::-1]\nif S==r_S and S1==r_S1 and S2==r_S2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12257": {"id": 12257, "code": "S = \"atcoder\"\nN=len(S)\nr_S=S[::-1]\nc1=int((N-1)/2)\nc2=int((N+3)/2)\nS1=S[:c1]\nr_S1=S1[::-1]\nS2=S[(c2-1):]\nr_S2=S2[::-1]\nif S==r_S and S1==r_S1 and S2==r_S2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12258": {"id": 12258, "code": "S = \"akasaka\"\nN = len(S)\nfor k in range(0, (N-1)//2):\n  if S[k] == S[(N-1)//2 - k -1] == S[(N-1)//2 + k + 1] == S[-k-1]:\n    continue\n  else:\n    print('No')\n    exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "12259": {"id": 12259, "code": "import sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\ns = \"akasaka\"\nn = len(s)\nt = s[0:(n-1)//2]\nq = s[(n+2)//2:n]\nif s == s[::-1] and t == t[::-1] and q == q[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12260": {"id": 12260, "code": "import sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\ns = \"level\"\nn = len(s)\nt = s[0:(n-1)//2]\nq = s[(n+2)//2:n]\nif s == s[::-1] and t == t[::-1] and q == q[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12261": {"id": 12261, "code": "import sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\ns = \"atcoder\"\nn = len(s)\nt = s[0:(n-1)//2]\nq = s[(n+2)//2:n]\nif s == s[::-1] and t == t[::-1] and q == q[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12262": {"id": 12262, "code": "s = \"akasaka\"\ns1 = s[:len(s) // 2]\ns2 = s[:len(s) // 2:-1]\ns3 = s[len(s) // 2 + 1:]\nif s1 == s2 == s3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12263": {"id": 12263, "code": "s = \"level\"\ns1 = s[:len(s) // 2]\ns2 = s[:len(s) // 2:-1]\ns3 = s[len(s) // 2 + 1:]\nif s1 == s2 == s3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12264": {"id": 12264, "code": "s = \"atcoder\"\ns1 = s[:len(s) // 2]\ns2 = s[:len(s) // 2:-1]\ns3 = s[len(s) // 2 + 1:]\nif s1 == s2 == s3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12265": {"id": 12265, "code": "S = \"akasaka\"\nN=len(S)\ndef isKaibun(S):\n  if S==S[::-1]:\n    return True\n  return False\nif isKaibun(S) and isKaibun(S[:(N-1)//2]) and isKaibun(S[(N+3)//2-1:]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", "!", "!"]}, "12266": {"id": 12266, "code": "S = \"level\"\nN=len(S)\ndef isKaibun(S):\n  if S==S[::-1]:\n    return True\n  return False\nif isKaibun(S) and isKaibun(S[:(N-1)//2]) and isKaibun(S[(N+3)//2-1:]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12267": {"id": 12267, "code": "S = \"atcoder\"\nN=len(S)\ndef isKaibun(S):\n  if S==S[::-1]:\n    return True\n  return False\nif isKaibun(S) and isKaibun(S[:(N-1)//2]) and isKaibun(S[(N+3)//2-1:]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", "!", ">"]}, "12268": {"id": 12268, "code": "s = \"akasaka\"\nsf = s[:int((len(s)-1)/2)]\nsl = s[int((len(s)+3)/2)-1:]\nif s == s[::-1] and sf == sf[::-1] and sl == sl[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "12269": {"id": 12269, "code": "s = \"level\"\nsf = s[:int((len(s)-1)/2)]\nsl = s[int((len(s)+3)/2)-1:]\nif s == s[::-1] and sf == sf[::-1] and sl == sl[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12270": {"id": 12270, "code": "s = \"atcoder\"\nsf = s[:int((len(s)-1)/2)]\nsl = s[int((len(s)+3)/2)-1:]\nif s == s[::-1] and sf == sf[::-1] and sl == sl[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12271": {"id": 12271, "code": "S = \"akasaka\"\nl = len(S) // 2\nformer = S[:l]\nlatter = S[l+1:]\nprint(\"Yes\" if S == S[::-1] and former == former[::-1] and latter == latter[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "12272": {"id": 12272, "code": "S = \"level\"\nl = len(S) // 2\nformer = S[:l]\nlatter = S[l+1:]\nprint(\"Yes\" if S == S[::-1] and former == former[::-1] and latter == latter[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "12273": {"id": 12273, "code": "S = \"atcoder\"\nl = len(S) // 2\nformer = S[:l]\nlatter = S[l+1:]\nprint(\"Yes\" if S == S[::-1] and former == former[::-1] and latter == latter[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "12274": {"id": 12274, "code": "string = \"akasaka\"\npalindrome=False\npalin1=False\ndef palin(string):\n    palindrome=False\n    if string==string[::-1]:\n        palindrome=True\n    return palindrome\npalindrome=palin(string)\nif palin(string[int((len(string)-1)/2)])==True and palindrome==True:\n    palin1=True\nif palin(string[int((len(string)+3)/2)-1:len(string)])==True and palin1==True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12275": {"id": 12275, "code": "string = \"level\"\npalindrome=False\npalin1=False\ndef palin(string):\n    palindrome=False\n    if string==string[::-1]:\n        palindrome=True\n    return palindrome\npalindrome=palin(string)\nif palin(string[int((len(string)-1)/2)])==True and palindrome==True:\n    palin1=True\nif palin(string[int((len(string)+3)/2)-1:len(string)])==True and palin1==True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12276": {"id": 12276, "code": "string = \"atcoder\"\npalindrome=False\npalin1=False\ndef palin(string):\n    palindrome=False\n    if string==string[::-1]:\n        palindrome=True\n    return palindrome\npalindrome=palin(string)\nif palin(string[int((len(string)-1)/2)])==True and palindrome==True:\n    palin1=True\nif palin(string[int((len(string)+3)/2)-1:len(string)])==True and palin1==True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "12277": {"id": 12277, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\nif (\n    s[: (n - 1) // 2] == s[: (n - 1) // 2][::-1]\n    and s[(n + 1) // 2 :] == s[(n + 1) // 2 :][::-1]\n    and s == s[::-1]\n):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", "!", ">", ">", ">", "!", ">", "!", "!"]}, "12278": {"id": 12278, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\nif (\n    s[: (n - 1) // 2] == s[: (n - 1) // 2][::-1]\n    and s[(n + 1) // 2 :] == s[(n + 1) // 2 :][::-1]\n    and s == s[::-1]\n):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", "!", ">", "!", "!", "!", "!", "!", ">"]}, "12279": {"id": 12279, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\nif (\n    s[: (n - 1) // 2] == s[: (n - 1) // 2][::-1]\n    and s[(n + 1) // 2 :] == s[(n + 1) // 2 :][::-1]\n    and s == s[::-1]\n):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", "!", ">", "!", "!", "!", "!", "!", ">"]}, "12280": {"id": 12280, "code": "def resolve():\n    def is_rotatable(S):\n        for i in range(len(S)//2):\n            if S[i] != S[-1-i]:\n                return False\n        return True\n    S = \"akasaka\"\n    N = len(S)\n    if is_rotatable(S) and is_rotatable(S[:N//2]) and is_rotatable(S[(N//2)+1:]):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif '__main__' == __name__:\n    resolve()", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "12281": {"id": 12281, "code": "def resolve():\n    def is_rotatable(S):\n        for i in range(len(S)//2):\n            if S[i] != S[-1-i]:\n                return False\n        return True\n    S = \"level\"\n    N = len(S)\n    if is_rotatable(S) and is_rotatable(S[:N//2]) and is_rotatable(S[(N//2)+1:]):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif '__main__' == __name__:\n    resolve()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "12282": {"id": 12282, "code": "def resolve():\n    def is_rotatable(S):\n        for i in range(len(S)//2):\n            if S[i] != S[-1-i]:\n                return False\n        return True\n    S = \"atcoder\"\n    N = len(S)\n    if is_rotatable(S) and is_rotatable(S[:N//2]) and is_rotatable(S[(N//2)+1:]):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif '__main__' == __name__:\n    resolve()", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">", ">", ">"]}, "12283": {"id": 12283, "code": "import sys\nS = \"akasaka\"\nif not S.islower():sys.exit()\nif not ( 3 <= len(S) <= 99 and len(S) % 2 == 1 ): sys.exit()\nfirst = int((len(S)-1)/2)\nF = S[0:first]\nlast = int((len(S)+3)/2)\nL = S[last-1:]\ncondition = 0\nif S == S[::-1]:\n    condition += 1\nif F == F[::-1]:\n    condition += 1\nif L == L[::-1]:\n    condition += 1\nprint('Yes') if condition == 3 else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "12284": {"id": 12284, "code": "import sys\nS = \"level\"\nif not S.islower():sys.exit()\nif not ( 3 <= len(S) <= 99 and len(S) % 2 == 1 ): sys.exit()\nfirst = int((len(S)-1)/2)\nF = S[0:first]\nlast = int((len(S)+3)/2)\nL = S[last-1:]\ncondition = 0\nif S == S[::-1]:\n    condition += 1\nif F == F[::-1]:\n    condition += 1\nif L == L[::-1]:\n    condition += 1\nprint('Yes') if condition == 3 else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">"]}, "12285": {"id": 12285, "code": "import sys\nS = \"atcoder\"\nif not S.islower():sys.exit()\nif not ( 3 <= len(S) <= 99 and len(S) % 2 == 1 ): sys.exit()\nfirst = int((len(S)-1)/2)\nF = S[0:first]\nlast = int((len(S)+3)/2)\nL = S[last-1:]\ncondition = 0\nif S == S[::-1]:\n    condition += 1\nif F == F[::-1]:\n    condition += 1\nif L == L[::-1]:\n    condition += 1\nprint('Yes') if condition == 3 else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">"]}, "12286": {"id": 12286, "code": "def isKaibun(ss):    \n    return ss==ss[::-1]\ns = \"akasaka\"\nans=True\nn=len(s)\nif not isKaibun(s):\n    ans=False\nif not isKaibun(s[:((n-1)//2)]):\n    ans=False\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">", "!", "!"]}, "12287": {"id": 12287, "code": "def isKaibun(ss):    \n    return ss==ss[::-1]\ns = \"level\"\nans=True\nn=len(s)\nif not isKaibun(s):\n    ans=False\nif not isKaibun(s[:((n-1)//2)]):\n    ans=False\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "12288": {"id": 12288, "code": "def isKaibun(ss):    \n    return ss==ss[::-1]\ns = \"atcoder\"\nans=True\nn=len(s)\nif not isKaibun(s):\n    ans=False\nif not isKaibun(s[:((n-1)//2)]):\n    ans=False\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12289": {"id": 12289, "code": "s = \"akasaka\"\ns1 = s[:len(s)//2]\ns2 = s[len(s)//2+1:]\nprint(\"Yes\" if s==s[::-1] and s1==s1[::-1] and s2==s2[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "12290": {"id": 12290, "code": "s = \"level\"\ns1 = s[:len(s)//2]\ns2 = s[len(s)//2+1:]\nprint(\"Yes\" if s==s[::-1] and s1==s1[::-1] and s2==s2[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "12291": {"id": 12291, "code": "s = \"atcoder\"\ns1 = s[:len(s)//2]\ns2 = s[len(s)//2+1:]\nprint(\"Yes\" if s==s[::-1] and s1==s1[::-1] and s2==s2[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "12292": {"id": 12292, "code": "def main():\n    s = \"akasaka\"\n    n = len(s)\n    s1 = s[:int((n-1)/2)]\n    s2 = s[int((n+3)/2)-1:]\n    for tmp in [s, s1, s2]:\n        tmp_rev = tmp[::-1]\n        if tmp != tmp_rev:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">"]}, "12293": {"id": 12293, "code": "def main():\n    s = \"level\"\n    n = len(s)\n    s1 = s[:int((n-1)/2)]\n    s2 = s[int((n+3)/2)-1:]\n    for tmp in [s, s1, s2]:\n        tmp_rev = tmp[::-1]\n        if tmp != tmp_rev:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12294": {"id": 12294, "code": "def main():\n    s = \"atcoder\"\n    n = len(s)\n    s1 = s[:int((n-1)/2)]\n    s2 = s[int((n+3)/2)-1:]\n    for tmp in [s, s1, s2]:\n        tmp_rev = tmp[::-1]\n        if tmp != tmp_rev:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12295": {"id": 12295, "code": "s = \"akasaka\"\nn = len(s)\ns_ = s[:(n-1)//2]\nif s == s[::-1] and s_ == s_[::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "12296": {"id": 12296, "code": "s = \"level\"\nn = len(s)\ns_ = s[:(n-1)//2]\nif s == s[::-1] and s_ == s_[::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12297": {"id": 12297, "code": "s = \"atcoder\"\nn = len(s)\ns_ = s[:(n-1)//2]\nif s == s[::-1] and s_ == s_[::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12298": {"id": 12298, "code": "s = \"akasaka\"\nflag = 1\nl = len(s)\nfor i in range((l-1)//2):\n    if s[i] == s[(l-1)//2 - 1-i]:\n        continue\n    else:\n        flag = 0\n        break\nif s[:(l-1)//2] != s[(l+3)//2-1:]:\n    flag = 0\nprint(\"Yes\" if flag == 1 else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", ">"]}, "12299": {"id": 12299, "code": "s = \"level\"\nflag = 1\nl = len(s)\nfor i in range((l-1)//2):\n    if s[i] == s[(l-1)//2 - 1-i]:\n        continue\n    else:\n        flag = 0\n        break\nif s[:(l-1)//2] != s[(l+3)//2-1:]:\n    flag = 0\nprint(\"Yes\" if flag == 1 else \"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">"]}, "12300": {"id": 12300, "code": "s = \"atcoder\"\nflag = 1\nl = len(s)\nfor i in range((l-1)//2):\n    if s[i] == s[(l-1)//2 - 1-i]:\n        continue\n    else:\n        flag = 0\n        break\nif s[:(l-1)//2] != s[(l+3)//2-1:]:\n    flag = 0\nprint(\"Yes\" if flag == 1 else \"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">"]}, "12301": {"id": 12301, "code": "s = \"akasaka\"\np =\"Yes\"\nfor i in range(len(s)//2):\n  if s[i] != s[len(s) -1 -i]:\n    p = \"No\"\nfor i in range(len(s)//2):\n  if s[i] != s[len(s)//2 -1 -i]:\n    p = \"No\"\nprint(p)", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", ">"]}, "12302": {"id": 12302, "code": "s = \"level\"\np =\"Yes\"\nfor i in range(len(s)//2):\n  if s[i] != s[len(s) -1 -i]:\n    p = \"No\"\nfor i in range(len(s)//2):\n  if s[i] != s[len(s)//2 -1 -i]:\n    p = \"No\"\nprint(p)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">"]}, "12303": {"id": 12303, "code": "s = \"atcoder\"\np =\"Yes\"\nfor i in range(len(s)//2):\n  if s[i] != s[len(s) -1 -i]:\n    p = \"No\"\nfor i in range(len(s)//2):\n  if s[i] != s[len(s)//2 -1 -i]:\n    p = \"No\"\nprint(p)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "12304": {"id": 12304, "code": "string = \"akasaka\"\nmid = len(string)//2\ngnirts = string[::-1]\nif(string != gnirts or string[:mid] != gnirts[mid+1:] or string[mid+1:] != gnirts[:mid]):\n  print(\"No\")\n  exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12305": {"id": 12305, "code": "s = \"akasaka\"\nn = len(s)\ns1 = s[:(n - 1) // 2]\ns2 = s[(n + 1) // 2:]\nif s == s[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12306": {"id": 12306, "code": "s = \"level\"\nn = len(s)\ns1 = s[:(n - 1) // 2]\ns2 = s[(n + 1) // 2:]\nif s == s[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12307": {"id": 12307, "code": "s = \"atcoder\"\nn = len(s)\ns1 = s[:(n - 1) // 2]\ns2 = s[(n + 1) // 2:]\nif s == s[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12308": {"id": 12308, "code": "S = \"akasaka\"\nsize=len(S)\ndef palin(S,size):\n    for i  in range (size//2):\n        if S[i]!=S[-1-i]:\n            return False\n    return True\nif palin(S,size) == True:\n    L=S[:size//2]\n    R=S[size//2+2:]\n    if palin(L,size//2) & palin(L,size//2):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "12309": {"id": 12309, "code": "S = \"level\"\nsize=len(S)\ndef palin(S,size):\n    for i  in range (size//2):\n        if S[i]!=S[-1-i]:\n            return False\n    return True\nif palin(S,size) == True:\n    L=S[:size//2]\n    R=S[size//2+2:]\n    if palin(L,size//2) & palin(L,size//2):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "12310": {"id": 12310, "code": "S = \"atcoder\"\nsize=len(S)\ndef palin(S,size):\n    for i  in range (size//2):\n        if S[i]!=S[-1-i]:\n            return False\n    return True\nif palin(S,size) == True:\n    L=S[:size//2]\n    R=S[size//2+2:]\n    if palin(L,size//2) & palin(L,size//2):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", "!", "!", "!", "!", "!", "!", "!", ">"]}, "12311": {"id": 12311, "code": "s = \"akasaka\"\nn = len(s)\ns_re =s[::-1]\ns_first = s[:(n-1)//2]\ns_first_re = s_first[::-1]\ns_second = s[(n+3)//2-1:]\ns_second_re = s_second[::-1]\nprint(['No','Yes'][s == s_re and s_first==s_first_re and s_second == s_second_re])", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "12312": {"id": 12312, "code": "s = \"level\"\nn = len(s)\ns_re =s[::-1]\ns_first = s[:(n-1)//2]\ns_first_re = s_first[::-1]\ns_second = s[(n+3)//2-1:]\ns_second_re = s_second[::-1]\nprint(['No','Yes'][s == s_re and s_first==s_first_re and s_second == s_second_re])", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "12313": {"id": 12313, "code": "s = \"atcoder\"\nn = len(s)\ns_re =s[::-1]\ns_first = s[:(n-1)//2]\ns_first_re = s_first[::-1]\ns_second = s[(n+3)//2-1:]\ns_second_re = s_second[::-1]\nprint(['No','Yes'][s == s_re and s_first==s_first_re and s_second == s_second_re])", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "12314": {"id": 12314, "code": "S = \"akasaka\"\ns=len(S)\na=''\nb=''\nfor i in range((s-1)//2):\n    a+=S[i]\nfor n in range((s+3)//2-1,s):\n    b+=S[n]\nif a==b:\n    A=a[::-1]\n    B=b[::-1]\n    if A==a and B==b:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "12315": {"id": 12315, "code": "S = \"level\"\ns=len(S)\na=''\nb=''\nfor i in range((s-1)//2):\n    a+=S[i]\nfor n in range((s+3)//2-1,s):\n    b+=S[n]\nif a==b:\n    A=a[::-1]\n    B=b[::-1]\n    if A==a and B==b:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">"]}, "12316": {"id": 12316, "code": "S = \"atcoder\"\ns=len(S)\na=''\nb=''\nfor i in range((s-1)//2):\n    a+=S[i]\nfor n in range((s+3)//2-1,s):\n    b+=S[n]\nif a==b:\n    A=a[::-1]\n    B=b[::-1]\n    if A==a and B==b:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">"]}, "12317": {"id": 12317, "code": "S = \"akasaka\"\nN = len(S)\nS_list=[]\nfor i in S:\n    S_list.append(i)   \nrS_list = list(reversed(S_list))\nsecond_list = S_list[:(int((N-1)/2))]\nrsecond_list = list(reversed(second_list))\nthird_list = S_list[(int(((N+3)-1)/2)):N]\nrthird_list = list(reversed(third_list))\nif S_list == rS_list:\n    if second_list == rsecond_list:\n        if third_list == rthird_list:\n            print('Yes')       \n    else:\n            print('No')   \nelse:\n            print('No')    ", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "12318": {"id": 12318, "code": "S = \"level\"\nN = len(S)\nS_list=[]\nfor i in S:\n    S_list.append(i)   \nrS_list = list(reversed(S_list))\nsecond_list = S_list[:(int((N-1)/2))]\nrsecond_list = list(reversed(second_list))\nthird_list = S_list[(int(((N+3)-1)/2)):N]\nrthird_list = list(reversed(third_list))\nif S_list == rS_list:\n    if second_list == rsecond_list:\n        if third_list == rthird_list:\n            print('Yes')       \n    else:\n            print('No')   \nelse:\n            print('No')    ", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!"]}, "12319": {"id": 12319, "code": "S = \"atcoder\"\nN = len(S)\nS_list=[]\nfor i in S:\n    S_list.append(i)   \nrS_list = list(reversed(S_list))\nsecond_list = S_list[:(int((N-1)/2))]\nrsecond_list = list(reversed(second_list))\nthird_list = S_list[(int(((N+3)-1)/2)):N]\nrthird_list = list(reversed(third_list))\nif S_list == rS_list:\n    if second_list == rsecond_list:\n        if third_list == rthird_list:\n            print('Yes')       \n    else:\n            print('No')   \nelse:\n            print('No')    ", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">"]}, "12320": {"id": 12320, "code": "s = \"akasaka\"\nn = len(s)\nc = 0\nfor i in range(int((n - 1)/2)):\n  if (s[i] != s[n - 1 - i]):\n    c = 1\nx = int((n - 1)/2)\nfor i in range(x):\n  if (s[i] != s[x - 1 - i]):\n    c = 1\nif (c == 1):\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", "!", "!", ">"]}, "12321": {"id": 12321, "code": "s = \"level\"\nn = len(s)\nc = 0\nfor i in range(int((n - 1)/2)):\n  if (s[i] != s[n - 1 - i]):\n    c = 1\nx = int((n - 1)/2)\nfor i in range(x):\n  if (s[i] != s[x - 1 - i]):\n    c = 1\nif (c == 1):\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12322": {"id": 12322, "code": "s = \"atcoder\"\nn = len(s)\nc = 0\nfor i in range(int((n - 1)/2)):\n  if (s[i] != s[n - 1 - i]):\n    c = 1\nx = int((n - 1)/2)\nfor i in range(x):\n  if (s[i] != s[x - 1 - i]):\n    c = 1\nif (c == 1):\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12323": {"id": 12323, "code": "s = \"akasaka\"\nn=len(s)\ns1=s[0:n//2]\ns2=s[n//2+1:n]\nif s==s[::-1]and s1==s1[::-1] and s2==s2[::-1]: print(\"Yes\")\nelse: print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!"]}, "12324": {"id": 12324, "code": "s = \"level\"\nn=len(s)\ns1=s[0:n//2]\ns2=s[n//2+1:n]\nif s==s[::-1]and s1==s1[::-1] and s2==s2[::-1]: print(\"Yes\")\nelse: print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">"]}, "12325": {"id": 12325, "code": "s = \"atcoder\"\nn=len(s)\ns1=s[0:n//2]\ns2=s[n//2+1:n]\nif s==s[::-1]and s1==s1[::-1] and s2==s2[::-1]: print(\"Yes\")\nelse: print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">"]}, "12326": {"id": 12326, "code": "S = \"akasaka\"\nT=True\nfor i in range(int((len(S)-1)/2)-1):\n  if S[i]!=S[int(len(S))-1-i]:\n    T=False\nfor i in range(int((len(S)-3)/4)+1):\n  if S[i]!=S[int((len(S)-3)/2)-i]:\n    T=False\nif T==False:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", ">", "!", "!", ">"]}, "12327": {"id": 12327, "code": "S = \"level\"\nT=True\nfor i in range(int((len(S)-1)/2)-1):\n  if S[i]!=S[int(len(S))-1-i]:\n    T=False\nfor i in range(int((len(S)-3)/4)+1):\n  if S[i]!=S[int((len(S)-3)/2)-i]:\n    T=False\nif T==False:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "12328": {"id": 12328, "code": "S = \"atcoder\"\nT=True\nfor i in range(int((len(S)-1)/2)-1):\n  if S[i]!=S[int(len(S))-1-i]:\n    T=False\nfor i in range(int((len(S)-3)/4)+1):\n  if S[i]!=S[int((len(S)-3)/2)-i]:\n    T=False\nif T==False:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12329": {"id": 12329, "code": "S = \"akasaka\"\nN=len(S)\ns=''.join(list(reversed(S)))\nT=S[0:int((N-1)/2)]\nNT=len(T)\nt=''.join(list(reversed(T)))\nU=S[int((N+1)/2):N]\nNU=len(U)\nu=''.join(list(reversed(U)))\nif S[0:int((N-1)/2)] == s[0:int((N-1)/2)] and T == t and U == u:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12330": {"id": 12330, "code": "S = \"level\"\nN=len(S)\ns=''.join(list(reversed(S)))\nT=S[0:int((N-1)/2)]\nNT=len(T)\nt=''.join(list(reversed(T)))\nU=S[int((N+1)/2):N]\nNU=len(U)\nu=''.join(list(reversed(U)))\nif S[0:int((N-1)/2)] == s[0:int((N-1)/2)] and T == t and U == u:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12331": {"id": 12331, "code": "S = \"atcoder\"\nN=len(S)\ns=''.join(list(reversed(S)))\nT=S[0:int((N-1)/2)]\nNT=len(T)\nt=''.join(list(reversed(T)))\nU=S[int((N+1)/2):N]\nNU=len(U)\nu=''.join(list(reversed(U)))\nif S[0:int((N-1)/2)] == s[0:int((N-1)/2)] and T == t and U == u:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12332": {"id": 12332, "code": "def check(r):\n    if r == r[::-1]:\n        return True\ndef main():\n    s = \"akasaka\"\n    n = len(s)\n    print(\"Yes\" if check(s) and check(s[:(n-1)//2])\n          and check(s[((n-1)//2) + 1:]) else \"No\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "12333": {"id": 12333, "code": "def check(r):\n    if r == r[::-1]:\n        return True\ndef main():\n    s = \"level\"\n    n = len(s)\n    print(\"Yes\" if check(s) and check(s[:(n-1)//2])\n          and check(s[((n-1)//2) + 1:]) else \"No\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">"]}, "12334": {"id": 12334, "code": "def check(r):\n    if r == r[::-1]:\n        return True\ndef main():\n    s = \"atcoder\"\n    n = len(s)\n    print(\"Yes\" if check(s) and check(s[:(n-1)//2])\n          and check(s[((n-1)//2) + 1:]) else \"No\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", "!", ">", ">", ">", ">", "!", ">", ">"]}, "12335": {"id": 12335, "code": "S = \"akasaka\"\ndef iskai(s):\n  result=False\n  if s == s[::-1]:\n    result=True\n  return(result)\nans = 'No'\nhf = len(S)//2 + 1\nif iskai(S) and iskai(S[:hf-1]) and iskai(S[hf:]):\n  ans = 'Yes'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "12336": {"id": 12336, "code": "S = \"level\"\ndef iskai(s):\n  result=False\n  if s == s[::-1]:\n    result=True\n  return(result)\nans = 'No'\nhf = len(S)//2 + 1\nif iskai(S) and iskai(S[:hf-1]) and iskai(S[hf:]):\n  ans = 'Yes'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "12337": {"id": 12337, "code": "S = \"atcoder\"\ndef iskai(s):\n  result=False\n  if s == s[::-1]:\n    result=True\n  return(result)\nans = 'No'\nhf = len(S)//2 + 1\nif iskai(S) and iskai(S[:hf-1]) and iskai(S[hf:]):\n  ans = 'Yes'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", "!", ">"]}, "12338": {"id": 12338, "code": "S = \"akasaka\"\nN = len(S)\nif S == S[::-1]:\n  if S[:(N-1)//2] == S [(N+1)//2:]:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "12339": {"id": 12339, "code": "S = \"level\"\nN = len(S)\nif S == S[::-1]:\n  if S[:(N-1)//2] == S [(N+1)//2:]:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "12340": {"id": 12340, "code": "S = \"atcoder\"\nN = len(S)\nif S == S[::-1]:\n  if S[:(N-1)//2] == S [(N+1)//2:]:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", "!", "!", "!", "!", "!", ">"]}, "12341": {"id": 12341, "code": "s = \"akasaka\"\nn = len(s)\nn1 = (n-1)//2\nn2 = (n+1)//2\nif s == s[::-1]:\n    if s[:n1] == s[n2:]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "12342": {"id": 12342, "code": "s = \"level\"\nn = len(s)\nn1 = (n-1)//2\nn2 = (n+1)//2\nif s == s[::-1]:\n    if s[:n1] == s[n2:]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "12343": {"id": 12343, "code": "s = \"atcoder\"\nn = len(s)\nn1 = (n-1)//2\nn2 = (n+1)//2\nif s == s[::-1]:\n    if s[:n1] == s[n2:]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">"]}, "12344": {"id": 12344, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\ns_r = list(reversed(s))\ncnt0 = 0\nss0 = False\nfor a,b in zip(s,s_r):\n    if a == b:\n        cnt0 += 1\n    if cnt0 == len(s):\n        ss0 = True\ncnt1 = 0\nss1 = False\ns1 =s[0:(n-1)//2]\ns1_r = list(reversed(s1))\nfor a,b in zip(s1,s1_r):\n    if a == b:\n        cnt1 += 1\n    if cnt1 == len(s1):\n        ss1 = True\ncnt2 = 0\nss2 = False\ns2 =s[(n+3)//2-1:n]\ns2_r = list(reversed(s2))\nfor a,b in zip(s2,s2_r):\n    if a == b:\n        cnt2 += 1\n    if cnt2 == len(s2):\n        ss2 = True\nif ss0 and ss1 and ss2:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "12345": {"id": 12345, "code": "s = \"akasaka\"\nk = int((len(s) -1)/2) \nl = int((len(s) + 3)/2) - 1\nn = list(s)\nif n[0:k] == n[l:]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12346": {"id": 12346, "code": "s = \"level\"\nk = int((len(s) -1)/2) \nl = int((len(s) + 3)/2) - 1\nn = list(s)\nif n[0:k] == n[l:]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12347": {"id": 12347, "code": "s = \"atcoder\"\nk = int((len(s) -1)/2) \nl = int((len(s) + 3)/2) - 1\nn = list(s)\nif n[0:k] == n[l:]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12348": {"id": 12348, "code": "def is_kaibun(string):\n    for i in range((len(string)//2)+1):\n        if string[i] != string[len(string)-i-1]:\n            return False\n    else:\n        return True\nS = \"akasaka\"\nif is_kaibun(S) and is_kaibun(S[0:(len(S)-1)//2]) and is_kaibun(S[((len(S)+3)//2)-1:len(S)]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!"]}, "12349": {"id": 12349, "code": "def is_kaibun(string):\n    for i in range((len(string)//2)+1):\n        if string[i] != string[len(string)-i-1]:\n            return False\n    else:\n        return True\nS = \"level\"\nif is_kaibun(S) and is_kaibun(S[0:(len(S)-1)//2]) and is_kaibun(S[((len(S)+3)//2)-1:len(S)]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "12350": {"id": 12350, "code": "def is_kaibun(string):\n    for i in range((len(string)//2)+1):\n        if string[i] != string[len(string)-i-1]:\n            return False\n    else:\n        return True\nS = \"atcoder\"\nif is_kaibun(S) and is_kaibun(S[0:(len(S)-1)//2]) and is_kaibun(S[((len(S)+3)//2)-1:len(S)]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "12351": {"id": 12351, "code": "S = \"akasaka\"\nN = len(S)\nans = 'No'\nif S == S[::-1] and S[:(N-1)//2] == S[:(N-1)//2][::-1] and S[(N+1)//2:] == S[(N+1)//2:][::-1]:\n  ans = 'Yes'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "12352": {"id": 12352, "code": "S = \"level\"\nN = len(S)\nans = 'No'\nif S == S[::-1] and S[:(N-1)//2] == S[:(N-1)//2][::-1] and S[(N+1)//2:] == S[(N+1)//2:][::-1]:\n  ans = 'Yes'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">"]}, "12353": {"id": 12353, "code": "S = \"atcoder\"\nN = len(S)\nans = 'No'\nif S == S[::-1] and S[:(N-1)//2] == S[:(N-1)//2][::-1] and S[(N+1)//2:] == S[(N+1)//2:][::-1]:\n  ans = 'Yes'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">"]}, "12354": {"id": 12354, "code": "S = \"akasaka\"\nN = len(S)\ns = S[:(N-1)//2]\nt = S[(N+3)//2-1:]\nif s == t[::-1] and s == s[::-1] and t == t[::-1]:\n  ans = \"Yes\"\nelse:\n  ans = \"No\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12355": {"id": 12355, "code": "S = \"level\"\nN = len(S)\ns = S[:(N-1)//2]\nt = S[(N+3)//2-1:]\nif s == t[::-1] and s == s[::-1] and t == t[::-1]:\n  ans = \"Yes\"\nelse:\n  ans = \"No\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "12356": {"id": 12356, "code": "S = \"atcoder\"\nN = len(S)\ns = S[:(N-1)//2]\nt = S[(N+3)//2-1:]\nif s == t[::-1] and s == s[::-1] and t == t[::-1]:\n  ans = \"Yes\"\nelse:\n  ans = \"No\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "12357": {"id": 12357, "code": "s = \"akasaka\"\nn = len(s)\nif s[0:n] == s[::-1]:\n  if s[0:(n-1)//2] == s[(n+1)//2:n]:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "12358": {"id": 12358, "code": "s = \"level\"\nn = len(s)\nif s[0:n] == s[::-1]:\n  if s[0:(n-1)//2] == s[(n+1)//2:n]:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "12359": {"id": 12359, "code": "s = \"atcoder\"\nn = len(s)\nif s[0:n] == s[::-1]:\n  if s[0:(n-1)//2] == s[(n+1)//2:n]:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", "!", "!", "!", "!", "!", ">"]}, "12360": {"id": 12360, "code": "s = \"akasaka\"\nn = len(s)\ndef judge_palindrome(s):\n    if s == s[::-1]:\n        return True\n    else:\n        return False\nif judge_palindrome(s) and judge_palindrome(s[:(n - 1) // 2]) and judge_palindrome(s[(n + 3) // 2 - 1:]):\n    ans = 'Yes'\nelse:\n    ans = 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "12361": {"id": 12361, "code": "s = \"level\"\nn = len(s)\ndef judge_palindrome(s):\n    if s == s[::-1]:\n        return True\n    else:\n        return False\nif judge_palindrome(s) and judge_palindrome(s[:(n - 1) // 2]) and judge_palindrome(s[(n + 3) // 2 - 1:]):\n    ans = 'Yes'\nelse:\n    ans = 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", "!", "!", ">", ">"]}, "12362": {"id": 12362, "code": "s = \"atcoder\"\nn = len(s)\ndef judge_palindrome(s):\n    if s == s[::-1]:\n        return True\n    else:\n        return False\nif judge_palindrome(s) and judge_palindrome(s[:(n - 1) // 2]) and judge_palindrome(s[(n + 3) // 2 - 1:]):\n    ans = 'Yes'\nelse:\n    ans = 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "12363": {"id": 12363, "code": "import sys\ns = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nr=list(reversed(s))\nn=len(s)\nfor i in range(n):\n    if s[i]!=r[i]:\n        print('No')\n        sys.exit()\ns1=s[:]\ndel s1[(n-1)//2:]\nr1=list(reversed(s1))\nfor i in range(len(s1)):\n    if s1[i]!=r1[i]:\n        print('No')\n        sys.exit()\ns2=s[:]\ndel s2[:(n+3)//2-1]\nr2=list(reversed(s2))\nfor i in range(len(s2)):\n    if s2[i]!=r2[i]:\n        print('No')\n        sys.exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12364": {"id": 12364, "code": "s = \"akasaka\"\nn = len(s)\nans = \"No\"\ncnt = 0\nif s[::1] == s[::-1]:\n    cnt += 1\nif s[:int((n-1)/2):1] == s[int((n-1)/2)-1::-1]:\n    cnt += 1\nif s[int((n+1)/2)::1] ==  s[:int((n-1)/2):-1]:\n    cnt += 1\nif cnt == 3:\n    ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "12365": {"id": 12365, "code": "s = \"level\"\nn = len(s)\nans = \"No\"\ncnt = 0\nif s[::1] == s[::-1]:\n    cnt += 1\nif s[:int((n-1)/2):1] == s[int((n-1)/2)-1::-1]:\n    cnt += 1\nif s[int((n+1)/2)::1] ==  s[:int((n-1)/2):-1]:\n    cnt += 1\nif cnt == 3:\n    ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">"]}, "12366": {"id": 12366, "code": "s = \"atcoder\"\nn = len(s)\nans = \"No\"\ncnt = 0\nif s[::1] == s[::-1]:\n    cnt += 1\nif s[:int((n-1)/2):1] == s[int((n-1)/2)-1::-1]:\n    cnt += 1\nif s[int((n+1)/2)::1] ==  s[:int((n-1)/2):-1]:\n    cnt += 1\nif cnt == 3:\n    ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">"]}, "12367": {"id": 12367, "code": "s = \"akasaka\"\nn = len(s)\nflg = True\nfor i in range(n//2):\n    if s[i] != s[n-1-i]:\n        flg = False\nfor i in range(n//4):\n    if s[i] != s[n//2-1-i]:\n        flg = False\nprint('Yes') if flg else print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", "!", ">"]}, "12368": {"id": 12368, "code": "s = \"level\"\nn = len(s)\nflg = True\nfor i in range(n//2):\n    if s[i] != s[n-1-i]:\n        flg = False\nfor i in range(n//4):\n    if s[i] != s[n//2-1-i]:\n        flg = False\nprint('Yes') if flg else print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">"]}, "12369": {"id": 12369, "code": "s = \"atcoder\"\nn = len(s)\nflg = True\nfor i in range(n//2):\n    if s[i] != s[n-1-i]:\n        flg = False\nfor i in range(n//4):\n    if s[i] != s[n//2-1-i]:\n        flg = False\nprint('Yes') if flg else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "12370": {"id": 12370, "code": "s = \"akasaka\"\nn=len(s)\ndef f(s):\n    m=len(s)\n    for i in range(-(-m//2)):\n        if s[i]!=s[-1-i]:\n            return False\n    return True\nif f(s) and f(s[:(n-1)//2]) and f(s[((n+3)//2)-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!"]}, "12371": {"id": 12371, "code": "s = \"level\"\nn=len(s)\ndef f(s):\n    m=len(s)\n    for i in range(-(-m//2)):\n        if s[i]!=s[-1-i]:\n            return False\n    return True\nif f(s) and f(s[:(n-1)//2]) and f(s[((n+3)//2)-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12372": {"id": 12372, "code": "s = \"atcoder\"\nn=len(s)\ndef f(s):\n    m=len(s)\n    for i in range(-(-m//2)):\n        if s[i]!=s[-1-i]:\n            return False\n    return True\nif f(s) and f(s[:(n-1)//2]) and f(s[((n+3)//2)-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "12373": {"id": 12373, "code": "s = \"akasaka\"\ns = list(s)\ns1 = s[0:len(s)//2]\ns2 = s[len(s)//2+1:len(s)]\nif (\"\".join(s1) == \"\".join(s2)) :\n  print(\"Yes\")\nelse :    \n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12374": {"id": 12374, "code": "s = \"level\"\ns = list(s)\ns1 = s[0:len(s)//2]\ns2 = s[len(s)//2+1:len(s)]\nif (\"\".join(s1) == \"\".join(s2)) :\n  print(\"Yes\")\nelse :    \n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12375": {"id": 12375, "code": "s = \"atcoder\"\ns = list(s)\ns1 = s[0:len(s)//2]\ns2 = s[len(s)//2+1:len(s)]\nif (\"\".join(s1) == \"\".join(s2)) :\n  print(\"Yes\")\nelse :    \n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12376": {"id": 12376, "code": "import sys\nS = \"akasaka\"\nN=len(S)\nif S[:N//2]==S[N//2+1:][::-1]:\n  if N==3:\n    print(\"Yes\")\n  elif (N//2)%2==1:\n    if S[:(N//2)//2]==S[(N//2)//2+1:N//2][::-1] and S[N//2+1:-(N//2)//2]==S[-(N//2)//2+1:][::-1]:\n      print(\"Yes\")\n    else:\n      print(\"No\")\n  else:\n    if S[:(N//2)//2]==S[(N//2)//2:N//2][::-1] and S[N//2+1:-(N//2)//2]==S[-(N//2)//2:][::-1]:\n      print(\"Yes\")\n    else:\n      print(\"No\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!"]}, "12377": {"id": 12377, "code": "import sys\nS = \"level\"\nN=len(S)\nif S[:N//2]==S[N//2+1:][::-1]:\n  if N==3:\n    print(\"Yes\")\n  elif (N//2)%2==1:\n    if S[:(N//2)//2]==S[(N//2)//2+1:N//2][::-1] and S[N//2+1:-(N//2)//2]==S[-(N//2)//2+1:][::-1]:\n      print(\"Yes\")\n    else:\n      print(\"No\")\n  else:\n    if S[:(N//2)//2]==S[(N//2)//2:N//2][::-1] and S[N//2+1:-(N//2)//2]==S[-(N//2)//2:][::-1]:\n      print(\"Yes\")\n    else:\n      print(\"No\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", "!", "!", "!", "!", ">", "!", "!", ">", "!", "!"]}, "12378": {"id": 12378, "code": "import sys\nS = \"atcoder\"\nN=len(S)\nif S[:N//2]==S[N//2+1:][::-1]:\n  if N==3:\n    print(\"Yes\")\n  elif (N//2)%2==1:\n    if S[:(N//2)//2]==S[(N//2)//2+1:N//2][::-1] and S[N//2+1:-(N//2)//2]==S[-(N//2)//2+1:][::-1]:\n      print(\"Yes\")\n    else:\n      print(\"No\")\n  else:\n    if S[:(N//2)//2]==S[(N//2)//2:N//2][::-1] and S[N//2+1:-(N//2)//2]==S[-(N//2)//2:][::-1]:\n      print(\"Yes\")\n    else:\n      print(\"No\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "12379": {"id": 12379, "code": "s = \"akasaka\"\ndef kaibun(s):\n    if s == s[::-1]:\n        return 1\n    else:\n        return 0\nq = len(s)\nd = int((q-1)/2)\nket = s[0:d]\nmat = s[int((q+1)/2):q]\nif (kaibun(s) + kaibun(ket) + kaibun(mat)) == 3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12380": {"id": 12380, "code": "s = \"level\"\ndef kaibun(s):\n    if s == s[::-1]:\n        return 1\n    else:\n        return 0\nq = len(s)\nd = int((q-1)/2)\nket = s[0:d]\nmat = s[int((q+1)/2):q]\nif (kaibun(s) + kaibun(ket) + kaibun(mat)) == 3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12381": {"id": 12381, "code": "s = \"atcoder\"\ndef kaibun(s):\n    if s == s[::-1]:\n        return 1\n    else:\n        return 0\nq = len(s)\nd = int((q-1)/2)\nket = s[0:d]\nmat = s[int((q+1)/2):q]\nif (kaibun(s) + kaibun(ket) + kaibun(mat)) == 3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12382": {"id": 12382, "code": "S = \"akasaka\"\nflag = True\nN = len(S)\nfor i in range(N // 2):\n    if S[i] != S[-1 * i-1]:\n        flag = False\nfor i in range((N-1)//2-1):\n    if S[i] != S[(N-1)//2-1-i]:\n        flag = False\nfor i in range((N+3)//2,N-1):\n    if S[i] != S[-1 * i-1]:\n        flag = False\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", ">", ">", "!", "!"]}, "12383": {"id": 12383, "code": "S = \"level\"\nflag = True\nN = len(S)\nfor i in range(N // 2):\n    if S[i] != S[-1 * i-1]:\n        flag = False\nfor i in range((N-1)//2-1):\n    if S[i] != S[(N-1)//2-1-i]:\n        flag = False\nfor i in range((N+3)//2,N-1):\n    if S[i] != S[-1 * i-1]:\n        flag = False\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "12384": {"id": 12384, "code": "S = \"atcoder\"\nflag = True\nN = len(S)\nfor i in range(N // 2):\n    if S[i] != S[-1 * i-1]:\n        flag = False\nfor i in range((N-1)//2-1):\n    if S[i] != S[(N-1)//2-1-i]:\n        flag = False\nfor i in range((N+3)//2,N-1):\n    if S[i] != S[-1 * i-1]:\n        flag = False\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12385": {"id": 12385, "code": "s = \"akasaka\"\nn = len(s)\nflag = 0\nif s == s[::-1]:\n    flag += 1\nss = s[:int((n-1)/2)]\nif ss == ss[::-1]:\n    flag += 1\nsss = s[int((n+3)/2)-1:]\nif sss == sss[::-1]:\n    flag += 1\nif flag == 3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12386": {"id": 12386, "code": "s = \"level\"\nn = len(s)\nflag = 0\nif s == s[::-1]:\n    flag += 1\nss = s[:int((n-1)/2)]\nif ss == ss[::-1]:\n    flag += 1\nsss = s[int((n+3)/2)-1:]\nif sss == sss[::-1]:\n    flag += 1\nif flag == 3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", "!", "!", ">"]}, "12387": {"id": 12387, "code": "s = \"atcoder\"\nn = len(s)\nflag = 0\nif s == s[::-1]:\n    flag += 1\nss = s[:int((n-1)/2)]\nif ss == ss[::-1]:\n    flag += 1\nsss = s[int((n+3)/2)-1:]\nif sss == sss[::-1]:\n    flag += 1\nif flag == 3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", ">", "!", "!", ">"]}, "12388": {"id": 12388, "code": "S = \"akasaka\"\nN = len(S)\nS1 = S[:(N-1)//2]\nS2 = S[(N+1)//2:]\nif S==S[::-1] and S1==S1[::-1] and S2==S2[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12389": {"id": 12389, "code": "S = \"level\"\nN = len(S)\nS1 = S[:(N-1)//2]\nS2 = S[(N+1)//2:]\nif S==S[::-1] and S1==S1[::-1] and S2==S2[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12390": {"id": 12390, "code": "S = \"atcoder\"\nN = len(S)\nS1 = S[:(N-1)//2]\nS2 = S[(N+1)//2:]\nif S==S[::-1] and S1==S1[::-1] and S2==S2[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12391": {"id": 12391, "code": "S1 = \"akasaka\"\nN = len(S1)\nS2 = S1[::-1]\na = S1 == S2\nS3 = S1[:int((N - 1) / 2)]\nS4 = S3[::-1]\nb = S3 == S4\nS5 = S1[int((N + 3) / 2) - 1:]\nS6 = S5[::-1]\nc = S5 == S6\nif a and b and c:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12392": {"id": 12392, "code": "S1 = \"level\"\nN = len(S1)\nS2 = S1[::-1]\na = S1 == S2\nS3 = S1[:int((N - 1) / 2)]\nS4 = S3[::-1]\nb = S3 == S4\nS5 = S1[int((N + 3) / 2) - 1:]\nS6 = S5[::-1]\nc = S5 == S6\nif a and b and c:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12393": {"id": 12393, "code": "S1 = \"atcoder\"\nN = len(S1)\nS2 = S1[::-1]\na = S1 == S2\nS3 = S1[:int((N - 1) / 2)]\nS4 = S3[::-1]\nb = S3 == S4\nS5 = S1[int((N + 3) / 2) - 1:]\nS6 = S5[::-1]\nc = S5 == S6\nif a and b and c:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12394": {"id": 12394, "code": "S = \"akasaka\"\nN=len(S)\nif S!=S[::-1]:\n    print('No')\nelse:\n    S1=S[0:(N-1)//2]\n    S2=S[(N+1)//2:N]\n    if S1==S1[::-1] and S2==S2[::-1]:\n        print('Yes')\n    else:\n        print('No')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!"]}, "12395": {"id": 12395, "code": "S = \"level\"\nN=len(S)\nif S!=S[::-1]:\n    print('No')\nelse:\n    S1=S[0:(N-1)//2]\n    S2=S[(N+1)//2:N]\n    if S1==S1[::-1] and S2==S2[::-1]:\n        print('Yes')\n    else:\n        print('No')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "12396": {"id": 12396, "code": "S = \"atcoder\"\nN=len(S)\nif S!=S[::-1]:\n    print('No')\nelse:\n    S1=S[0:(N-1)//2]\n    S2=S[(N+1)//2:N]\n    if S1==S1[::-1] and S2==S2[::-1]:\n        print('Yes')\n    else:\n        print('No')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!"]}, "12397": {"id": 12397, "code": "def resolve():\n    s = \"akasaka\"\n    if s == s[::-1]:\n        s_1 = s[:len(s)//2]\n        s_2 = s[(len(s)+1)//2:]\n        if (s_1 == s_1[::-1]) and (s_2 == s_2[::-1]):\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nresolve()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "12398": {"id": 12398, "code": "def resolve():\n    s = \"level\"\n    if s == s[::-1]:\n        s_1 = s[:len(s)//2]\n        s_2 = s[(len(s)+1)//2:]\n        if (s_1 == s_1[::-1]) and (s_2 == s_2[::-1]):\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nresolve()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "12399": {"id": 12399, "code": "def resolve():\n    s = \"atcoder\"\n    if s == s[::-1]:\n        s_1 = s[:len(s)//2]\n        s_2 = s[(len(s)+1)//2:]\n        if (s_1 == s_1[::-1]) and (s_2 == s_2[::-1]):\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nresolve()", "coverage": [">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", ">"]}, "12403": {"id": 12403, "code": "S = \"akasaka\"\nS2=S[:(len(S)-1)//2]\nS3=S[(len(S)+3)//2-1:]\nif S==S[::-1] and S2==S2[::-1] and S3==S3[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "12404": {"id": 12404, "code": "S = \"level\"\nS2=S[:(len(S)-1)//2]\nS3=S[(len(S)+3)//2-1:]\nif S==S[::-1] and S2==S2[::-1] and S3==S3[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12405": {"id": 12405, "code": "S = \"atcoder\"\nS2=S[:(len(S)-1)//2]\nS3=S[(len(S)+3)//2-1:]\nif S==S[::-1] and S2==S2[::-1] and S3==S3[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12406": {"id": 12406, "code": "S = \"akasaka\"\nN=len(S)\nif S==S[::-1] and S[0:(N-1)//2]==S[(N-1)//2-1::-1] and S[(N+3)//2-1:]==S[-1:(N+3)//2-2:-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!"]}, "12407": {"id": 12407, "code": "S = \"level\"\nN=len(S)\nif S==S[::-1] and S[0:(N-1)//2]==S[(N-1)//2-1::-1] and S[(N+3)//2-1:]==S[-1:(N+3)//2-2:-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "12408": {"id": 12408, "code": "S = \"atcoder\"\nN=len(S)\nif S==S[::-1] and S[0:(N-1)//2]==S[(N-1)//2-1::-1] and S[(N+3)//2-1:]==S[-1:(N+3)//2-2:-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "12409": {"id": 12409, "code": "s = \"akasaka\"\nn = len(s)\ndef check(r):\n    if r == r[::-1]:\n        return True\nprint(\"Yes\" if check(s) and check(s[:(n-1)//2])\n      and check(s[((n-1)//2) + 1:]) else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "12410": {"id": 12410, "code": "s = \"level\"\nn = len(s)\ndef check(r):\n    if r == r[::-1]:\n        return True\nprint(\"Yes\" if check(s) and check(s[:(n-1)//2])\n      and check(s[((n-1)//2) + 1:]) else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!"]}, "12411": {"id": 12411, "code": "s = \"atcoder\"\nn = len(s)\ndef check(r):\n    if r == r[::-1]:\n        return True\nprint(\"Yes\" if check(s) and check(s[:(n-1)//2])\n      and check(s[((n-1)//2) + 1:]) else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", "!"]}, "12412": {"id": 12412, "code": "S = \"akasaka\"\nT=S[:(len(S)-1)//2]\nU=S[(len(S)+3)//2-1:]\nif S==S[::-1]:\n    if T==T[::-1]:\n        if U==U[::-1]:\n            print('Yes')\n        else:print('No')\n    else:print('No')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!"]}, "12413": {"id": 12413, "code": "S = \"level\"\nT=S[:(len(S)-1)//2]\nU=S[(len(S)+3)//2-1:]\nif S==S[::-1]:\n    if T==T[::-1]:\n        if U==U[::-1]:\n            print('Yes')\n        else:print('No')\n    else:print('No')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">", "!"]}, "12414": {"id": 12414, "code": "S = \"atcoder\"\nT=S[:(len(S)-1)//2]\nU=S[(len(S)+3)//2-1:]\nif S==S[::-1]:\n    if T==T[::-1]:\n        if U==U[::-1]:\n            print('Yes')\n        else:print('No')\n    else:print('No')\nelse:print('No')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", ">"]}, "12415": {"id": 12415, "code": "a = \"akasaka\"\nb = len(a)\nc = (b-1)//2\nd = (b+3)//2\nif a[:(c)] == a[(d-1):]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12416": {"id": 12416, "code": "a = \"level\"\nb = len(a)\nc = (b-1)//2\nd = (b+3)//2\nif a[:(c)] == a[(d-1):]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12417": {"id": 12417, "code": "a = \"atcoder\"\nb = len(a)\nc = (b-1)//2\nd = (b+3)//2\nif a[:(c)] == a[(d-1):]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12418": {"id": 12418, "code": "s = \"akasaka\"\na=s[:len(s)//2+1//2]\nb=s[len(s)//2+1:]\nif s==s[::-1] and a==a[::-1] and b==b[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "12419": {"id": 12419, "code": "s = \"level\"\na=s[:len(s)//2+1//2]\nb=s[len(s)//2+1:]\nif s==s[::-1] and a==a[::-1] and b==b[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12420": {"id": 12420, "code": "s = \"atcoder\"\na=s[:len(s)//2+1//2]\nb=s[len(s)//2+1:]\nif s==s[::-1] and a==a[::-1] and b==b[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12421": {"id": 12421, "code": "s = \"akasaka\"\nn = len(s)\ndef func():\n    if n == 3 and s[0] == s[2]:\n        return\"Yes\"\n    else:\n        a = 0\n        for i in range(n//2):\n            if s[i] == s[n - 1 - i]:\n                a += 1\n                if a == n//2:\n                    b = 0\n                    for j in range((n-1)//4):\n                        if s[j] == s[(n-1)//2 - 1 - j]:\n                            b += 1\n                            if b == (n-1)//4:\n                                c = 0\n                                for k in range((n - (n+3)//2 + 1)//2):\n                                    if s[(n+3)//2 - 1 + k] == s[n - 1 - k]:\n                                        c += 1\n                                        if c == (n - (n+3)//2 + 1)//2:\n                                            return \"Yes\"\n                        else:\n                            return \"No\"\n            else:\n                return \"No\"\nprint(func())", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "12422": {"id": 12422, "code": "s = \"level\"\nn = len(s)\ndef func():\n    if n == 3 and s[0] == s[2]:\n        return\"Yes\"\n    else:\n        a = 0\n        for i in range(n//2):\n            if s[i] == s[n - 1 - i]:\n                a += 1\n                if a == n//2:\n                    b = 0\n                    for j in range((n-1)//4):\n                        if s[j] == s[(n-1)//2 - 1 - j]:\n                            b += 1\n                            if b == (n-1)//4:\n                                c = 0\n                                for k in range((n - (n+3)//2 + 1)//2):\n                                    if s[(n+3)//2 - 1 + k] == s[n - 1 - k]:\n                                        c += 1\n                                        if c == (n - (n+3)//2 + 1)//2:\n                                            return \"Yes\"\n                        else:\n                            return \"No\"\n            else:\n                return \"No\"\nprint(func())", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", ">"]}, "12423": {"id": 12423, "code": "s = \"atcoder\"\nn = len(s)\ndef func():\n    if n == 3 and s[0] == s[2]:\n        return\"Yes\"\n    else:\n        a = 0\n        for i in range(n//2):\n            if s[i] == s[n - 1 - i]:\n                a += 1\n                if a == n//2:\n                    b = 0\n                    for j in range((n-1)//4):\n                        if s[j] == s[(n-1)//2 - 1 - j]:\n                            b += 1\n                            if b == (n-1)//4:\n                                c = 0\n                                for k in range((n - (n+3)//2 + 1)//2):\n                                    if s[(n+3)//2 - 1 + k] == s[n - 1 - k]:\n                                        c += 1\n                                        if c == (n - (n+3)//2 + 1)//2:\n                                            return \"Yes\"\n                        else:\n                            return \"No\"\n            else:\n                return \"No\"\nprint(func())", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", ">"]}, "12424": {"id": 12424, "code": "s = \"akasaka\"\nl = len(s)\na = s[0:(l-1)//2]\nb = len(a)\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "12425": {"id": 12425, "code": "s = \"level\"\nl = len(s)\na = s[0:(l-1)//2]\nb = len(a)\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "12426": {"id": 12426, "code": "s = \"atcoder\"\nl = len(s)\na = s[0:(l-1)//2]\nb = len(a)\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "12427": {"id": 12427, "code": "S = \"akasaka\"\nn = len(S)\nconfS = S[::-1]\nflag1 = False\nflag2 = False\nflag3 = False\ns1 = S[0:int((n-1)/2)]\nconfs1 = s1[::--1]\ns2 = S[int((n+3)/2)-1:n]\nconfs2 = s2[::-1]\nif S == confS:\n  flag1 = True\nif s1 == confs1:\n  flag2 = True\nif s2 == confs2:\n  flag3 = True\nif flag1 and flag2 and flag3:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12428": {"id": 12428, "code": "S = \"level\"\nn = len(S)\nconfS = S[::-1]\nflag1 = False\nflag2 = False\nflag3 = False\ns1 = S[0:int((n-1)/2)]\nconfs1 = s1[::--1]\ns2 = S[int((n+3)/2)-1:n]\nconfs2 = s2[::-1]\nif S == confS:\n  flag1 = True\nif s1 == confs1:\n  flag2 = True\nif s2 == confs2:\n  flag3 = True\nif flag1 and flag2 and flag3:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "12429": {"id": 12429, "code": "S = \"atcoder\"\nn = len(S)\nconfS = S[::-1]\nflag1 = False\nflag2 = False\nflag3 = False\ns1 = S[0:int((n-1)/2)]\nconfs1 = s1[::--1]\ns2 = S[int((n+3)/2)-1:n]\nconfs2 = s2[::-1]\nif S == confS:\n  flag1 = True\nif s1 == confs1:\n  flag2 = True\nif s2 == confs2:\n  flag3 = True\nif flag1 and flag2 and flag3:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", "!", "!", ">"]}, "12430": {"id": 12430, "code": "import copy\na = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nif len(a) == 5:\n  print(\"No\")\n  exit()\nelse:\n  b = copy.copy(a)\n  b.reverse()\n  x = int((len(a)/2))\n  for i in range(x):\n    if a[i] != b[i]:\n      print(\"No\")\n      exit()\n  c = a[:x]\n  d = a[x+1:]\n  y = int((len(c)/2))\n  for i in range(y):\n    if c[i] != c[-(i+1)] or d[i] != d[-(i+1)]:\n      print(\"No\")\n      exit()\n  print(\"Yes\")", "coverage": [">", ">", ">", "!", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12431": {"id": 12431, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nl = len(s)\nt = s[::-1]\nif s == t and (s[:(l-1)//2] == t[(l+1)//2:]) and (s[(l+1)//2:] == t[:(l-1)//2]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "12432": {"id": 12432, "code": "s = ['l', 'e', 'v', 'e', 'l']\nl = len(s)\nt = s[::-1]\nif s == t and (s[:(l-1)//2] == t[(l+1)//2:]) and (s[(l+1)//2:] == t[:(l-1)//2]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12433": {"id": 12433, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nl = len(s)\nt = s[::-1]\nif s == t and (s[:(l-1)//2] == t[(l+1)//2:]) and (s[(l+1)//2:] == t[:(l-1)//2]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "12434": {"id": 12434, "code": "s = \"akasaka\"\nn = len(s)\nl = s[:((n-1)//2)]\nr = s[((n+3)//2) -1:]\nif s == s[::-1] and l == l[::-1] and r == r[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12435": {"id": 12435, "code": "s = \"level\"\nn = len(s)\nl = s[:((n-1)//2)]\nr = s[((n+3)//2) -1:]\nif s == s[::-1] and l == l[::-1] and r == r[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12436": {"id": 12436, "code": "s = \"atcoder\"\nn = len(s)\nl = s[:((n-1)//2)]\nr = s[((n+3)//2) -1:]\nif s == s[::-1] and l == l[::-1] and r == r[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12437": {"id": 12437, "code": "S = \"akasaka\"\nS2 = S[:(len(S)-1)//2]\nS3 = S[(len(S)+3)//2-1:]\nprint(\"Yes\" if S == S[::-1] and S2 == S2[::-1] and S3 == S3[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "12438": {"id": 12438, "code": "S = \"level\"\nS2 = S[:(len(S)-1)//2]\nS3 = S[(len(S)+3)//2-1:]\nprint(\"Yes\" if S == S[::-1] and S2 == S2[::-1] and S3 == S3[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "12439": {"id": 12439, "code": "S = \"atcoder\"\nS2 = S[:(len(S)-1)//2]\nS3 = S[(len(S)+3)//2-1:]\nprint(\"Yes\" if S == S[::-1] and S2 == S2[::-1] and S3 == S3[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "12440": {"id": 12440, "code": "def main():\n  s = \"akasaka\"\n  x=s[:int((len(s)-1)/2)]\n  y=s[int((len(s)+3)/2)-1:]\n  flg=0\n  if s !=s[::-1]:\n    flg=1\n  if x !=x[::-1]:\n    flg=1\n  if y !=y[::-1]:\n    flg=1\n  if flg==1:\n    print(\"No\")\n  else:\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", "!", ">", ">"]}, "12441": {"id": 12441, "code": "def main():\n  s = \"level\"\n  x=s[:int((len(s)-1)/2)]\n  y=s[int((len(s)+3)/2)-1:]\n  flg=0\n  if s !=s[::-1]:\n    flg=1\n  if x !=x[::-1]:\n    flg=1\n  if y !=y[::-1]:\n    flg=1\n  if flg==1:\n    print(\"No\")\n  else:\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12442": {"id": 12442, "code": "def main():\n  s = \"atcoder\"\n  x=s[:int((len(s)-1)/2)]\n  y=s[int((len(s)+3)/2)-1:]\n  flg=0\n  if s !=s[::-1]:\n    flg=1\n  if x !=x[::-1]:\n    flg=1\n  if y !=y[::-1]:\n    flg=1\n  if flg==1:\n    print(\"No\")\n  else:\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12443": {"id": 12443, "code": "s = \"akasaka\"\nn=len(s)\nx=s[:(n-1)//2]\ny=s[(n+3)//2-1:]\nans=0\nfor i in range(3):\n    if s==s[::-1]:\n        ans +=1\n    if i==0:\n        s=x\n    elif i==1:\n        s=y\nprint(\"Yes\" if ans==3 else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "12444": {"id": 12444, "code": "s = \"level\"\nn=len(s)\nx=s[:(n-1)//2]\ny=s[(n+3)//2-1:]\nans=0\nfor i in range(3):\n    if s==s[::-1]:\n        ans +=1\n    if i==0:\n        s=x\n    elif i==1:\n        s=y\nprint(\"Yes\" if ans==3 else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "12445": {"id": 12445, "code": "s = \"atcoder\"\nn=len(s)\nx=s[:(n-1)//2]\ny=s[(n+3)//2-1:]\nans=0\nfor i in range(3):\n    if s==s[::-1]:\n        ans +=1\n    if i==0:\n        s=x\n    elif i==1:\n        s=y\nprint(\"Yes\" if ans==3 else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">"]}, "12446": {"id": 12446, "code": "from sys  import stdin,stdout\nimport bisect\nimport math\ndef st():\n    return list(stdin.readline().strip())\ndef inp():\n    return int(stdin.readline())\ndef li():\n    return list(map(int,stdin.readline().split()))\ndef mp():\n    return map(int,stdin.readline().split())\ndef pr(n):\n    stdout.write(str(n)+\"\\n\")\ndef soe(limit):\n    l=[1]*(limit+1)\n    prime=[]\n    for i in range(2,limit+1):\n        if l[i]:\n            for j in range(i*i,limit+1,i):\n                l[j]=0\n    for i in range(2,limit+1):\n        if l[i]:\n            prime.append(i)\n    return prime\ndef segsoe(low,high):\n    limit=int(high**0.5)+1\n    prime=soe(limit)\n    n=high-low+1\n    l=[0]*(n+1)\n    for i in range(len(prime)):\n        lowlimit=(low//prime[i])*prime[i]\n        if lowlimit<low:\n            lowlimit+=prime[i]\n        if lowlimit==prime[i]:\n            lowlimit+=prime[i]\n        for j in range(lowlimit,high+1,prime[i]):\n            l[j-low]=1\n    for i in range(low,high+1):\n        if not l[i-low]:\n            if i!=1:\n                print(i)\ndef power(a,n):\n    r=1\n    while n:\n        if n&1:\n            r=(r*a)\n        a*=a\n        n=n>>1\n    return r\ndef solve():\n    s = \"akasaka\"\n    n=len(s)\n    a=s[:(n-1)//2]\n    b=a[::-1]\n    c=s[(n+3)//2 -1 :]\n    d=c[::-1]\n    if s==s[::-1] and a==b and c==d:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nfor _ in range(1):\n    solve()", "coverage": [">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "12447": {"id": 12447, "code": "from sys  import stdin,stdout\nimport bisect\nimport math\ndef st():\n    return list(stdin.readline().strip())\ndef inp():\n    return int(stdin.readline())\ndef li():\n    return list(map(int,stdin.readline().split()))\ndef mp():\n    return map(int,stdin.readline().split())\ndef pr(n):\n    stdout.write(str(n)+\"\\n\")\ndef soe(limit):\n    l=[1]*(limit+1)\n    prime=[]\n    for i in range(2,limit+1):\n        if l[i]:\n            for j in range(i*i,limit+1,i):\n                l[j]=0\n    for i in range(2,limit+1):\n        if l[i]:\n            prime.append(i)\n    return prime\ndef segsoe(low,high):\n    limit=int(high**0.5)+1\n    prime=soe(limit)\n    n=high-low+1\n    l=[0]*(n+1)\n    for i in range(len(prime)):\n        lowlimit=(low//prime[i])*prime[i]\n        if lowlimit<low:\n            lowlimit+=prime[i]\n        if lowlimit==prime[i]:\n            lowlimit+=prime[i]\n        for j in range(lowlimit,high+1,prime[i]):\n            l[j-low]=1\n    for i in range(low,high+1):\n        if not l[i-low]:\n            if i!=1:\n                print(i)\ndef power(a,n):\n    r=1\n    while n:\n        if n&1:\n            r=(r*a)\n        a*=a\n        n=n>>1\n    return r\ndef solve():\n    s = \"level\"\n    n=len(s)\n    a=s[:(n-1)//2]\n    b=a[::-1]\n    c=s[(n+3)//2 -1 :]\n    d=c[::-1]\n    if s==s[::-1] and a==b and c==d:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nfor _ in range(1):\n    solve()", "coverage": [">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "12448": {"id": 12448, "code": "from sys  import stdin,stdout\nimport bisect\nimport math\ndef st():\n    return list(stdin.readline().strip())\ndef inp():\n    return int(stdin.readline())\ndef li():\n    return list(map(int,stdin.readline().split()))\ndef mp():\n    return map(int,stdin.readline().split())\ndef pr(n):\n    stdout.write(str(n)+\"\\n\")\ndef soe(limit):\n    l=[1]*(limit+1)\n    prime=[]\n    for i in range(2,limit+1):\n        if l[i]:\n            for j in range(i*i,limit+1,i):\n                l[j]=0\n    for i in range(2,limit+1):\n        if l[i]:\n            prime.append(i)\n    return prime\ndef segsoe(low,high):\n    limit=int(high**0.5)+1\n    prime=soe(limit)\n    n=high-low+1\n    l=[0]*(n+1)\n    for i in range(len(prime)):\n        lowlimit=(low//prime[i])*prime[i]\n        if lowlimit<low:\n            lowlimit+=prime[i]\n        if lowlimit==prime[i]:\n            lowlimit+=prime[i]\n        for j in range(lowlimit,high+1,prime[i]):\n            l[j-low]=1\n    for i in range(low,high+1):\n        if not l[i-low]:\n            if i!=1:\n                print(i)\ndef power(a,n):\n    r=1\n    while n:\n        if n&1:\n            r=(r*a)\n        a*=a\n        n=n>>1\n    return r\ndef solve():\n    s = \"atcoder\"\n    n=len(s)\n    a=s[:(n-1)//2]\n    b=a[::-1]\n    c=s[(n+3)//2 -1 :]\n    d=c[::-1]\n    if s==s[::-1] and a==b and c==d:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nfor _ in range(1):\n    solve()", "coverage": [">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "12449": {"id": 12449, "code": "S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nN = len(S)\nif S == S[::-1] and S[:(N - 1) // 2] == S[:(N - 1) // 2][::-1] and S[(N - 1) // 2 + 1:] == S[(N - 1) // 2 + 1:][::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!"]}, "12450": {"id": 12450, "code": "S = ['l', 'e', 'v', 'e', 'l']\nN = len(S)\nif S == S[::-1] and S[:(N - 1) // 2] == S[:(N - 1) // 2][::-1] and S[(N - 1) // 2 + 1:] == S[(N - 1) // 2 + 1:][::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "12451": {"id": 12451, "code": "S = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nN = len(S)\nif S == S[::-1] and S[:(N - 1) // 2] == S[:(N - 1) // 2][::-1] and S[(N - 1) // 2 + 1:] == S[(N - 1) // 2 + 1:][::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "12452": {"id": 12452, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\nl = s[: (n - 1) // 2]\nr = s[(n + 1) // 2 :]\nif l == l[::-1] and r == r[::-1] and s == s[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "12453": {"id": 12453, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\nl = s[: (n - 1) // 2]\nr = s[(n + 1) // 2 :]\nif l == l[::-1] and r == r[::-1] and s == s[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12454": {"id": 12454, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\nl = s[: (n - 1) // 2]\nr = s[(n + 1) // 2 :]\nif l == l[::-1] and r == r[::-1] and s == s[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "12455": {"id": 12455, "code": "S = \"akasaka\"\ns = list(map(str, S))\nN = len(s)\nt = 0\nfor i in range(int((N-1)/2)):\n    if s[i] != s[N-i-1]:\n        t += 1\n        break\nfor i in range(int((N-1)/4)):\n    if s[i] != s[int((N-1)/2) - i - 1]:\n        t += 1\n        break\nif t == 0:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!"]}, "12456": {"id": 12456, "code": "S = \"level\"\ns = list(map(str, S))\nN = len(s)\nt = 0\nfor i in range(int((N-1)/2)):\n    if s[i] != s[N-i-1]:\n        t += 1\n        break\nfor i in range(int((N-1)/4)):\n    if s[i] != s[int((N-1)/2) - i - 1]:\n        t += 1\n        break\nif t == 0:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12457": {"id": 12457, "code": "S = \"atcoder\"\ns = list(map(str, S))\nN = len(s)\nt = 0\nfor i in range(int((N-1)/2)):\n    if s[i] != s[N-i-1]:\n        t += 1\n        break\nfor i in range(int((N-1)/4)):\n    if s[i] != s[int((N-1)/2) - i - 1]:\n        t += 1\n        break\nif t == 0:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12458": {"id": 12458, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn=len(s)\nif list(s[::-1])==list(s[:]) and list(s[(n-1)//2-1::-1])==list(s[:(n-1)//2]) and list(s[:(n+3)//2-2:-1])==list(s[(n+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!"]}, "12459": {"id": 12459, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn=len(s)\nif list(s[::-1])==list(s[:]) and list(s[(n-1)//2-1::-1])==list(s[:(n-1)//2]) and list(s[:(n+3)//2-2:-1])==list(s[(n+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "12460": {"id": 12460, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn=len(s)\nif list(s[::-1])==list(s[:]) and list(s[(n-1)//2-1::-1])==list(s[:(n-1)//2]) and list(s[:(n+3)//2-2:-1])==list(s[(n+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "12461": {"id": 12461, "code": "S = \"akasaka\"\nN = len(S)\nflag = True\nif S!=\"\".join(reversed(list(S))):\n    flag=False\nif S[:int((N-1)/2)]!=\"\".join(reversed(list(S[:int((N-1)/2)]))):\n    flag=False\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", "!", ">"]}, "12462": {"id": 12462, "code": "S = \"level\"\nN = len(S)\nflag = True\nif S!=\"\".join(reversed(list(S))):\n    flag=False\nif S[:int((N-1)/2)]!=\"\".join(reversed(list(S[:int((N-1)/2)]))):\n    flag=False\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">"]}, "12463": {"id": 12463, "code": "S = \"atcoder\"\nN = len(S)\nflag = True\nif S!=\"\".join(reversed(list(S))):\n    flag=False\nif S[:int((N-1)/2)]!=\"\".join(reversed(list(S[:int((N-1)/2)]))):\n    flag=False\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "12464": {"id": 12464, "code": "s = \"akasaka\"\nn=len(s)//2\nprint('Yes'if s[:n]==s[n-1::-1]==s[-n:]else'No')", "coverage": [">", ">", ">"]}, "12465": {"id": 12465, "code": "s = \"level\"\nn=len(s)//2\nprint('Yes'if s[:n]==s[n-1::-1]==s[-n:]else'No')", "coverage": [">", ">", ">"]}, "12466": {"id": 12466, "code": "s = \"atcoder\"\nn=len(s)//2\nprint('Yes'if s[:n]==s[n-1::-1]==s[-n:]else'No')", "coverage": [">", ">", ">"]}, "12467": {"id": 12467, "code": "S = \"akasaka\"\nrS=S[::-1]\nle=len(S)\ncent=int((le+1)/2)\nS1=S[0:cent-1]\nS2=S[cent:]\nrS1=S1[::-1]\nrS2=S2[::-1]\nif S==rS and S1==rS1 and S2==rS2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "12468": {"id": 12468, "code": "S = \"level\"\nrS=S[::-1]\nle=len(S)\ncent=int((le+1)/2)\nS1=S[0:cent-1]\nS2=S[cent:]\nrS1=S1[::-1]\nrS2=S2[::-1]\nif S==rS and S1==rS1 and S2==rS2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12469": {"id": 12469, "code": "S = \"atcoder\"\nrS=S[::-1]\nle=len(S)\ncent=int((le+1)/2)\nS1=S[0:cent-1]\nS2=S[cent:]\nrS1=S1[::-1]\nrS2=S2[::-1]\nif S==rS and S1==rS1 and S2==rS2:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12470": {"id": 12470, "code": "S = \"level\"\nN = len(S)\none = S[:(N-1) // 2]\ntwo = S[(N+3) // 2 - 1:]\nif S == S[::-1]:\n    if one == one[::-1]:\n        if two == two[::-1]:\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "12471": {"id": 12471, "code": "S = \"atcoder\"\nN = len(S)\none = S[:(N-1) // 2]\ntwo = S[(N+3) // 2 - 1:]\nif S == S[::-1]:\n    if one == one[::-1]:\n        if two == two[::-1]:\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "12472": {"id": 12472, "code": "def isPalindrome(st):\n    l = len(st)\n    c = l//2\n    if l%2 == 1:\n        return st[:c] == st[c+1:][::-1]\n    else:\n        return st[:c] == st[c:][::-1]\nS = \"akasaka\"\nN = len(S)\nif isPalindrome(S) and isPalindrome(S[:(N-1)//2]) and isPalindrome(S[(N+3)//2 - 1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!"]}, "12473": {"id": 12473, "code": "def isPalindrome(st):\n    l = len(st)\n    c = l//2\n    if l%2 == 1:\n        return st[:c] == st[c+1:][::-1]\n    else:\n        return st[:c] == st[c:][::-1]\nS = \"level\"\nN = len(S)\nif isPalindrome(S) and isPalindrome(S[:(N-1)//2]) and isPalindrome(S[(N+3)//2 - 1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">"]}, "12474": {"id": 12474, "code": "def isPalindrome(st):\n    l = len(st)\n    c = l//2\n    if l%2 == 1:\n        return st[:c] == st[c+1:][::-1]\n    else:\n        return st[:c] == st[c:][::-1]\nS = \"atcoder\"\nN = len(S)\nif isPalindrome(S) and isPalindrome(S[:(N-1)//2]) and isPalindrome(S[(N+3)//2 - 1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "12475": {"id": 12475, "code": "s1 = \"akasaka\"\nn1 = len(s1)\ns2 = s1[:(n1-1)//2]\nn2 = len(s2)\ns3 = s1[-(n1-1)//2:]\nn3 = len(s3)\nf1, f2, f3 = True, True, True\nfor i in range((n1-1)//2):\n    if s1[i] != s1[-i-1]:\n        f1 = False\n        break\nfor i in range(n2//2):\n    if s2[i] != s2[-i-1]:\n        f2 = False\n        break\nfor i in range(n3//2):\n    if s3[i] != s3[-i-1]:\n        f3 = False\n        break\nif f1 and f2 and f3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!"]}, "12476": {"id": 12476, "code": "s1 = \"level\"\nn1 = len(s1)\ns2 = s1[:(n1-1)//2]\nn2 = len(s2)\ns3 = s1[-(n1-1)//2:]\nn3 = len(s3)\nf1, f2, f3 = True, True, True\nfor i in range((n1-1)//2):\n    if s1[i] != s1[-i-1]:\n        f1 = False\n        break\nfor i in range(n2//2):\n    if s2[i] != s2[-i-1]:\n        f2 = False\n        break\nfor i in range(n3//2):\n    if s3[i] != s3[-i-1]:\n        f3 = False\n        break\nif f1 and f2 and f3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12477": {"id": 12477, "code": "s1 = \"atcoder\"\nn1 = len(s1)\ns2 = s1[:(n1-1)//2]\nn2 = len(s2)\ns3 = s1[-(n1-1)//2:]\nn3 = len(s3)\nf1, f2, f3 = True, True, True\nfor i in range((n1-1)//2):\n    if s1[i] != s1[-i-1]:\n        f1 = False\n        break\nfor i in range(n2//2):\n    if s2[i] != s2[-i-1]:\n        f2 = False\n        break\nfor i in range(n3//2):\n    if s3[i] != s3[-i-1]:\n        f3 = False\n        break\nif f1 and f2 and f3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "12478": {"id": 12478, "code": "S = \"akasaka\"\nm = len(list(S)) // 2\nl = m + 1\nprint('Yes' if (S == S[::-1]) & (S[:m] == S[:m:][::-1]) & (S[l:] == S[l::][::-1]) else 'No')", "coverage": [">", ">", ">", ">"]}, "12479": {"id": 12479, "code": "S = \"level\"\nm = len(list(S)) // 2\nl = m + 1\nprint('Yes' if (S == S[::-1]) & (S[:m] == S[:m:][::-1]) & (S[l:] == S[l::][::-1]) else 'No')", "coverage": [">", ">", ">", ">"]}, "12480": {"id": 12480, "code": "S = \"atcoder\"\nm = len(list(S)) // 2\nl = m + 1\nprint('Yes' if (S == S[::-1]) & (S[:m] == S[:m:][::-1]) & (S[l:] == S[l::][::-1]) else 'No')", "coverage": [">", ">", ">", ">"]}}