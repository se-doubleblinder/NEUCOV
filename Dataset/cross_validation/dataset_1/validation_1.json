{"2329": {"id": 2329, "code": "N = 2;M = 1\na = N*(N-1) // 2\nb = M*(M-1) // 2\nprint(a+b)", "coverage": [">", ">", ">", ">"]}, "2330": {"id": 2330, "code": "N = 4;M = 3\na = N*(N-1) // 2\nb = M*(M-1) // 2\nprint(a+b)", "coverage": [">", ">", ">", ">"]}, "2331": {"id": 2331, "code": "N = 1;M = 1\na = N*(N-1) // 2\nb = M*(M-1) // 2\nprint(a+b)", "coverage": [">", ">", ">", ">"]}, "2332": {"id": 2332, "code": "N = 13;M = 3\na = N*(N-1) // 2\nb = M*(M-1) // 2\nprint(a+b)", "coverage": [">", ">", ">", ">"]}, "2333": {"id": 2333, "code": "N = 0;M = 3\na = N*(N-1) // 2\nb = M*(M-1) // 2\nprint(a+b)", "coverage": [">", ">", ">", ">"]}, "2334": {"id": 2334, "code": "N = 2;M = 1\nprint(int(N*max(N-1, 0)/2) + int(M*max(M-1, 0)/2))", "coverage": [">", ">"]}, "2335": {"id": 2335, "code": "N = 4;M = 3\nprint(int(N*max(N-1, 0)/2) + int(M*max(M-1, 0)/2))", "coverage": [">", ">"]}, "2336": {"id": 2336, "code": "N = 1;M = 1\nprint(int(N*max(N-1, 0)/2) + int(M*max(M-1, 0)/2))", "coverage": [">", ">"]}, "2337": {"id": 2337, "code": "N = 13;M = 3\nprint(int(N*max(N-1, 0)/2) + int(M*max(M-1, 0)/2))", "coverage": [">", ">"]}, "2338": {"id": 2338, "code": "N = 0;M = 3\nprint(int(N*max(N-1, 0)/2) + int(M*max(M-1, 0)/2))", "coverage": [">", ">"]}, "2339": {"id": 2339, "code": "from math import factorial\nN = 2;M = 1\nif N <= 1:\n    combN = 0\nelse:\n    combN = factorial(N) // (factorial(N - 2) * factorial(2))\nif M <= 1:\n    combM = 0\nelse:\n    combM = factorial(M) // (factorial(M - 2) * factorial(2))\nprint(combN + combM)", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "2340": {"id": 2340, "code": "from math import factorial\nN = 4;M = 3\nif N <= 1:\n    combN = 0\nelse:\n    combN = factorial(N) // (factorial(N - 2) * factorial(2))\nif M <= 1:\n    combM = 0\nelse:\n    combM = factorial(M) // (factorial(M - 2) * factorial(2))\nprint(combN + combM)", "coverage": [">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "2341": {"id": 2341, "code": "from math import factorial\nN = 1;M = 1\nif N <= 1:\n    combN = 0\nelse:\n    combN = factorial(N) // (factorial(N - 2) * factorial(2))\nif M <= 1:\n    combM = 0\nelse:\n    combM = factorial(M) // (factorial(M - 2) * factorial(2))\nprint(combN + combM)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "2342": {"id": 2342, "code": "from math import factorial\nN = 13;M = 3\nif N <= 1:\n    combN = 0\nelse:\n    combN = factorial(N) // (factorial(N - 2) * factorial(2))\nif M <= 1:\n    combM = 0\nelse:\n    combM = factorial(M) // (factorial(M - 2) * factorial(2))\nprint(combN + combM)", "coverage": [">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "2343": {"id": 2343, "code": "from math import factorial\nN = 0;M = 3\nif N <= 1:\n    combN = 0\nelse:\n    combN = factorial(N) // (factorial(N - 2) * factorial(2))\nif M <= 1:\n    combM = 0\nelse:\n    combM = factorial(M) // (factorial(M - 2) * factorial(2))\nprint(combN + combM)", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">"]}, "2344": {"id": 2344, "code": "N = 2;M = 1\nres = 0\nif N >= 2:\n  res += N * (N - 1) / 2\nif M >= 2:\n  res += M * (M - 1) / 2\nprint(int(res))", "coverage": [">", ">", ">", ">", ">", "!", ">"]}, "2345": {"id": 2345, "code": "N = 4;M = 3\nres = 0\nif N >= 2:\n  res += N * (N - 1) / 2\nif M >= 2:\n  res += M * (M - 1) / 2\nprint(int(res))", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "2346": {"id": 2346, "code": "N = 1;M = 1\nres = 0\nif N >= 2:\n  res += N * (N - 1) / 2\nif M >= 2:\n  res += M * (M - 1) / 2\nprint(int(res))", "coverage": [">", ">", ">", "!", ">", "!", ">"]}, "2347": {"id": 2347, "code": "N = 13;M = 3\nres = 0\nif N >= 2:\n  res += N * (N - 1) / 2\nif M >= 2:\n  res += M * (M - 1) / 2\nprint(int(res))", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "2348": {"id": 2348, "code": "N = 0;M = 3\nres = 0\nif N >= 2:\n  res += N * (N - 1) / 2\nif M >= 2:\n  res += M * (M - 1) / 2\nprint(int(res))", "coverage": [">", ">", ">", "!", ">", ">", ">"]}, "2349": {"id": 2349, "code": "N = 2;W = 1\ntotal1 = 0\ntotal2 = 0\nif N>1:\n  total1 = N*(N-1)//2\nelse:\n  total1 = 0\nif W>=2:\n  total2 = W*(W-1)//2\nelse:\n  total2 = 0\nprint(total1+total2)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">"]}, "2350": {"id": 2350, "code": "N = 4;W = 3\ntotal1 = 0\ntotal2 = 0\nif N>1:\n  total1 = N*(N-1)//2\nelse:\n  total1 = 0\nif W>=2:\n  total2 = W*(W-1)//2\nelse:\n  total2 = 0\nprint(total1+total2)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "2351": {"id": 2351, "code": "N = 1;W = 1\ntotal1 = 0\ntotal2 = 0\nif N>1:\n  total1 = N*(N-1)//2\nelse:\n  total1 = 0\nif W>=2:\n  total2 = W*(W-1)//2\nelse:\n  total2 = 0\nprint(total1+total2)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "2352": {"id": 2352, "code": "N = 13;W = 3\ntotal1 = 0\ntotal2 = 0\nif N>1:\n  total1 = N*(N-1)//2\nelse:\n  total1 = 0\nif W>=2:\n  total2 = W*(W-1)//2\nelse:\n  total2 = 0\nprint(total1+total2)", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "2353": {"id": 2353, "code": "N = 0;W = 3\ntotal1 = 0\ntotal2 = 0\nif N>1:\n  total1 = N*(N-1)//2\nelse:\n  total1 = 0\nif W>=2:\n  total2 = W*(W-1)//2\nelse:\n  total2 = 0\nprint(total1+total2)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "2354": {"id": 2354, "code": "import sys\nimport math\nN = 2;M = 1\nif not ( 0 <= N <= 100 and 0 <= M <= 100 ): sys.exit()\nif not ( 2 <= N+M ): sys.exit()\nif not ( isinstance(N,int) and isinstance(M,int) ): sys.exit()\nans = 0\nif N >= 2:\n    ans += math.factorial(N) // (math.factorial(N - 2) * math.factorial(2))\nif M >= 2:\n    ans += math.factorial(M) // (math.factorial(M - 2) * math.factorial(2))\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "2355": {"id": 2355, "code": "import sys\nimport math\nN = 4;M = 3\nif not ( 0 <= N <= 100 and 0 <= M <= 100 ): sys.exit()\nif not ( 2 <= N+M ): sys.exit()\nif not ( isinstance(N,int) and isinstance(M,int) ): sys.exit()\nans = 0\nif N >= 2:\n    ans += math.factorial(N) // (math.factorial(N - 2) * math.factorial(2))\nif M >= 2:\n    ans += math.factorial(M) // (math.factorial(M - 2) * math.factorial(2))\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "2356": {"id": 2356, "code": "import sys\nimport math\nN = 1;M = 1\nif not ( 0 <= N <= 100 and 0 <= M <= 100 ): sys.exit()\nif not ( 2 <= N+M ): sys.exit()\nif not ( isinstance(N,int) and isinstance(M,int) ): sys.exit()\nans = 0\nif N >= 2:\n    ans += math.factorial(N) // (math.factorial(N - 2) * math.factorial(2))\nif M >= 2:\n    ans += math.factorial(M) // (math.factorial(M - 2) * math.factorial(2))\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">"]}, "2357": {"id": 2357, "code": "import sys\nimport math\nN = 13;M = 3\nif not ( 0 <= N <= 100 and 0 <= M <= 100 ): sys.exit()\nif not ( 2 <= N+M ): sys.exit()\nif not ( isinstance(N,int) and isinstance(M,int) ): sys.exit()\nans = 0\nif N >= 2:\n    ans += math.factorial(N) // (math.factorial(N - 2) * math.factorial(2))\nif M >= 2:\n    ans += math.factorial(M) // (math.factorial(M - 2) * math.factorial(2))\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "2358": {"id": 2358, "code": "import sys\nimport math\nN = 0;M = 3\nif not ( 0 <= N <= 100 and 0 <= M <= 100 ): sys.exit()\nif not ( 2 <= N+M ): sys.exit()\nif not ( isinstance(N,int) and isinstance(M,int) ): sys.exit()\nans = 0\nif N >= 2:\n    ans += math.factorial(N) // (math.factorial(N - 2) * math.factorial(2))\nif M >= 2:\n    ans += math.factorial(M) // (math.factorial(M - 2) * math.factorial(2))\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"]}, "2359": {"id": 2359, "code": "import math\ndef combi(n,r):\n  ans = math.factorial(n) // (math.factorial(n-r) * math.factorial(r))\n  return ans\nN = 2;M = 1\nans = 0\nif N > 1:\n  ans += combi(N,2)\nif M > 1:\n  ans += combi(M,2)\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "2360": {"id": 2360, "code": "import math\ndef combi(n,r):\n  ans = math.factorial(n) // (math.factorial(n-r) * math.factorial(r))\n  return ans\nN = 4;M = 3\nans = 0\nif N > 1:\n  ans += combi(N,2)\nif M > 1:\n  ans += combi(M,2)\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "2361": {"id": 2361, "code": "import math\ndef combi(n,r):\n  ans = math.factorial(n) // (math.factorial(n-r) * math.factorial(r))\n  return ans\nN = 1;M = 1\nans = 0\nif N > 1:\n  ans += combi(N,2)\nif M > 1:\n  ans += combi(M,2)\nprint(ans)", "coverage": [">", ">", "!", "!", ">", ">", ">", "!", ">", "!", ">"]}, "2362": {"id": 2362, "code": "import math\ndef combi(n,r):\n  ans = math.factorial(n) // (math.factorial(n-r) * math.factorial(r))\n  return ans\nN = 13;M = 3\nans = 0\nif N > 1:\n  ans += combi(N,2)\nif M > 1:\n  ans += combi(M,2)\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "2363": {"id": 2363, "code": "import math\ndef combi(n,r):\n  ans = math.factorial(n) // (math.factorial(n-r) * math.factorial(r))\n  return ans\nN = 0;M = 3\nans = 0\nif N > 1:\n  ans += combi(N,2)\nif M > 1:\n  ans += combi(M,2)\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"]}, "2364": {"id": 2364, "code": "a = 2;b = 1\nc = a * (a-1)/2\nd = b*(b-1)/2\nres = int(c+d)\nprint(res)", "coverage": [">", ">", ">", ">", ">"]}, "2365": {"id": 2365, "code": "a = 4;b = 3\nc = a * (a-1)/2\nd = b*(b-1)/2\nres = int(c+d)\nprint(res)", "coverage": [">", ">", ">", ">", ">"]}, "2366": {"id": 2366, "code": "a = 1;b = 1\nc = a * (a-1)/2\nd = b*(b-1)/2\nres = int(c+d)\nprint(res)", "coverage": [">", ">", ">", ">", ">"]}, "2367": {"id": 2367, "code": "a = 13;b = 3\nc = a * (a-1)/2\nd = b*(b-1)/2\nres = int(c+d)\nprint(res)", "coverage": [">", ">", ">", ">", ">"]}, "2368": {"id": 2368, "code": "a = 0;b = 3\nc = a * (a-1)/2\nd = b*(b-1)/2\nres = int(c+d)\nprint(res)", "coverage": [">", ">", ">", ">", ">"]}, "2369": {"id": 2369, "code": "n = 2;m = 1\nans = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2370": {"id": 2370, "code": "n = 4;m = 3\nans = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2371": {"id": 2371, "code": "n = 1;m = 1\nans = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2372": {"id": 2372, "code": "n = 13;m = 3\nans = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2373": {"id": 2373, "code": "n = 0;m = 3\nans = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2374": {"id": 2374, "code": "n = 2;m = 1\nod_od = n*(n-1)/2\nev_ev = m*(m-1)/2\nprint(int(od_od+ev_ev))", "coverage": [">", ">", ">", ">"]}, "2375": {"id": 2375, "code": "n = 4;m = 3\nod_od = n*(n-1)/2\nev_ev = m*(m-1)/2\nprint(int(od_od+ev_ev))", "coverage": [">", ">", ">", ">"]}, "2376": {"id": 2376, "code": "n = 1;m = 1\nod_od = n*(n-1)/2\nev_ev = m*(m-1)/2\nprint(int(od_od+ev_ev))", "coverage": [">", ">", ">", ">"]}, "2377": {"id": 2377, "code": "n = 13;m = 3\nod_od = n*(n-1)/2\nev_ev = m*(m-1)/2\nprint(int(od_od+ev_ev))", "coverage": [">", ">", ">", ">"]}, "2378": {"id": 2378, "code": "n = 0;m = 3\nod_od = n*(n-1)/2\nev_ev = m*(m-1)/2\nprint(int(od_od+ev_ev))", "coverage": [">", ">", ">", ">"]}, "2384": {"id": 2384, "code": "n = 2;m = 1\ntot = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(tot)", "coverage": [">", ">", ">"]}, "2385": {"id": 2385, "code": "n = 4;m = 3\ntot = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(tot)", "coverage": [">", ">", ">"]}, "2386": {"id": 2386, "code": "n = 1;m = 1\ntot = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(tot)", "coverage": [">", ">", ">"]}, "2387": {"id": 2387, "code": "n = 13;m = 3\ntot = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(tot)", "coverage": [">", ">", ">"]}, "2388": {"id": 2388, "code": "n = 0;m = 3\ntot = n * (n - 1) // 2 + m * (m - 1) // 2\nprint(tot)", "coverage": [">", ">", ">"]}, "2389": {"id": 2389, "code": "n = 2;m = 1\nif n<=1:\n    n_ans=0\nelse:\n    n_ans=n*(n-1)/2\nif m<=1:\n    m_ans=0\nelse:\n    m_ans=m*(m-1)/2\nprint(int(n_ans+m_ans))", "coverage": [">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "2390": {"id": 2390, "code": "n = 4;m = 3\nif n<=1:\n    n_ans=0\nelse:\n    n_ans=n*(n-1)/2\nif m<=1:\n    m_ans=0\nelse:\n    m_ans=m*(m-1)/2\nprint(int(n_ans+m_ans))", "coverage": [">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "2391": {"id": 2391, "code": "n = 1;m = 1\nif n<=1:\n    n_ans=0\nelse:\n    n_ans=n*(n-1)/2\nif m<=1:\n    m_ans=0\nelse:\n    m_ans=m*(m-1)/2\nprint(int(n_ans+m_ans))", "coverage": [">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "2392": {"id": 2392, "code": "n = 13;m = 3\nif n<=1:\n    n_ans=0\nelse:\n    n_ans=n*(n-1)/2\nif m<=1:\n    m_ans=0\nelse:\n    m_ans=m*(m-1)/2\nprint(int(n_ans+m_ans))", "coverage": [">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "2393": {"id": 2393, "code": "n = 0;m = 3\nif n<=1:\n    n_ans=0\nelse:\n    n_ans=n*(n-1)/2\nif m<=1:\n    m_ans=0\nelse:\n    m_ans=m*(m-1)/2\nprint(int(n_ans+m_ans))", "coverage": [">", ">", ">", "!", "!", ">", "!", "!", ">", ">"]}, "2394": {"id": 2394, "code": "def main():\n    N = 2;M = 1\n    ans = N*(N-1)//2 + M*(M-1)//2\n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">"]}, "2395": {"id": 2395, "code": "def main():\n    N = 4;M = 3\n    ans = N*(N-1)//2 + M*(M-1)//2\n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">"]}, "2396": {"id": 2396, "code": "def main():\n    N = 1;M = 1\n    ans = N*(N-1)//2 + M*(M-1)//2\n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">"]}, "2397": {"id": 2397, "code": "def main():\n    N = 13;M = 3\n    ans = N*(N-1)//2 + M*(M-1)//2\n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">"]}, "2398": {"id": 2398, "code": "def main():\n    N = 0;M = 3\n    ans = N*(N-1)//2 + M*(M-1)//2\n    print(ans)\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">"]}, "2399": {"id": 2399, "code": "N = 2;M = 1\nans = (N * (N-1)) // 2 + (M * (M-1)) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2400": {"id": 2400, "code": "N = 4;M = 3\nans = (N * (N-1)) // 2 + (M * (M-1)) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2401": {"id": 2401, "code": "N = 1;M = 1\nans = (N * (N-1)) // 2 + (M * (M-1)) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2402": {"id": 2402, "code": "N = 13;M = 3\nans = (N * (N-1)) // 2 + (M * (M-1)) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2403": {"id": 2403, "code": "N = 0;M = 3\nans = (N * (N-1)) // 2 + (M * (M-1)) // 2\nprint(ans)", "coverage": [">", ">", ">"]}, "2404": {"id": 2404, "code": "n = 2;m = 1\ndef f(x):\n  return x*(x-1)//2\nprint(f(n) + f(m))", "coverage": [">", ">", ">", ">"]}, "2405": {"id": 2405, "code": "n = 4;m = 3\ndef f(x):\n  return x*(x-1)//2\nprint(f(n) + f(m))", "coverage": [">", ">", ">", ">"]}, "2406": {"id": 2406, "code": "n = 1;m = 1\ndef f(x):\n  return x*(x-1)//2\nprint(f(n) + f(m))", "coverage": [">", ">", ">", ">"]}, "2407": {"id": 2407, "code": "n = 13;m = 3\ndef f(x):\n  return x*(x-1)//2\nprint(f(n) + f(m))", "coverage": [">", ">", ">", ">"]}, "2408": {"id": 2408, "code": "n = 0;m = 3\ndef f(x):\n  return x*(x-1)//2\nprint(f(n) + f(m))", "coverage": [">", ">", ">", ">"]}, "2409": {"id": 2409, "code": "n = 2;m = 1\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))", "coverage": [">", ">", ">", "!", ">", "!", ">", ">", "!", "!", ">"]}, "2410": {"id": 2410, "code": "n = 4;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">"]}, "2411": {"id": 2411, "code": "n = 1;m = 1\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))", "coverage": [">", ">", ">", "!", ">", "!", ">", "!", "!", ">", ">"]}, "2412": {"id": 2412, "code": "n = 13;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">"]}, "2413": {"id": 2413, "code": "n = 0;m = 3\nimport math \nif n>=2 and m>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2) + math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif n<2 and m>=2 :\n  ans =  math.factorial(m)/math.factorial(m-2)/math.factorial(2)\nelif m<2 and n>=2:\n  ans = math.factorial(n)/math.factorial(n-2)/math.factorial(2)\nelse:\n  ans = 0\nprint(int(ans))", "coverage": [">", ">", ">", "!", ">", ">", "!", "!", "!", "!", ">"]}, "2414": {"id": 2414, "code": "n = 2;m = 1\nx = n*(n-1)//2\nr = m*(m-1)//2\nprint(x+r)", "coverage": [">", ">", ">", ">"]}, "2415": {"id": 2415, "code": "n = 4;m = 3\nx = n*(n-1)//2\nr = m*(m-1)//2\nprint(x+r)", "coverage": [">", ">", ">", ">"]}, "2416": {"id": 2416, "code": "n = 1;m = 1\nx = n*(n-1)//2\nr = m*(m-1)//2\nprint(x+r)", "coverage": [">", ">", ">", ">"]}, "2417": {"id": 2417, "code": "n = 13;m = 3\nx = n*(n-1)//2\nr = m*(m-1)//2\nprint(x+r)", "coverage": [">", ">", ">", ">"]}, "2418": {"id": 2418, "code": "n = 0;m = 3\nx = n*(n-1)//2\nr = m*(m-1)//2\nprint(x+r)", "coverage": [">", ">", ">", ">"]}, "2419": {"id": 2419, "code": "import math\ndef calc_combi(n,m):\n    if n<=1:\n        return 0\n    return math.factorial(n)/(math.factorial(m)*(math.factorial(n-m)))\nn = 2;m = 1\nans=int(calc_combi(n,2)+calc_combi(m,2))\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "2420": {"id": 2420, "code": "import math\ndef calc_combi(n,m):\n    if n<=1:\n        return 0\n    return math.factorial(n)/(math.factorial(m)*(math.factorial(n-m)))\nn = 4;m = 3\nans=int(calc_combi(n,2)+calc_combi(m,2))\nprint(ans)", "coverage": [">", ">", ">", "!", ">", ">", ">", ">"]}, "2421": {"id": 2421, "code": "import math\ndef calc_combi(n,m):\n    if n<=1:\n        return 0\n    return math.factorial(n)/(math.factorial(m)*(math.factorial(n-m)))\nn = 1;m = 1\nans=int(calc_combi(n,2)+calc_combi(m,2))\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">"]}, "2422": {"id": 2422, "code": "import math\ndef calc_combi(n,m):\n    if n<=1:\n        return 0\n    return math.factorial(n)/(math.factorial(m)*(math.factorial(n-m)))\nn = 13;m = 3\nans=int(calc_combi(n,2)+calc_combi(m,2))\nprint(ans)", "coverage": [">", ">", ">", "!", ">", ">", ">", ">"]}, "2423": {"id": 2423, "code": "import math\ndef calc_combi(n,m):\n    if n<=1:\n        return 0\n    return math.factorial(n)/(math.factorial(m)*(math.factorial(n-m)))\nn = 0;m = 3\nans=int(calc_combi(n,2)+calc_combi(m,2))\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "2424": {"id": 2424, "code": "import math\nn = 2;m = 1\nnC2 = math.factorial(n) // (math.factorial(2) * math.factorial(n - 2)) if n >= 2 else 0\nmC2 = math.factorial(m) // (math.factorial(2) * math.factorial(m - 2)) if m >= 2 else 0\nprint(nC2 + mC2)", "coverage": [">", ">", ">", ">", ">"]}, "2425": {"id": 2425, "code": "import math\nn = 4;m = 3\nnC2 = math.factorial(n) // (math.factorial(2) * math.factorial(n - 2)) if n >= 2 else 0\nmC2 = math.factorial(m) // (math.factorial(2) * math.factorial(m - 2)) if m >= 2 else 0\nprint(nC2 + mC2)", "coverage": [">", ">", ">", ">", ">"]}, "2426": {"id": 2426, "code": "import math\nn = 1;m = 1\nnC2 = math.factorial(n) // (math.factorial(2) * math.factorial(n - 2)) if n >= 2 else 0\nmC2 = math.factorial(m) // (math.factorial(2) * math.factorial(m - 2)) if m >= 2 else 0\nprint(nC2 + mC2)", "coverage": [">", ">", ">", ">", ">"]}, "2427": {"id": 2427, "code": "import math\nn = 13;m = 3\nnC2 = math.factorial(n) // (math.factorial(2) * math.factorial(n - 2)) if n >= 2 else 0\nmC2 = math.factorial(m) // (math.factorial(2) * math.factorial(m - 2)) if m >= 2 else 0\nprint(nC2 + mC2)", "coverage": [">", ">", ">", ">", ">"]}, "2428": {"id": 2428, "code": "import math\nn = 0;m = 3\nnC2 = math.factorial(n) // (math.factorial(2) * math.factorial(n - 2)) if n >= 2 else 0\nmC2 = math.factorial(m) // (math.factorial(2) * math.factorial(m - 2)) if m >= 2 else 0\nprint(nC2 + mC2)", "coverage": [">", ">", ">", ">", ">"]}, "2429": {"id": 2429, "code": "even = 2;odd = 1\nprint(int(even * (even-1)/2 + odd * (odd-1)/2))", "coverage": [">", ">"]}, "2430": {"id": 2430, "code": "even = 4;odd = 3\nprint(int(even * (even-1)/2 + odd * (odd-1)/2))", "coverage": [">", ">"]}, "2431": {"id": 2431, "code": "even = 1;odd = 1\nprint(int(even * (even-1)/2 + odd * (odd-1)/2))", "coverage": [">", ">"]}, "2432": {"id": 2432, "code": "even = 13;odd = 3\nprint(int(even * (even-1)/2 + odd * (odd-1)/2))", "coverage": [">", ">"]}, "2433": {"id": 2433, "code": "even = 0;odd = 3\nprint(int(even * (even-1)/2 + odd * (odd-1)/2))", "coverage": [">", ">"]}, "2434": {"id": 2434, "code": "N = 2;M = 1\na = N*(N-1)\nb = M*(M-1)\nprint(int((a+b)/2))", "coverage": [">", ">", ">", ">"]}, "2435": {"id": 2435, "code": "N = 4;M = 3\na = N*(N-1)\nb = M*(M-1)\nprint(int((a+b)/2))", "coverage": [">", ">", ">", ">"]}, "2436": {"id": 2436, "code": "N = 1;M = 1\na = N*(N-1)\nb = M*(M-1)\nprint(int((a+b)/2))", "coverage": [">", ">", ">", ">"]}, "2437": {"id": 2437, "code": "N = 13;M = 3\na = N*(N-1)\nb = M*(M-1)\nprint(int((a+b)/2))", "coverage": [">", ">", ">", ">"]}, "2438": {"id": 2438, "code": "N = 0;M = 3\na = N*(N-1)\nb = M*(M-1)\nprint(int((a+b)/2))", "coverage": [">", ">", ">", ">"]}, "2439": {"id": 2439, "code": "if __name__ == '__main__':\n    n = 2;m = 1\n    eve = (n*(n-1)) // 2\n    odd = (m*(m-1)) // 2\n    print(eve+odd)", "coverage": [">", ">", ">", ">", ">"]}, "2440": {"id": 2440, "code": "if __name__ == '__main__':\n    n = 4;m = 3\n    eve = (n*(n-1)) // 2\n    odd = (m*(m-1)) // 2\n    print(eve+odd)", "coverage": [">", ">", ">", ">", ">"]}, "2441": {"id": 2441, "code": "if __name__ == '__main__':\n    n = 1;m = 1\n    eve = (n*(n-1)) // 2\n    odd = (m*(m-1)) // 2\n    print(eve+odd)", "coverage": [">", ">", ">", ">", ">"]}, "2442": {"id": 2442, "code": "if __name__ == '__main__':\n    n = 13;m = 3\n    eve = (n*(n-1)) // 2\n    odd = (m*(m-1)) // 2\n    print(eve+odd)", "coverage": [">", ">", ">", ">", ">"]}, "2443": {"id": 2443, "code": "if __name__ == '__main__':\n    n = 0;m = 3\n    eve = (n*(n-1)) // 2\n    odd = (m*(m-1)) // 2\n    print(eve+odd)", "coverage": [">", ">", ">", ">", ">"]}, "2444": {"id": 2444, "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 4;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", ">"]}, "2445": {"id": 2445, "code": "import math\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nN = 13;M = 3\nif N==0 or N==1:\n    if M==0 or M==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(M, 2))\n        exit(0\n        )\nif M==0 or M==1:\n    if N==0 or N==1:\n        print(0)\n        exit(0)\n    else:\n        print(combinations_count(N, 2))\n        exit(0)\nprint(combinations_count(N, 2)+combinations_count(M, 2))", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", ">"]}, "2446": {"id": 2446, "code": "import math\nn = 2;m = 1\nt = 0\ntt = 0\ndef com(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nif n > 1:\n    t = com(n,2)\nif m > 1:\n    tt = com(m,2)\nprint(t+tt)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "2447": {"id": 2447, "code": "import math\nn = 4;m = 3\nt = 0\ntt = 0\ndef com(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nif n > 1:\n    t = com(n,2)\nif m > 1:\n    tt = com(m,2)\nprint(t+tt)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "2448": {"id": 2448, "code": "import math\nn = 1;m = 1\nt = 0\ntt = 0\ndef com(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nif n > 1:\n    t = com(n,2)\nif m > 1:\n    tt = com(m,2)\nprint(t+tt)", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">"]}, "2449": {"id": 2449, "code": "import math\nn = 13;m = 3\nt = 0\ntt = 0\ndef com(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nif n > 1:\n    t = com(n,2)\nif m > 1:\n    tt = com(m,2)\nprint(t+tt)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "2450": {"id": 2450, "code": "import math\nn = 0;m = 3\nt = 0\ntt = 0\ndef com(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nif n > 1:\n    t = com(n,2)\nif m > 1:\n    tt = com(m,2)\nprint(t+tt)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">"]}, "2451": {"id": 2451, "code": "x = 2;y = 1\na=x*(x-1)//2\nb=y*(y-1)//2\nprint(a+b)", "coverage": [">", ">", ">", ">"]}, "2452": {"id": 2452, "code": "x = 4;y = 3\na=x*(x-1)//2\nb=y*(y-1)//2\nprint(a+b)", "coverage": [">", ">", ">", ">"]}, "2453": {"id": 2453, "code": "x = 1;y = 1\na=x*(x-1)//2\nb=y*(y-1)//2\nprint(a+b)", "coverage": [">", ">", ">", ">"]}, "10690": {"id": 10690, "code": "import sys\nN = 6;M = 0\nac = [0] * N\nwa = [0] * N\nfor _ in range(M):\n    p, s = sys.stdin.readline().split()\n    p = int(p) - 1\n    if s == \"AC\":\n        ac[p] = 1\n    else:\n        if not ac[p]:\n            wa[p] += 1\nacnum = sum(ac)\nwanum = sum([c for i, c in enumerate(wa) if ac[i] == 1])\nprint(acnum, wanum)", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", ">", ">"]}, "10691": {"id": 10691, "code": "S = \"akasaka\"\nN = len(S)\nreverse = S[::-1]\nfirst = S[:(N - 1) // 2]\nsecond = S[(N + 1) // 2:]\nif S == reverse and first == second:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10692": {"id": 10692, "code": "S = \"level\"\nN = len(S)\nreverse = S[::-1]\nfirst = S[:(N - 1) // 2]\nsecond = S[(N + 1) // 2:]\nif S == reverse and first == second:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10693": {"id": 10693, "code": "S = \"atcoder\"\nN = len(S)\nreverse = S[::-1]\nfirst = S[:(N - 1) // 2]\nsecond = S[(N + 1) // 2:]\nif S == reverse and first == second:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10694": {"id": 10694, "code": "s = \"akasaka\"\nn = len(s)\ndef palindrome(s):\n    ret = True\n    for i in range(len(s)//2):\n        if s[i] != s[-i-1]:\n            ret = False\n            break\n    return ret\ncheck_1 = palindrome(s)\ncheck_2 = palindrome(s[:(n)//2])\ncheck_3 = palindrome(s[(n+2)//2:])\nif check_1 and check_2 and check_3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10695": {"id": 10695, "code": "s = \"level\"\nn = len(s)\ndef palindrome(s):\n    ret = True\n    for i in range(len(s)//2):\n        if s[i] != s[-i-1]:\n            ret = False\n            break\n    return ret\ncheck_1 = palindrome(s)\ncheck_2 = palindrome(s[:(n)//2])\ncheck_3 = palindrome(s[(n+2)//2:])\nif check_1 and check_2 and check_3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10696": {"id": 10696, "code": "s = \"atcoder\"\nn = len(s)\ndef palindrome(s):\n    ret = True\n    for i in range(len(s)//2):\n        if s[i] != s[-i-1]:\n            ret = False\n            break\n    return ret\ncheck_1 = palindrome(s)\ncheck_2 = palindrome(s[:(n)//2])\ncheck_3 = palindrome(s[(n+2)//2:])\nif check_1 and check_2 and check_3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10697": {"id": 10697, "code": "def kaibun(lst):\n    k = len(lst)//2 + len(lst)%2\n    for i in range(1,k+1):\n        if lst[i-1] != lst[-i]:\n            return False\n    return True\nS = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nN = len(S)\nif kaibun(S) and kaibun(S[:(N-1)//2]) and kaibun(S[(N+3)//2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "10698": {"id": 10698, "code": "def kaibun(lst):\n    k = len(lst)//2 + len(lst)%2\n    for i in range(1,k+1):\n        if lst[i-1] != lst[-i]:\n            return False\n    return True\nS = ['l', 'e', 'v', 'e', 'l']\nN = len(S)\nif kaibun(S) and kaibun(S[:(N-1)//2]) and kaibun(S[(N+3)//2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10699": {"id": 10699, "code": "def kaibun(lst):\n    k = len(lst)//2 + len(lst)%2\n    for i in range(1,k+1):\n        if lst[i-1] != lst[-i]:\n            return False\n    return True\nS = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nN = len(S)\nif kaibun(S) and kaibun(S[:(N-1)//2]) and kaibun(S[(N+3)//2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "10700": {"id": 10700, "code": "s = \"akasaka\"\nn=len(s)\nx=s[0:(n-1)//2]\ny=s[(n+3)//2-1:n]\nif x==x[::-1] and y==y[::-1] and s==s[::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10701": {"id": 10701, "code": "s = \"level\"\nn=len(s)\nx=s[0:(n-1)//2]\ny=s[(n+3)//2-1:n]\nif x==x[::-1] and y==y[::-1] and s==s[::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10702": {"id": 10702, "code": "s = \"atcoder\"\nn=len(s)\nx=s[0:(n-1)//2]\ny=s[(n+3)//2-1:n]\nif x==x[::-1] and y==y[::-1] and s==s[::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10703": {"id": 10703, "code": "S = \"akasaka\"\nanswer = 'Yes'\nif S != S[::-1]:\n    answer = 'No'\nfirst = S[:len(S) // 2]\nlast = S[len(S) // 2 + 1:]\nif first != first[::-1]:\n    answer = 'No'\nif last != last[::-1]:\n    answer = 'No'\nprint(answer)", "coverage": [">", ">", ">", "!", ">", ">", ">", "!", ">", "!", ">"]}, "10704": {"id": 10704, "code": "S = \"level\"\nanswer = 'Yes'\nif S != S[::-1]:\n    answer = 'No'\nfirst = S[:len(S) // 2]\nlast = S[len(S) // 2 + 1:]\nif first != first[::-1]:\n    answer = 'No'\nif last != last[::-1]:\n    answer = 'No'\nprint(answer)", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">"]}, "10705": {"id": 10705, "code": "S = \"atcoder\"\nanswer = 'Yes'\nif S != S[::-1]:\n    answer = 'No'\nfirst = S[:len(S) // 2]\nlast = S[len(S) // 2 + 1:]\nif first != first[::-1]:\n    answer = 'No'\nif last != last[::-1]:\n    answer = 'No'\nprint(answer)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10706": {"id": 10706, "code": "S = \"akasaka\"\nn=len(S)\nSrev=''.join(list(reversed(S)))\nS1=S[0:(n-1)//2]\nS2=S[((n+1)//2):n]\nS1rev=''.join(list(reversed(S1)))\nS2rev=''.join(list(reversed(S2)))\nif S==Srev and S1==S1rev and S2==S2rev:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10707": {"id": 10707, "code": "S = \"level\"\nn=len(S)\nSrev=''.join(list(reversed(S)))\nS1=S[0:(n-1)//2]\nS2=S[((n+1)//2):n]\nS1rev=''.join(list(reversed(S1)))\nS2rev=''.join(list(reversed(S2)))\nif S==Srev and S1==S1rev and S2==S2rev:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10708": {"id": 10708, "code": "S = \"atcoder\"\nn=len(S)\nSrev=''.join(list(reversed(S)))\nS1=S[0:(n-1)//2]\nS2=S[((n+1)//2):n]\nS1rev=''.join(list(reversed(S1)))\nS2rev=''.join(list(reversed(S2)))\nif S==Srev and S1==S1rev and S2==S2rev:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10709": {"id": 10709, "code": "def main():\n    s = \"akasaka\"\n    n = len(s)\n    rule1 = True\n    rule2 = True\n    rule3 = True\n    for i in range(n):\n        if s[i] != s[n - 1 - i]:\n            rule1 = False\n            break\n    for i in range(n // 2):\n        if s[i] != s[n // 2 - 1 - i]:\n            rule2 = False\n            break\n    for i in range(n // 2):\n        if s[n // 2 + 1 + i] != s[n - 1 - i]:\n            rule3 = False\n            break\n    if rule1 and rule2 and rule3:\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", ">"]}, "10710": {"id": 10710, "code": "def main():\n    s = \"level\"\n    n = len(s)\n    rule1 = True\n    rule2 = True\n    rule3 = True\n    for i in range(n):\n        if s[i] != s[n - 1 - i]:\n            rule1 = False\n            break\n    for i in range(n // 2):\n        if s[i] != s[n // 2 - 1 - i]:\n            rule2 = False\n            break\n    for i in range(n // 2):\n        if s[n // 2 + 1 + i] != s[n - 1 - i]:\n            rule3 = False\n            break\n    if rule1 and rule2 and rule3:\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">"]}, "10711": {"id": 10711, "code": "def main():\n    s = \"atcoder\"\n    n = len(s)\n    rule1 = True\n    rule2 = True\n    rule3 = True\n    for i in range(n):\n        if s[i] != s[n - 1 - i]:\n            rule1 = False\n            break\n    for i in range(n // 2):\n        if s[i] != s[n // 2 - 1 - i]:\n            rule2 = False\n            break\n    for i in range(n // 2):\n        if s[n // 2 + 1 + i] != s[n - 1 - i]:\n            rule3 = False\n            break\n    if rule1 and rule2 and rule3:\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n    print(ans)\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">"]}, "10712": {"id": 10712, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nif s == list(reversed(s)) and s[:len(s)//2] == list(reversed(s[:len(s)//2])):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", "!", "!"]}, "10713": {"id": 10713, "code": "s = ['l', 'e', 'v', 'e', 'l']\nif s == list(reversed(s)) and s[:len(s)//2] == list(reversed(s[:len(s)//2])):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", "!", "!", ">"]}, "10714": {"id": 10714, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nif s == list(reversed(s)) and s[:len(s)//2] == list(reversed(s[:len(s)//2])):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", "!", "!", ">"]}, "10715": {"id": 10715, "code": "S = \"akasaka\"\nN = len(S)\nS1 = S[:(N - 1) // 2]\nS2 = S[(N + 3) // 2 - 1:]\ndef check(s):\n    i = 0\n    j = len(s) - 1\n    while j > i:\n        if s[j] != s[i]:\n            return False\n        j -= 1\n        i += 1\n    return True\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "10716": {"id": 10716, "code": "S = \"level\"\nN = len(S)\nS1 = S[:(N - 1) // 2]\nS2 = S[(N + 3) // 2 - 1:]\ndef check(s):\n    i = 0\n    j = len(s) - 1\n    while j > i:\n        if s[j] != s[i]:\n            return False\n        j -= 1\n        i += 1\n    return True\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10717": {"id": 10717, "code": "S = \"atcoder\"\nN = len(S)\nS1 = S[:(N - 1) // 2]\nS2 = S[(N + 3) // 2 - 1:]\ndef check(s):\n    i = 0\n    j = len(s) - 1\n    while j > i:\n        if s[j] != s[i]:\n            return False\n        j -= 1\n        i += 1\n    return True\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10718": {"id": 10718, "code": "s = \"akasaka\"\nn = len(s)\nif s != s[::-1]:\n  print(\"No\")\nelif s[0:(n-1)//2] != s[(n-1)//2-1::-1]:\n  print(\"No\")\nelif s[(n+3)//2-1:n] != s[n-1:(n+3)//2-2:-1]:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "10719": {"id": 10719, "code": "s = \"level\"\nn = len(s)\nif s != s[::-1]:\n  print(\"No\")\nelif s[0:(n-1)//2] != s[(n-1)//2-1::-1]:\n  print(\"No\")\nelif s[(n+3)//2-1:n] != s[n-1:(n+3)//2-2:-1]:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", "!", ">", ">", "!", "!", "!", "!"]}, "10720": {"id": 10720, "code": "s = \"atcoder\"\nn = len(s)\nif s != s[::-1]:\n  print(\"No\")\nelif s[0:(n-1)//2] != s[(n-1)//2-1::-1]:\n  print(\"No\")\nelif s[(n+3)//2-1:n] != s[n-1:(n+3)//2-2:-1]:\n  print(\"No\")\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "10721": {"id": 10721, "code": "def check(string):\n    if string == string[::-1]:\n        return True\n    else:\n        return False\nS = \"akasaka\"\nn = len(S)\nS1 = S[:(n-1)//2]\nS2 = S[(n+1)//2:]\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10722": {"id": 10722, "code": "def check(string):\n    if string == string[::-1]:\n        return True\n    else:\n        return False\nS = \"level\"\nn = len(S)\nS1 = S[:(n-1)//2]\nS2 = S[(n+1)//2:]\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10723": {"id": 10723, "code": "def check(string):\n    if string == string[::-1]:\n        return True\n    else:\n        return False\nS = \"atcoder\"\nn = len(S)\nS1 = S[:(n-1)//2]\nS2 = S[(n+1)//2:]\nif check(S) and check(S1) and check(S2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10724": {"id": 10724, "code": "S = \"akasaka\"\nN = len(S)\ndef is_palindrome(s):\n    return s == ''.join(list(reversed(s)))\nans = 'Yes' if is_palindrome(S) and is_palindrome(S[:(N-1)//2]) and is_palindrome(S[(N+1)//2:]) else 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "10725": {"id": 10725, "code": "S = \"level\"\nN = len(S)\ndef is_palindrome(s):\n    return s == ''.join(list(reversed(s)))\nans = 'Yes' if is_palindrome(S) and is_palindrome(S[:(N-1)//2]) and is_palindrome(S[(N+1)//2:]) else 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "10726": {"id": 10726, "code": "S = \"atcoder\"\nN = len(S)\ndef is_palindrome(s):\n    return s == ''.join(list(reversed(s)))\nans = 'Yes' if is_palindrome(S) and is_palindrome(S[:(N-1)//2]) and is_palindrome(S[(N+1)//2:]) else 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">"]}, "10727": {"id": 10727, "code": "s = \"akasaka\"\nn = len(s)\nflag = 1\nfor i in range(int(n/2)):\n    if s[i] != s[n-i-1]:\n        flag = 0\n        break\nn2 = int((n-1)/2)\nif flag == 1:\n    for i in range(int(n2/2)):\n        if s[i] != s[n2-i-1]:\n            flag = 0\n            break\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!"]}, "10728": {"id": 10728, "code": "s = \"level\"\nn = len(s)\nflag = 1\nfor i in range(int(n/2)):\n    if s[i] != s[n-i-1]:\n        flag = 0\n        break\nn2 = int((n-1)/2)\nif flag == 1:\n    for i in range(int(n2/2)):\n        if s[i] != s[n2-i-1]:\n            flag = 0\n            break\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10729": {"id": 10729, "code": "s = \"atcoder\"\nn = len(s)\nflag = 1\nfor i in range(int(n/2)):\n    if s[i] != s[n-i-1]:\n        flag = 0\n        break\nn2 = int((n-1)/2)\nif flag == 1:\n    for i in range(int(n2/2)):\n        if s[i] != s[n2-i-1]:\n            flag = 0\n            break\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", ">"]}, "10730": {"id": 10730, "code": "S = \"akasaka\"\nN=len(S)\ncon_2=S[:(N-1)//2]\ncon_3=S[((N+3)//2-1):]\nif S==S[::-1] and con_2==con_2[::-1] and con_3==con_3[::-1]:\n            print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10731": {"id": 10731, "code": "S = \"level\"\nN=len(S)\ncon_2=S[:(N-1)//2]\ncon_3=S[((N+3)//2-1):]\nif S==S[::-1] and con_2==con_2[::-1] and con_3==con_3[::-1]:\n            print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10732": {"id": 10732, "code": "S = \"atcoder\"\nN=len(S)\ncon_2=S[:(N-1)//2]\ncon_3=S[((N+3)//2-1):]\nif S==S[::-1] and con_2==con_2[::-1] and con_3==con_3[::-1]:\n            print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10733": {"id": 10733, "code": "def is_kaibun(string):\n    isk = True\n    length = len(string)\n    for i in range(length // 2):\n        if string[i] != string[length - 1 - i]:\n            isk = False\n            break\n    return isk\ns = \"akasaka\"\nlen_s = len(s)\nif is_kaibun(s[0:(len_s // 2)]) and is_kaibun(s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!"]}, "10734": {"id": 10734, "code": "def is_kaibun(string):\n    isk = True\n    length = len(string)\n    for i in range(length // 2):\n        if string[i] != string[length - 1 - i]:\n            isk = False\n            break\n    return isk\ns = \"level\"\nlen_s = len(s)\nif is_kaibun(s[0:(len_s // 2)]) and is_kaibun(s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10735": {"id": 10735, "code": "def is_kaibun(string):\n    isk = True\n    length = len(string)\n    for i in range(length // 2):\n        if string[i] != string[length - 1 - i]:\n            isk = False\n            break\n    return isk\ns = \"atcoder\"\nlen_s = len(s)\nif is_kaibun(s[0:(len_s // 2)]) and is_kaibun(s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10736": {"id": 10736, "code": "S = \"akasaka\"\nN = len(S)\ndef palindrome(string):\n  return 0 if string==string[::-1] else 1\nls1 = S[0:int((N-1)/2)]\nls2 = S[int((N+3)/2-1):N]\nif palindrome(S) == palindrome(ls1) == palindrome(ls2) == 0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10737": {"id": 10737, "code": "S = \"level\"\nN = len(S)\ndef palindrome(string):\n  return 0 if string==string[::-1] else 1\nls1 = S[0:int((N-1)/2)]\nls2 = S[int((N+3)/2-1):N]\nif palindrome(S) == palindrome(ls1) == palindrome(ls2) == 0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10738": {"id": 10738, "code": "S = \"atcoder\"\nN = len(S)\ndef palindrome(string):\n  return 0 if string==string[::-1] else 1\nls1 = S[0:int((N-1)/2)]\nls2 = S[int((N+3)/2-1):N]\nif palindrome(S) == palindrome(ls1) == palindrome(ls2) == 0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10739": {"id": 10739, "code": "s = \"akasaka\"\nans=0\nif s==s[::-1] and s[:(len(s)-1)//2]==s[(len(s)-1)//2-1::-1] and s[(len(s)+3)//2-1:]==s[:(len(s)+3)//2-2:-1]:\n    ans+=1\nprint(\"NYoe s\"[ans::2])", "coverage": [">", ">", ">", ">", ">"]}, "10740": {"id": 10740, "code": "s = \"level\"\nans=0\nif s==s[::-1] and s[:(len(s)-1)//2]==s[(len(s)-1)//2-1::-1] and s[(len(s)+3)//2-1:]==s[:(len(s)+3)//2-2:-1]:\n    ans+=1\nprint(\"NYoe s\"[ans::2])", "coverage": [">", ">", ">", "!", ">"]}, "10741": {"id": 10741, "code": "s = \"atcoder\"\nans=0\nif s==s[::-1] and s[:(len(s)-1)//2]==s[(len(s)-1)//2-1::-1] and s[(len(s)+3)//2-1:]==s[:(len(s)+3)//2-2:-1]:\n    ans+=1\nprint(\"NYoe s\"[ans::2])", "coverage": [">", ">", ">", "!", ">"]}, "10742": {"id": 10742, "code": "S = \"akasaka\"\nt=len(S)\nprint(\"YNeos\"[sum(1for i in range(t) if S[i]!=S[~i] )!=0 or S[(t+2)//2:]!=S[:(t-1)//2]::2])", "coverage": [">", ">", ">"]}, "10743": {"id": 10743, "code": "S = \"level\"\nt=len(S)\nprint(\"YNeos\"[sum(1for i in range(t) if S[i]!=S[~i] )!=0 or S[(t+2)//2:]!=S[:(t-1)//2]::2])", "coverage": [">", ">", ">"]}, "10744": {"id": 10744, "code": "S = \"atcoder\"\nt=len(S)\nprint(\"YNeos\"[sum(1for i in range(t) if S[i]!=S[~i] )!=0 or S[(t+2)//2:]!=S[:(t-1)//2]::2])", "coverage": [">", ">", ">"]}, "10745": {"id": 10745, "code": "s = \"akasaka\"\na = int((len(s)-1)/2)\nb = int((len(s)+3)/2)\nr = ''.join(reversed(s[b-1:]))\nif s[:a]== s[:a:-1] and s[b-1:]== r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10746": {"id": 10746, "code": "s = \"level\"\na = int((len(s)-1)/2)\nb = int((len(s)+3)/2)\nr = ''.join(reversed(s[b-1:]))\nif s[:a]== s[:a:-1] and s[b-1:]== r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10747": {"id": 10747, "code": "s = \"atcoder\"\na = int((len(s)-1)/2)\nb = int((len(s)+3)/2)\nr = ''.join(reversed(s[b-1:]))\nif s[:a]== s[:a:-1] and s[b-1:]== r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10748": {"id": 10748, "code": "s = \"akasaka\"\na = s[::-1]\nn = len(s)\nans = \"Yes\"\nif s != a: ans = \"No\"\nelif s[:(n-1)//2] != s[(n+3)//2-1:]: ans = \"No\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10749": {"id": 10749, "code": "s = \"level\"\na = s[::-1]\nn = len(s)\nans = \"Yes\"\nif s != a: ans = \"No\"\nelif s[:(n-1)//2] != s[(n+3)//2-1:]: ans = \"No\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10750": {"id": 10750, "code": "s = \"atcoder\"\na = s[::-1]\nn = len(s)\nans = \"Yes\"\nif s != a: ans = \"No\"\nelif s[:(n-1)//2] != s[(n+3)//2-1:]: ans = \"No\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", "!", ">"]}, "10751": {"id": 10751, "code": "S = \"akasaka\"\nS1 = S[0:((len(S) - 1) // 2)]\nS2 = S[((len(S) + 3) // 2 - 1):]\nif S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1]:\n\tprint('Yes')\nelse:\n\tprint('No')", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10752": {"id": 10752, "code": "S = \"level\"\nS1 = S[0:((len(S) - 1) // 2)]\nS2 = S[((len(S) + 3) // 2 - 1):]\nif S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1]:\n\tprint('Yes')\nelse:\n\tprint('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10753": {"id": 10753, "code": "S = \"atcoder\"\nS1 = S[0:((len(S) - 1) // 2)]\nS2 = S[((len(S) + 3) // 2 - 1):]\nif S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1]:\n\tprint('Yes')\nelse:\n\tprint('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10754": {"id": 10754, "code": "S = \"akasaka\"\nN = len(S)\nSf = S[0:(N-1)//2]\nNSf = len(Sf)\nSb = S[(N+3)//2 -1:N+1]\nNSb = len(Sb)\nans = 0\nfor i in range(N//2):\n    if S[i:i+1] != S[N-1-i:N-i]:\n        ans = 1\nfor i in range(NSf//2):\n    if Sf[i:i+1] != Sf[NSf-1-i:NSf-i]:\n        ans = 1\nfor i in range(NSb//2):\n    if Sb[i:i+1] != Sb[NSb-1-i:NSb-i]:\n        ans = 1\nprint('Yes') if ans == 0 else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", ">"]}, "10755": {"id": 10755, "code": "S = \"level\"\nN = len(S)\nSf = S[0:(N-1)//2]\nNSf = len(Sf)\nSb = S[(N+3)//2 -1:N+1]\nNSb = len(Sb)\nans = 0\nfor i in range(N//2):\n    if S[i:i+1] != S[N-1-i:N-i]:\n        ans = 1\nfor i in range(NSf//2):\n    if Sf[i:i+1] != Sf[NSf-1-i:NSf-i]:\n        ans = 1\nfor i in range(NSb//2):\n    if Sb[i:i+1] != Sb[NSb-1-i:NSb-i]:\n        ans = 1\nprint('Yes') if ans == 0 else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">"]}, "10756": {"id": 10756, "code": "S = \"atcoder\"\nN = len(S)\nSf = S[0:(N-1)//2]\nNSf = len(Sf)\nSb = S[(N+3)//2 -1:N+1]\nNSb = len(Sb)\nans = 0\nfor i in range(N//2):\n    if S[i:i+1] != S[N-1-i:N-i]:\n        ans = 1\nfor i in range(NSf//2):\n    if Sf[i:i+1] != Sf[NSf-1-i:NSf-i]:\n        ans = 1\nfor i in range(NSb//2):\n    if Sb[i:i+1] != Sb[NSb-1-i:NSb-i]:\n        ans = 1\nprint('Yes') if ans == 0 else print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10757": {"id": 10757, "code": "import sys\nS = \"akasaka\"\nN = len(S)\ndef is_palindrome(s):\n    return s == s[::-1]\nif not is_palindrome(S):\n    print('No')\n    sys.exit()\nif not is_palindrome(S[0:int((N - 1) / 2)]):\n    print('No')\n    sys.exit()\nif not is_palindrome(S[int((N + 3) / 2 - 1):]):\n    print('No')\n    sys.exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", "!", "!", ">"]}, "10758": {"id": 10758, "code": "s = \"akasaka\"\nn=len(s)\na=s[0:(n-1)//2]\nb=s[(n+3)//2-1:n]\nc=a[::-1]\nd=b[::-1]\nsr=s[::-1]\nfor i in range(n):\n    if s[i]==sr[i]:\n        pass\n    else:\n        print(\"No\")\n        exit()\nfor i in range(len(a)):\n    if a[i]==c[i]:\n        pass\n    else:\n        print(\"No\")\n        exit()\nfor i in range(len(b)):\n    if b[i]==d[i]:\n        pass\n    else:\n        print(\"No\")\n        exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", "!", "!", "!", ">", ">", ">", "!", "!", "!", ">"]}, "10759": {"id": 10759, "code": "def check(a):\n  for i in range(int(len(a)/2)):\n    if a[i]!=a[-(i+1)]:\n       return False\n  return True\nS = \"akasaka\"\nif check(S):\n  a=S[0:int(len(S)/2)]\n  b=S[int(len(S)/2)+1:len(S)]\n  if check(a) and check(b):\n    print('Yes')\n  else:\n    print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "10760": {"id": 10760, "code": "def check(a):\n  for i in range(int(len(a)/2)):\n    if a[i]!=a[-(i+1)]:\n       return False\n  return True\nS = \"level\"\nif check(S):\n  a=S[0:int(len(S)/2)]\n  b=S[int(len(S)/2)+1:len(S)]\n  if check(a) and check(b):\n    print('Yes')\n  else:\n    print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "10761": {"id": 10761, "code": "def check(a):\n  for i in range(int(len(a)/2)):\n    if a[i]!=a[-(i+1)]:\n       return False\n  return True\nS = \"atcoder\"\nif check(S):\n  a=S[0:int(len(S)/2)]\n  b=S[int(len(S)/2)+1:len(S)]\n  if check(a) and check(b):\n    print('Yes')\n  else:\n    print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10762": {"id": 10762, "code": "if __name__ == '__main__':\n    s = \"akasaka\"\n    cnt = 0\n    r = s[::-1]\n    if s == r:\n        cnt += 1\n    n = len(s)\n    n2 = (n-1)//2\n    ss = s[:n2]\n    rr = ss[::-1]\n    if ss == rr:\n        cnt += 1\n    n3 = (n+3) //2\n    sss = s[n3-1:]\n    rrr = sss[::-1]\n    if sss == rrr:\n        cnt += 1\n    if cnt==3 :\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10763": {"id": 10763, "code": "if __name__ == '__main__':\n    s = \"level\"\n    cnt = 0\n    r = s[::-1]\n    if s == r:\n        cnt += 1\n    n = len(s)\n    n2 = (n-1)//2\n    ss = s[:n2]\n    rr = ss[::-1]\n    if ss == rr:\n        cnt += 1\n    n3 = (n+3) //2\n    sss = s[n3-1:]\n    rrr = sss[::-1]\n    if sss == rrr:\n        cnt += 1\n    if cnt==3 :\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10764": {"id": 10764, "code": "if __name__ == '__main__':\n    s = \"atcoder\"\n    cnt = 0\n    r = s[::-1]\n    if s == r:\n        cnt += 1\n    n = len(s)\n    n2 = (n-1)//2\n    ss = s[:n2]\n    rr = ss[::-1]\n    if ss == rr:\n        cnt += 1\n    n3 = (n+3) //2\n    sss = s[n3-1:]\n    rrr = sss[::-1]\n    if sss == rrr:\n        cnt += 1\n    if cnt==3 :\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10765": {"id": 10765, "code": "S = \"akasaka\"\ndef is_kaibun(s):\n    return s[:len(s)//2] == s[:(len(s)-1)//2:-1]\nflg = is_kaibun(S) and is_kaibun(S[:len(S)//2]) and is_kaibun(S[:len(S)//2:-1])\nprint('Yes' if flg else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10766": {"id": 10766, "code": "S = \"level\"\ndef is_kaibun(s):\n    return s[:len(s)//2] == s[:(len(s)-1)//2:-1]\nflg = is_kaibun(S) and is_kaibun(S[:len(S)//2]) and is_kaibun(S[:len(S)//2:-1])\nprint('Yes' if flg else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10767": {"id": 10767, "code": "S = \"atcoder\"\ndef is_kaibun(s):\n    return s[:len(s)//2] == s[:(len(s)-1)//2:-1]\nflg = is_kaibun(S) and is_kaibun(S[:len(S)//2]) and is_kaibun(S[:len(S)//2:-1])\nprint('Yes' if flg else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10768": {"id": 10768, "code": "S = \"akasaka\"\nN=len(S)\nl=(N-1)//2\nfor i in range(l):\n  if S[i]!=S[N-1-i]:\n    print('No')\n    exit()\nL=S[:l]\nfor i in range(l):\n  if S[i]!=S[l-1-i]:\n    print('No')\n    exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "10769": {"id": 10769, "code": "def isPalindrome(string):\n    flag = True\n    len_string = len(string)\n    if len_string == 1:\n        return flag\n    for i in range(len_string//2):\n        if string[i] != string[-1-i]:\n            flag = False\n            break\n    return flag\nS = \"akasaka\"\nlen_s = len(S)\nfro_s = S[:len_s//2]\nif len_s % 2 == 0:\n    bak_s = S[-len_s//2:]\nelse:\n    bak_s = S[-len_s//2 + 1:]\nif isPalindrome(S) and isPalindrome(fro_s) and isPalindrome(bak_s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!"]}, "10770": {"id": 10770, "code": "def isPalindrome(string):\n    flag = True\n    len_string = len(string)\n    if len_string == 1:\n        return flag\n    for i in range(len_string//2):\n        if string[i] != string[-1-i]:\n            flag = False\n            break\n    return flag\nS = \"level\"\nlen_s = len(S)\nfro_s = S[:len_s//2]\nif len_s % 2 == 0:\n    bak_s = S[-len_s//2:]\nelse:\n    bak_s = S[-len_s//2 + 1:]\nif isPalindrome(S) and isPalindrome(fro_s) and isPalindrome(bak_s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10771": {"id": 10771, "code": "def isPalindrome(string):\n    flag = True\n    len_string = len(string)\n    if len_string == 1:\n        return flag\n    for i in range(len_string//2):\n        if string[i] != string[-1-i]:\n            flag = False\n            break\n    return flag\nS = \"atcoder\"\nlen_s = len(S)\nfro_s = S[:len_s//2]\nif len_s % 2 == 0:\n    bak_s = S[-len_s//2:]\nelse:\n    bak_s = S[-len_s//2 + 1:]\nif isPalindrome(S) and isPalindrome(fro_s) and isPalindrome(bak_s):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10772": {"id": 10772, "code": "S = \"akasaka\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:N]\nprint(\"Yes\" if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10773": {"id": 10773, "code": "S = \"level\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:N]\nprint(\"Yes\" if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10774": {"id": 10774, "code": "S = \"atcoder\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:N]\nprint(\"Yes\" if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10775": {"id": 10775, "code": "s = \"akasaka\"\ns1 = list(s[:((len(s)) - 1) // 2])\ns2 = list(s[(len(s) + 2) // 2:])\nif s1 == s2:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10776": {"id": 10776, "code": "s = \"level\"\ns1 = list(s[:((len(s)) - 1) // 2])\ns2 = list(s[(len(s) + 2) // 2:])\nif s1 == s2:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10777": {"id": 10777, "code": "s = \"atcoder\"\ns1 = list(s[:((len(s)) - 1) // 2])\ns2 = list(s[(len(s) + 2) // 2:])\nif s1 == s2:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10778": {"id": 10778, "code": "s = \"akasaka\"\nn=len(s)\np=n//2\nt=1\nfor i in range(p):\n    if s[i]==s[p-1-i]:\n        t=1\n    else:\n        t=0\n        break;\nx=1\nfor i in range(p):\n    if s[p+1+i]==s[n-1-i]:\n        x=1\n    else:\n       x=0\n       break\ny=1\nfor i in range(n):\n    if s[i]==s[n-1-i]:\n        y=1\n    else:\n       y=0\n       break\nif (t==1 and x==1 and y==1):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", ">", ">", "!", "!"]}, "10779": {"id": 10779, "code": "s = \"level\"\nn=len(s)\np=n//2\nt=1\nfor i in range(p):\n    if s[i]==s[p-1-i]:\n        t=1\n    else:\n        t=0\n        break;\nx=1\nfor i in range(p):\n    if s[p+1+i]==s[n-1-i]:\n        x=1\n    else:\n       x=0\n       break\ny=1\nfor i in range(n):\n    if s[i]==s[n-1-i]:\n        y=1\n    else:\n       y=0\n       break\nif (t==1 and x==1 and y==1):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10780": {"id": 10780, "code": "s = \"atcoder\"\nn=len(s)\np=n//2\nt=1\nfor i in range(p):\n    if s[i]==s[p-1-i]:\n        t=1\n    else:\n        t=0\n        break;\nx=1\nfor i in range(p):\n    if s[p+1+i]==s[n-1-i]:\n        x=1\n    else:\n       x=0\n       break\ny=1\nfor i in range(n):\n    if s[i]==s[n-1-i]:\n        y=1\n    else:\n       y=0\n       break\nif (t==1 and x==1 and y==1):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "10781": {"id": 10781, "code": "def main():\n    S = \"akasaka\"\n    n = len(S)\n    frontN = (n - 1) // 2\n    backN = (n + 3) // 2\n    checkFN = frontN // 2\n    checkFNW = S[0:frontN]\n    for i in range(checkFN):\n        temp = (i + 1) * -1\n        if checkFNW[i] == checkFNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    checkBN = n - backN\n    checkBNW = S[backN - 1:n]\n    for i in range(checkBN // 2):\n        temp = (i + 1) * -1\n        if checkBNW[i] == checkBNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    for i in range(n // 2):\n        temp = (i + 1) * -1\n        if S[i] == S[temp]:\n            continue\n        else:\n            print('No')\n            return\n    print('Yes')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", ">", ">"]}, "10782": {"id": 10782, "code": "def main():\n    S = \"level\"\n    n = len(S)\n    frontN = (n - 1) // 2\n    backN = (n + 3) // 2\n    checkFN = frontN // 2\n    checkFNW = S[0:frontN]\n    for i in range(checkFN):\n        temp = (i + 1) * -1\n        if checkFNW[i] == checkFNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    checkBN = n - backN\n    checkBNW = S[backN - 1:n]\n    for i in range(checkBN // 2):\n        temp = (i + 1) * -1\n        if checkBNW[i] == checkBNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    for i in range(n // 2):\n        temp = (i + 1) * -1\n        if S[i] == S[temp]:\n            continue\n        else:\n            print('No')\n            return\n    print('Yes')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10783": {"id": 10783, "code": "def main():\n    S = \"atcoder\"\n    n = len(S)\n    frontN = (n - 1) // 2\n    backN = (n + 3) // 2\n    checkFN = frontN // 2\n    checkFNW = S[0:frontN]\n    for i in range(checkFN):\n        temp = (i + 1) * -1\n        if checkFNW[i] == checkFNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    checkBN = n - backN\n    checkBNW = S[backN - 1:n]\n    for i in range(checkBN // 2):\n        temp = (i + 1) * -1\n        if checkBNW[i] == checkBNW[temp]:\n            continue\n        else:\n            print('No')\n            return\n    for i in range(n // 2):\n        temp = (i + 1) * -1\n        if S[i] == S[temp]:\n            continue\n        else:\n            print('No')\n            return\n    print('Yes')\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10784": {"id": 10784, "code": "s = \"akasaka\"\na = s[:len(s)//2]\nb = s[len(s)//2+1:]\nprint('Yes' if s == s[::-1] and a == a[::-1] and b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10785": {"id": 10785, "code": "s = \"level\"\na = s[:len(s)//2]\nb = s[len(s)//2+1:]\nprint('Yes' if s == s[::-1] and a == a[::-1] and b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10786": {"id": 10786, "code": "s = \"atcoder\"\na = s[:len(s)//2]\nb = s[len(s)//2+1:]\nprint('Yes' if s == s[::-1] and a == a[::-1] and b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10787": {"id": 10787, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\ndef ceil(a, b):\n    return (a + b - 1) // b\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\ndef solve():\n    S = \"akasaka\"\n    N = len(S)\n    if S != S[::-1]:\n        return False\n    t = S[:(N - 1) // 2]\n    if t != t[::-1]:\n        return False\n    t = S[(N + 3) // 2 - 1:]\n    if t != t[::-1]:\n        return False\n    return True\ndef main():\n    if solve():\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", "!", "!", ">", "!", "!", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">", ">"]}, "10788": {"id": 10788, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\ndef ceil(a, b):\n    return (a + b - 1) // b\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\ndef solve():\n    S = \"level\"\n    N = len(S)\n    if S != S[::-1]:\n        return False\n    t = S[:(N - 1) // 2]\n    if t != t[::-1]:\n        return False\n    t = S[(N + 3) // 2 - 1:]\n    if t != t[::-1]:\n        return False\n    return True\ndef main():\n    if solve():\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", "!", "!", ">", "!", "!", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", "!", "!", ">", ">", "!", "!", ">", ">", ">"]}, "10789": {"id": 10789, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\ndef ceil(a, b):\n    return (a + b - 1) // b\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\ndef solve():\n    S = \"atcoder\"\n    N = len(S)\n    if S != S[::-1]:\n        return False\n    t = S[:(N - 1) // 2]\n    if t != t[::-1]:\n        return False\n    t = S[(N + 3) // 2 - 1:]\n    if t != t[::-1]:\n        return False\n    return True\ndef main():\n    if solve():\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", ">", "!", "!", "!", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", ">", "!", "!", ">", ">", ">"]}, "10790": {"id": 10790, "code": "s = \"akasaka\"\nn = len(s)\ni = int((n-1)/2)\nt = s[:i]\nii = int((n+3)/2-1)\nu = s[ii:]\nif s == s[::-1] and t == t[::-1] and u == u[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10791": {"id": 10791, "code": "s = \"level\"\nn = len(s)\ni = int((n-1)/2)\nt = s[:i]\nii = int((n+3)/2-1)\nu = s[ii:]\nif s == s[::-1] and t == t[::-1] and u == u[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10792": {"id": 10792, "code": "s = \"atcoder\"\nn = len(s)\ni = int((n-1)/2)\nt = s[:i]\nii = int((n+3)/2-1)\nu = s[ii:]\nif s == s[::-1] and t == t[::-1] and u == u[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10793": {"id": 10793, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\nm = n//2\ns_f = []\ns_l = []\nfor i in range(m):\n    s_f.append(s[i])\nfor i in range(1,m + 1):\n    s_l.append(s[-i])\ns_r = list(reversed(s))\ns_f_r = list(reversed(s_f))\ns_l_r = list(reversed(s_l))\nif s_r == s:\n    if s_f_r == s_f and s_l_r == s_l:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "10794": {"id": 10794, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\nm = n//2\ns_f = []\ns_l = []\nfor i in range(m):\n    s_f.append(s[i])\nfor i in range(1,m + 1):\n    s_l.append(s[-i])\ns_r = list(reversed(s))\ns_f_r = list(reversed(s_f))\ns_l_r = list(reversed(s_l))\nif s_r == s:\n    if s_f_r == s_f and s_l_r == s_l:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "10795": {"id": 10795, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\nm = n//2\ns_f = []\ns_l = []\nfor i in range(m):\n    s_f.append(s[i])\nfor i in range(1,m + 1):\n    s_l.append(s[-i])\ns_r = list(reversed(s))\ns_f_r = list(reversed(s_f))\ns_l_r = list(reversed(s_l))\nif s_r == s:\n    if s_f_r == s_f and s_l_r == s_l:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">"]}, "10796": {"id": 10796, "code": "S = \"akasaka\"\ncount = 0\nN = len(S)\na = int((N-1)/2 )\nb = int((N +3)/2)\nif S[:a] ==S[b-1:]:\n  pass\nelse:\n  count +=1\nSS = S[b-1:]\nSSS =list(SS)\nfor i in range(len(SSS)):\n  if SSS[i] != SSS[-i-1]:\n    count +=1\nif count==0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", ">", ">", "!", "!"]}, "10797": {"id": 10797, "code": "S = \"level\"\ncount = 0\nN = len(S)\na = int((N-1)/2 )\nb = int((N +3)/2)\nif S[:a] ==S[b-1:]:\n  pass\nelse:\n  count +=1\nSS = S[b-1:]\nSSS =list(SS)\nfor i in range(len(SSS)):\n  if SSS[i] != SSS[-i-1]:\n    count +=1\nif count==0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10798": {"id": 10798, "code": "S = \"atcoder\"\ncount = 0\nN = len(S)\na = int((N-1)/2 )\nb = int((N +3)/2)\nif S[:a] ==S[b-1:]:\n  pass\nelse:\n  count +=1\nSS = S[b-1:]\nSSS =list(SS)\nfor i in range(len(SSS)):\n  if SSS[i] != SSS[-i-1]:\n    count +=1\nif count==0:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10799": {"id": 10799, "code": "S = \"akasaka\"\ni=0\nkot=[]\nfor a in S:\n    kot.append(a)\ntok=list(reversed(kot))\nfor a in range(len(kot)):\n    if kot[a]==tok[a]:\n        i=0\n    else:\n        print(\"No\")\n        i=1\n        break\nif i==0:\n    for a in range(int((len(kot)-1)/2)):\n        if kot[a]==tok[int((len(kot)-1)/2)-a-1]:\n            i=0\n        else:\n            print(\"No\")\n            i=1\n            break\nif i==0:\n        for a in range(int((len(kot)-1)/2)):\n            if kot[int((len(kot)+3)/2)+a-1]==tok[-a-1]:\n                i=0\n            else:\n                print(\"No\")\n                i=1\n                break\nif i==0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">"]}, "10800": {"id": 10800, "code": "S = \"level\"\ni=0\nkot=[]\nfor a in S:\n    kot.append(a)\ntok=list(reversed(kot))\nfor a in range(len(kot)):\n    if kot[a]==tok[a]:\n        i=0\n    else:\n        print(\"No\")\n        i=1\n        break\nif i==0:\n    for a in range(int((len(kot)-1)/2)):\n        if kot[a]==tok[int((len(kot)-1)/2)-a-1]:\n            i=0\n        else:\n            print(\"No\")\n            i=1\n            break\nif i==0:\n        for a in range(int((len(kot)-1)/2)):\n            if kot[int((len(kot)+3)/2)+a-1]==tok[-a-1]:\n                i=0\n            else:\n                print(\"No\")\n                i=1\n                break\nif i==0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!"]}, "10801": {"id": 10801, "code": "S = \"atcoder\"\ni=0\nkot=[]\nfor a in S:\n    kot.append(a)\ntok=list(reversed(kot))\nfor a in range(len(kot)):\n    if kot[a]==tok[a]:\n        i=0\n    else:\n        print(\"No\")\n        i=1\n        break\nif i==0:\n    for a in range(int((len(kot)-1)/2)):\n        if kot[a]==tok[int((len(kot)-1)/2)-a-1]:\n            i=0\n        else:\n            print(\"No\")\n            i=1\n            break\nif i==0:\n        for a in range(int((len(kot)-1)/2)):\n            if kot[int((len(kot)+3)/2)+a-1]==tok[-a-1]:\n                i=0\n            else:\n                print(\"No\")\n                i=1\n                break\nif i==0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!"]}, "10802": {"id": 10802, "code": "def kaibun(moji):\n    n = len(moji)\n    for i in range(0,int(n/2)):\n        if s[i]!=s[n-1-i]:\n            return False\n    return True\ns = \"akasaka\"\nn = len(s)\nmoji1 = int((n - 1) / 2)\nmoji2 = int((n + 3) / 2)\nif kaibun(s) and kaibun(s[:moji1]) and kaibun(s[moji2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10803": {"id": 10803, "code": "def kaibun(moji):\n    n = len(moji)\n    for i in range(0,int(n/2)):\n        if s[i]!=s[n-1-i]:\n            return False\n    return True\ns = \"level\"\nn = len(s)\nmoji1 = int((n - 1) / 2)\nmoji2 = int((n + 3) / 2)\nif kaibun(s) and kaibun(s[:moji1]) and kaibun(s[moji2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10804": {"id": 10804, "code": "def kaibun(moji):\n    n = len(moji)\n    for i in range(0,int(n/2)):\n        if s[i]!=s[n-1-i]:\n            return False\n    return True\ns = \"atcoder\"\nn = len(s)\nmoji1 = int((n - 1) / 2)\nmoji2 = int((n + 3) / 2)\nif kaibun(s) and kaibun(s[:moji1]) and kaibun(s[moji2-1:]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10805": {"id": 10805, "code": "s = \"akasaka\"\nprint(\"Yes\" if s == s[::-1] and s[:len(s)//2] == s[len(s)//2-1::-1] else \"No\")", "coverage": [">", ">"]}, "10806": {"id": 10806, "code": "s = \"level\"\nprint(\"Yes\" if s == s[::-1] and s[:len(s)//2] == s[len(s)//2-1::-1] else \"No\")", "coverage": [">", ">"]}, "10807": {"id": 10807, "code": "s = \"atcoder\"\nprint(\"Yes\" if s == s[::-1] and s[:len(s)//2] == s[len(s)//2-1::-1] else \"No\")", "coverage": [">", ">"]}, "10808": {"id": 10808, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"akasaka\"\nl = (len(s) - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">"]}, "10809": {"id": 10809, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"level\"\nl = (len(s) - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">"]}, "10810": {"id": 10810, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"atcoder\"\nl = (len(s) - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">"]}, "10811": {"id": 10811, "code": "import sys\nS = \"akasaka\"\nN=len(S)\nif S!=S[::-1]:\n  print(\"No\")\n  sys.exit(0)\ncheck=S[0:int((N-1)/2)]\nif check!=check[::-1]:\n  print(\"No\")\n  sys.exit(0)\ncheck=S[int((N+3)/2)-1:N]\nif check!=check[::-1]:\n  print(\"No\")\n  sys.exit(0)\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10812": {"id": 10812, "code": "s = \"akasaka\"\nflag = 0\nsr = s[-1::-1]\nif sr == s:\n    flag+=1\ns1 = s[:(len(s)-1)//2]\ns1r = s1[-1::-1]\nif s1 == s1r:\n    flag += 1\ns2 = s[(len(s)+3)//2-1:]\ns2r = s2[-1::-1]\nif s2 == s2r:\n    flag+=1\nprint('Yes' if flag == 3 else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10813": {"id": 10813, "code": "s = \"level\"\nflag = 0\nsr = s[-1::-1]\nif sr == s:\n    flag+=1\ns1 = s[:(len(s)-1)//2]\ns1r = s1[-1::-1]\nif s1 == s1r:\n    flag += 1\ns2 = s[(len(s)+3)//2-1:]\ns2r = s2[-1::-1]\nif s2 == s2r:\n    flag+=1\nprint('Yes' if flag == 3 else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">"]}, "10814": {"id": 10814, "code": "s = \"atcoder\"\nflag = 0\nsr = s[-1::-1]\nif sr == s:\n    flag+=1\ns1 = s[:(len(s)-1)//2]\ns1r = s1[-1::-1]\nif s1 == s1r:\n    flag += 1\ns2 = s[(len(s)+3)//2-1:]\ns2r = s2[-1::-1]\nif s2 == s2r:\n    flag+=1\nprint('Yes' if flag == 3 else 'No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">"]}, "10815": {"id": 10815, "code": "def isPalindrome(str):\n  ret = True\n  l = len(str)\n  end = int(l/2)\n  for i in range(end):\n    if str[i] != str[-1-i]:\n      ret = False\n  return ret\nans = \"Yes\"\nstr = \"akasaka\"\nstr_l = len(str)\nif isPalindrome(str) and isPalindrome(str[:int(str_l/2)]) and isPalindrome(str[-int(str_l/2):]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10816": {"id": 10816, "code": "def isPalindrome(str):\n  ret = True\n  l = len(str)\n  end = int(l/2)\n  for i in range(end):\n    if str[i] != str[-1-i]:\n      ret = False\n  return ret\nans = \"Yes\"\nstr = \"level\"\nstr_l = len(str)\nif isPalindrome(str) and isPalindrome(str[:int(str_l/2)]) and isPalindrome(str[-int(str_l/2):]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10817": {"id": 10817, "code": "def isPalindrome(str):\n  ret = True\n  l = len(str)\n  end = int(l/2)\n  for i in range(end):\n    if str[i] != str[-1-i]:\n      ret = False\n  return ret\nans = \"Yes\"\nstr = \"atcoder\"\nstr_l = len(str)\nif isPalindrome(str) and isPalindrome(str[:int(str_l/2)]) and isPalindrome(str[-int(str_l/2):]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10818": {"id": 10818, "code": "s = \"level\"\nsi=s[::-1]\na=s[:(len(s)-1)//2]\nb=s[(len(s)+1)//2:]\nif s == si :\n    if a == a[::-1] and b == b[::-1]:\n        print((\"Yes\"))\n        exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10819": {"id": 10819, "code": "s = \"atcoder\"\nsi=s[::-1]\na=s[:(len(s)-1)//2]\nb=s[(len(s)+1)//2:]\nif s == si :\n    if a == a[::-1] and b == b[::-1]:\n        print((\"Yes\"))\n        exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "10820": {"id": 10820, "code": "S = \"akasaka\"\nl = len(S)\nT = ''.join(list(reversed(S)))\na = S[:(l-1)//2]\na1 = ''.join(list(reversed(a)))\nb = S[(l+3)//2-1:l]\nb1 = ''.join(list(reversed(b)))\nif S == T:\n    if a == a1 and b == b1:\n        print('Yes')\n    if a != a1 or b != b1:\n        print('No')\nif S != T:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!"]}, "10821": {"id": 10821, "code": "S = \"level\"\nl = len(S)\nT = ''.join(list(reversed(S)))\na = S[:(l-1)//2]\na1 = ''.join(list(reversed(a)))\nb = S[(l+3)//2-1:l]\nb1 = ''.join(list(reversed(b)))\nif S == T:\n    if a == a1 and b == b1:\n        print('Yes')\n    if a != a1 or b != b1:\n        print('No')\nif S != T:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!"]}, "10822": {"id": 10822, "code": "S = \"atcoder\"\nl = len(S)\nT = ''.join(list(reversed(S)))\na = S[:(l-1)//2]\na1 = ''.join(list(reversed(a)))\nb = S[(l+3)//2-1:l]\nb1 = ''.join(list(reversed(b)))\nif S == T:\n    if a == a1 and b == b1:\n        print('Yes')\n    if a != a1 or b != b1:\n        print('No')\nif S != T:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">"]}, "10823": {"id": 10823, "code": "import sys\ns = \"akasaka\"\npre = []\nback = []\nfor i in range((len(s)-1)//2):\n    pre.append(s[i])\ns1 = ''.join(pre)\nfor i in range((len(s)+3)//2-1,len(s)):\n    back.append(s[i])\ns2 = ''.join(back)\nif s != s[::-1]:\n    print('No')\n    sys.exit()\nelif s1 != s1[::-1]:\n    print('No')\n    sys.exit()\nelif s2 != s2[::-1]:\n    print('No')\n    sys.exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", "!", "!", ">"]}, "10824": {"id": 10824, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nf1 = s == list(reversed(s))\nf2 = s[:(len(s)-1)//2] == list(reversed(s[:(len(s)-1)//2]))\nf3 = s[(len(s)+2)//2:] == list(reversed(s[(len(s)+2)//2:]))\nprint(\"Yes\" if all([f1, f2, f3]) else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10825": {"id": 10825, "code": "s = ['l', 'e', 'v', 'e', 'l']\nf1 = s == list(reversed(s))\nf2 = s[:(len(s)-1)//2] == list(reversed(s[:(len(s)-1)//2]))\nf3 = s[(len(s)+2)//2:] == list(reversed(s[(len(s)+2)//2:]))\nprint(\"Yes\" if all([f1, f2, f3]) else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10826": {"id": 10826, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nf1 = s == list(reversed(s))\nf2 = s[:(len(s)-1)//2] == list(reversed(s[:(len(s)-1)//2]))\nf3 = s[(len(s)+2)//2:] == list(reversed(s[(len(s)+2)//2:]))\nprint(\"Yes\" if all([f1, f2, f3]) else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10827": {"id": 10827, "code": "S = \"akasaka\"\nN=len(S)\ndef rule1():\n  return S==S[::-1]\ndef rule2():\n  s = S[:(N-1)//2]\n  return s==s[::-1]\ndef rule3():\n  s = S[(N+3)//2-1:]\n  return s==s[::-1]  \nprint ('Yes' if rule1() and rule2() and rule3() else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10828": {"id": 10828, "code": "S = \"level\"\nN=len(S)\ndef rule1():\n  return S==S[::-1]\ndef rule2():\n  s = S[:(N-1)//2]\n  return s==s[::-1]\ndef rule3():\n  s = S[(N+3)//2-1:]\n  return s==s[::-1]  \nprint ('Yes' if rule1() and rule2() and rule3() else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10829": {"id": 10829, "code": "S = \"atcoder\"\nN=len(S)\ndef rule1():\n  return S==S[::-1]\ndef rule2():\n  s = S[:(N-1)//2]\n  return s==s[::-1]\ndef rule3():\n  s = S[(N+3)//2-1:]\n  return s==s[::-1]  \nprint ('Yes' if rule1() and rule2() and rule3() else 'No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "10830": {"id": 10830, "code": "s = \"akasaka\"\nif s==s[::-1]:\n  if s[:(len(s)-1)//2] == s[:(len(s)-1)//2:-1]:\n    ss=s[(len(s)+3)//2-1:len(s)]\n    if ss ==  ss[::-1]:\n      print('Yes')\n    else:\n      print('No')\n  else:\n    print('No')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "10831": {"id": 10831, "code": "s = \"level\"\nif s==s[::-1]:\n  if s[:(len(s)-1)//2] == s[:(len(s)-1)//2:-1]:\n    ss=s[(len(s)+3)//2-1:len(s)]\n    if ss ==  ss[::-1]:\n      print('Yes')\n    else:\n      print('No')\n  else:\n    print('No')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", "!", "!", "!", "!"]}, "10832": {"id": 10832, "code": "s = \"atcoder\"\nif s==s[::-1]:\n  if s[:(len(s)-1)//2] == s[:(len(s)-1)//2:-1]:\n    ss=s[(len(s)+3)//2-1:len(s)]\n    if ss ==  ss[::-1]:\n      print('Yes')\n    else:\n      print('No')\n  else:\n    print('No')\nelse:\n  print('No')", "coverage": [">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10833": {"id": 10833, "code": "S = \"akasaka\"\nN = len(S)\na = S[:N // 2]\nb = S[N // 2 + 1:]\nprint('Yes' if a == a[::-1] == b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10834": {"id": 10834, "code": "S = \"level\"\nN = len(S)\na = S[:N // 2]\nb = S[N // 2 + 1:]\nprint('Yes' if a == a[::-1] == b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10835": {"id": 10835, "code": "S = \"atcoder\"\nN = len(S)\na = S[:N // 2]\nb = S[N // 2 + 1:]\nprint('Yes' if a == a[::-1] == b == b[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10836": {"id": 10836, "code": "S = \"level\"\nn = len(S)\nn\nm = int(((n - 1)/2)-1)\nl = int(((n + 3)/2)-1)\nif S[::1] == S[::-1]:\n        if S[:m+1:] == S[m::-1]:\n            if S[l::] == S[:l-1:-1]:\n                print('Yes')\n                exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "10837": {"id": 10837, "code": "S = \"atcoder\"\nn = len(S)\nn\nm = int(((n - 1)/2)-1)\nl = int(((n + 3)/2)-1)\nif S[::1] == S[::-1]:\n        if S[:m+1:] == S[m::-1]:\n            if S[l::] == S[:l-1:-1]:\n                print('Yes')\n                exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "10838": {"id": 10838, "code": "s = \"level\"\nif s[:]==s[::-1]:\n    a=s[:((len(s)-1)//2)]\n    if a[:]==a[::-1]:\n        b=s[((len(s)+2)//2):]\n        if b[:]==b[::-1]:\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "10839": {"id": 10839, "code": "s = \"atcoder\"\nif s[:]==s[::-1]:\n    a=s[:((len(s)-1)//2)]\n    if a[:]==a[::-1]:\n        b=s[((len(s)+2)//2):]\n        if b[:]==b[::-1]:\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", "!", "!", "!", "!", "!", "!", ">"]}, "10840": {"id": 10840, "code": "def is_palindrome(text):\n    l = len(text)\n    for i in range(l // 2 if l % 2 == 0 else (l + 1) // 2):\n        if text[i] != text[l - 1 - i]:\n            return False\n    return True\ns = \"akasaka\"\nq1 = is_palindrome(text=s)\nq2 = is_palindrome(text=s[0:(len(s) - 1) // 2])\nq3 = is_palindrome(text=s[(len(s) + 3) // 2 - 1:len(s)])\nprint(\"Yes\" if q1 and q2 and q3 else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">"]}, "10841": {"id": 10841, "code": "def is_palindrome(text):\n    l = len(text)\n    for i in range(l // 2 if l % 2 == 0 else (l + 1) // 2):\n        if text[i] != text[l - 1 - i]:\n            return False\n    return True\ns = \"level\"\nq1 = is_palindrome(text=s)\nq2 = is_palindrome(text=s[0:(len(s) - 1) // 2])\nq3 = is_palindrome(text=s[(len(s) + 3) // 2 - 1:len(s)])\nprint(\"Yes\" if q1 and q2 and q3 else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10842": {"id": 10842, "code": "def is_palindrome(text):\n    l = len(text)\n    for i in range(l // 2 if l % 2 == 0 else (l + 1) // 2):\n        if text[i] != text[l - 1 - i]:\n            return False\n    return True\ns = \"atcoder\"\nq1 = is_palindrome(text=s)\nq2 = is_palindrome(text=s[0:(len(s) - 1) // 2])\nq3 = is_palindrome(text=s[(len(s) + 3) // 2 - 1:len(s)])\nprint(\"Yes\" if q1 and q2 and q3 else \"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">"]}, "10843": {"id": 10843, "code": "import sys\nS = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nreverse_S = S[::-1]\nif S==reverse_S:\n    for i in range(int(len(S)/2)):\n        if S[i]==S[int(len(S)/2)-i-1] and S[int(len(S)/2)+1+i]==S[len(S)-1-i]:\n            continue\n        else:\n            print(\"No\")\n            sys.exit()\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!"]}, "10844": {"id": 10844, "code": "import sys\nS = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nreverse_S = S[::-1]\nif S==reverse_S:\n    for i in range(int(len(S)/2)):\n        if S[i]==S[int(len(S)/2)-i-1] and S[int(len(S)/2)+1+i]==S[len(S)-1-i]:\n            continue\n        else:\n            print(\"No\")\n            sys.exit()\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10845": {"id": 10845, "code": "S = \"akasaka\"\nN = len(S)\nflag = 0\nif S==S[::-1]:\n    x = S[:N//2]\n    if x==x[::-1]:\n        flag = 1\nif flag==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10846": {"id": 10846, "code": "S = \"level\"\nN = len(S)\nflag = 0\nif S==S[::-1]:\n    x = S[:N//2]\n    if x==x[::-1]:\n        flag = 1\nif flag==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10847": {"id": 10847, "code": "S = \"atcoder\"\nN = len(S)\nflag = 0\nif S==S[::-1]:\n    x = S[:N//2]\n    if x==x[::-1]:\n        flag = 1\nif flag==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10848": {"id": 10848, "code": "s = \"akasaka\"\nt = s[::-1]\nn = len(s)\na = s[:(n - 1) // 2]\nb = t[:(n - 1) // 2]\nif s == t and a == a[::-1] and b == b[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10849": {"id": 10849, "code": "s = \"level\"\nt = s[::-1]\nn = len(s)\na = s[:(n - 1) // 2]\nb = t[:(n - 1) // 2]\nif s == t and a == a[::-1] and b == b[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10850": {"id": 10850, "code": "s = \"atcoder\"\nt = s[::-1]\nn = len(s)\na = s[:(n - 1) // 2]\nb = t[:(n - 1) // 2]\nif s == t and a == a[::-1] and b == b[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10851": {"id": 10851, "code": "s = \"akasaka\"\nn = len(s)\ndef f(s):\n    return s == s[::-1]\nif f(s) and f(s[:(n-1)//2]) and f(s[(n+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10852": {"id": 10852, "code": "s = \"level\"\nn = len(s)\ndef f(s):\n    return s == s[::-1]\nif f(s) and f(s[:(n-1)//2]) and f(s[(n+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10853": {"id": 10853, "code": "s = \"atcoder\"\nn = len(s)\ndef f(s):\n    return s == s[::-1]\nif f(s) and f(s[:(n-1)//2]) and f(s[(n+3)//2-1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10854": {"id": 10854, "code": "s = \"akasaka\"\nn=int((len(s)-1)/2)\nc=0\nfor i in range(n):\n  if s[i] == s[i+n+1]:\n    c+=1\nif c==n:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10855": {"id": 10855, "code": "s = \"level\"\nn=int((len(s)-1)/2)\nc=0\nfor i in range(n):\n  if s[i] == s[i+n+1]:\n    c+=1\nif c==n:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10856": {"id": 10856, "code": "s = \"atcoder\"\nn=int((len(s)-1)/2)\nc=0\nfor i in range(n):\n  if s[i] == s[i+n+1]:\n    c+=1\nif c==n:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10857": {"id": 10857, "code": "s = \"akasaka\"\nn = len(s)\nfor i in range(n//2):\n    if s[i]!=s[n-i-1] :\n        print(\"No\")\n        exit()\nn1 = (n-1)//2\nfor i in range(n1//2):\n    if s[i]!=s[n1-i-1] :\n        print(\"No\")\n        exit()\nn2 = (n+3)//2\nfor i in range(n-n2):\n    if s[i]!=s[n-i-1] :\n        print(\"No\")\n        exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "10858": {"id": 10858, "code": "def main():\n    s = \"akasaka\"\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            print(\"No\")\n            return\n    s1 = s[:(n-1)//2]\n    s2 = s[(n+3)//2-1:]\n    n1 = len(s1)\n    for i in range(n//4):\n        if s1[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n        if s2[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">"]}, "10859": {"id": 10859, "code": "def main():\n    s = \"level\"\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            print(\"No\")\n            return\n    s1 = s[:(n-1)//2]\n    s2 = s[(n+3)//2-1:]\n    n1 = len(s1)\n    for i in range(n//4):\n        if s1[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n        if s2[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">"]}, "10860": {"id": 10860, "code": "def main():\n    s = \"atcoder\"\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            print(\"No\")\n            return\n    s1 = s[:(n-1)//2]\n    s2 = s[(n+3)//2-1:]\n    n1 = len(s1)\n    for i in range(n//4):\n        if s1[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n        if s2[i] != s[n1-1-i]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", ">"]}, "10861": {"id": 10861, "code": "S = \"akasaka\"\nif S != S[::-1]:\n    print(\"No\")\n    exit()\nif S[:len(S)//2] != S[:len(S)//2][::-1]:\n    print(\"No\")\n    exit()\nprint(\"Yes\")", "coverage": [">", ">", "!", "!", ">", "!", "!", ">"]}, "10862": {"id": 10862, "code": "S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nN=len(S)\nx=0\nfor i in range(int((N-1)/2)):\n    if S[i]!=S[-(i+1)]:\n        print(\"No\")\n        break\n    elif i==int((N-1)/2)-1:\n        x+=1\nimport math\nif x==1:\n    S_l=S[:int((N-1)/2)]\n    for i in range(int(math.ceil(len(S_l)/2))):\n        if S_l[i]!=S_l[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_l)/2))-1:\n            x+=1\nif x==2:\n    S_m=S[int((N+3)/2)-1:N]\n    for i in range(int(math.ceil(len(S_m)/2))):\n        if S_m[i]!=S_m[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_m)/2))-1:\n            print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "10863": {"id": 10863, "code": "S = ['l', 'e', 'v', 'e', 'l']\nN=len(S)\nx=0\nfor i in range(int((N-1)/2)):\n    if S[i]!=S[-(i+1)]:\n        print(\"No\")\n        break\n    elif i==int((N-1)/2)-1:\n        x+=1\nimport math\nif x==1:\n    S_l=S[:int((N-1)/2)]\n    for i in range(int(math.ceil(len(S_l)/2))):\n        if S_l[i]!=S_l[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_l)/2))-1:\n            x+=1\nif x==2:\n    S_m=S[int((N+3)/2)-1:N]\n    for i in range(int(math.ceil(len(S_m)/2))):\n        if S_m[i]!=S_m[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_m)/2))-1:\n            print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!"]}, "10864": {"id": 10864, "code": "S = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nN=len(S)\nx=0\nfor i in range(int((N-1)/2)):\n    if S[i]!=S[-(i+1)]:\n        print(\"No\")\n        break\n    elif i==int((N-1)/2)-1:\n        x+=1\nimport math\nif x==1:\n    S_l=S[:int((N-1)/2)]\n    for i in range(int(math.ceil(len(S_l)/2))):\n        if S_l[i]!=S_l[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_l)/2))-1:\n            x+=1\nif x==2:\n    S_m=S[int((N+3)/2)-1:N]\n    for i in range(int(math.ceil(len(S_m)/2))):\n        if S_m[i]!=S_m[-(i+1)]:\n            print(\"No\")\n            break\n        elif i==int(math.ceil(len(S_m)/2))-1:\n            print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", "!"]}, "10865": {"id": 10865, "code": "S = \"akasaka\"\ns1 = S[0:int((len(S)-1)/2)]\ns2 = S[int((len(S)/2))+1:len(S)+1]\nif S == S[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10866": {"id": 10866, "code": "S = \"level\"\ns1 = S[0:int((len(S)-1)/2)]\ns2 = S[int((len(S)/2))+1:len(S)+1]\nif S == S[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10867": {"id": 10867, "code": "S = \"atcoder\"\ns1 = S[0:int((len(S)-1)/2)]\ns2 = S[int((len(S)/2))+1:len(S)+1]\nif S == S[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "10868": {"id": 10868, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\na = (n - 1) // 2\nb = (n + 3) // 2\njudge = 1\nfor i in range(n // 2):\n  if s[i] != s[-(i + 1)]:\n    judge = 0\n    break\nif judge == 0:\n  print('No')\nelse:\n  al = s[:a]\n  bl = s[b - 1:]\n  for j in range(a // 2):\n    if al[j] != al[-(j + 1)]:\n      judge = 0\n      break\n  if judge == 0:\n    print('No')\n  else:\n    for k in range((n - b) // 2):\n      if bl[k] != bl[-(k + 1)]:\n        judge = 0\n        break\n    if judge == 0:\n      print('No')\n    else:\n      print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", "!", "!", ">", "!", "!", ">"]}, "10869": {"id": 10869, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\na = (n - 1) // 2\nb = (n + 3) // 2\njudge = 1\nfor i in range(n // 2):\n  if s[i] != s[-(i + 1)]:\n    judge = 0\n    break\nif judge == 0:\n  print('No')\nelse:\n  al = s[:a]\n  bl = s[b - 1:]\n  for j in range(a // 2):\n    if al[j] != al[-(j + 1)]:\n      judge = 0\n      break\n  if judge == 0:\n    print('No')\n  else:\n    for k in range((n - b) // 2):\n      if bl[k] != bl[-(k + 1)]:\n        judge = 0\n        break\n    if judge == 0:\n      print('No')\n    else:\n      print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!"]}, "10870": {"id": 10870, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\na = (n - 1) // 2\nb = (n + 3) // 2\njudge = 1\nfor i in range(n // 2):\n  if s[i] != s[-(i + 1)]:\n    judge = 0\n    break\nif judge == 0:\n  print('No')\nelse:\n  al = s[:a]\n  bl = s[b - 1:]\n  for j in range(a // 2):\n    if al[j] != al[-(j + 1)]:\n      judge = 0\n      break\n  if judge == 0:\n    print('No')\n  else:\n    for k in range((n - b) // 2):\n      if bl[k] != bl[-(k + 1)]:\n        judge = 0\n        break\n    if judge == 0:\n      print('No')\n    else:\n      print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!"]}, "10871": {"id": 10871, "code": "S = \"akasaka\"\nflag = 0\nfor i in range(0,len(S)//2):\n    if S[i] == S[-1-i]:\n        continue\n    else:\n        flag = 1\n        print(\"No\")\n        break\nif flag == 0:\n    S = S[:((len(S)-1)//2)]\n    for i in range(0,len(S)//2):\n        if S[i] == S[-1-i]:\n            continue\n        else:\n            flag = 1\n            print(\"No\")\n            break\nif flag == 0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">"]}, "10872": {"id": 10872, "code": "S = \"level\"\nflag = 0\nfor i in range(0,len(S)//2):\n    if S[i] == S[-1-i]:\n        continue\n    else:\n        flag = 1\n        print(\"No\")\n        break\nif flag == 0:\n    S = S[:((len(S)-1)//2)]\n    for i in range(0,len(S)//2):\n        if S[i] == S[-1-i]:\n            continue\n        else:\n            flag = 1\n            print(\"No\")\n            break\nif flag == 0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!"]}, "10873": {"id": 10873, "code": "S = \"atcoder\"\nflag = 0\nfor i in range(0,len(S)//2):\n    if S[i] == S[-1-i]:\n        continue\n    else:\n        flag = 1\n        print(\"No\")\n        break\nif flag == 0:\n    S = S[:((len(S)-1)//2)]\n    for i in range(0,len(S)//2):\n        if S[i] == S[-1-i]:\n            continue\n        else:\n            flag = 1\n            print(\"No\")\n            break\nif flag == 0:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", ">", "!"]}, "10874": {"id": 10874, "code": "def CheckPalindrome(S, L):\n    result = True\n    for i in range((L+1)//2):\n        if S[i] != S[-i-1]:\n            result = False\n            break\n    return result\nresult = True\nS = \"akasaka\"\nL = len(S)\nresult = CheckPalindrome(S, L)\nif result:\n    S2 = S[:(len(S)-1) // 2]\n    L2 = len(S2)\n    result = CheckPalindrome(S2, L2)\nif result:\n    S3 = S[(L+3)//2-1:]\n    L3 = len(S3)\n    result = CheckPalindrome(S3, L3)\nif result:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10875": {"id": 10875, "code": "def CheckPalindrome(S, L):\n    result = True\n    for i in range((L+1)//2):\n        if S[i] != S[-i-1]:\n            result = False\n            break\n    return result\nresult = True\nS = \"level\"\nL = len(S)\nresult = CheckPalindrome(S, L)\nif result:\n    S2 = S[:(len(S)-1) // 2]\n    L2 = len(S2)\n    result = CheckPalindrome(S2, L2)\nif result:\n    S3 = S[(L+3)//2-1:]\n    L3 = len(S3)\n    result = CheckPalindrome(S3, L3)\nif result:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10876": {"id": 10876, "code": "def CheckPalindrome(S, L):\n    result = True\n    for i in range((L+1)//2):\n        if S[i] != S[-i-1]:\n            result = False\n            break\n    return result\nresult = True\nS = \"atcoder\"\nL = len(S)\nresult = CheckPalindrome(S, L)\nif result:\n    S2 = S[:(len(S)-1) // 2]\n    L2 = len(S2)\n    result = CheckPalindrome(S2, L2)\nif result:\n    S3 = S[(L+3)//2-1:]\n    L3 = len(S3)\n    result = CheckPalindrome(S3, L3)\nif result:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10877": {"id": 10877, "code": "s = \"akasaka\"\nn = len(s)\nif s[:(n-1)//2] ==s[:(n-1)//2][::-1] and s == s[::-1] and s[(n+3)//2-1:] == s[(n+3)//2-1:][::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!"]}, "10878": {"id": 10878, "code": "s = \"level\"\nn = len(s)\nif s[:(n-1)//2] ==s[:(n-1)//2][::-1] and s == s[::-1] and s[(n+3)//2-1:] == s[(n+3)//2-1:][::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">"]}, "10879": {"id": 10879, "code": "s = \"atcoder\"\nn = len(s)\nif s[:(n-1)//2] ==s[:(n-1)//2][::-1] and s == s[::-1] and s[(n+3)//2-1:] == s[(n+3)//2-1:][::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">"]}, "10880": {"id": 10880, "code": "def is_kaibun(kaibun):\n    for i in range(len(kaibun)//2):\n        if kaibun[i] != kaibun[-i-1]:\n            return False\n    return True\ns = \"akasaka\"\nn = len(s)\nans = False\nif is_kaibun(s):\n    s = s[:n//2]\n    if is_kaibun(s):\n        ans = True\nif ans:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10881": {"id": 10881, "code": "def is_kaibun(kaibun):\n    for i in range(len(kaibun)//2):\n        if kaibun[i] != kaibun[-i-1]:\n            return False\n    return True\ns = \"level\"\nn = len(s)\nans = False\nif is_kaibun(s):\n    s = s[:n//2]\n    if is_kaibun(s):\n        ans = True\nif ans:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10882": {"id": 10882, "code": "def is_kaibun(kaibun):\n    for i in range(len(kaibun)//2):\n        if kaibun[i] != kaibun[-i-1]:\n            return False\n    return True\ns = \"atcoder\"\nn = len(s)\nans = False\nif is_kaibun(s):\n    s = s[:n//2]\n    if is_kaibun(s):\n        ans = True\nif ans:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "10883": {"id": 10883, "code": "s = \"akasaka\"\nn = len(s)\ns1 = s[0:(n - 1) // 2]\ns2 = s[(n + 3) // 2 - 1:]\nif s == s[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10884": {"id": 10884, "code": "s = \"level\"\nn = len(s)\ns1 = s[0:(n - 1) // 2]\ns2 = s[(n + 3) // 2 - 1:]\nif s == s[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10885": {"id": 10885, "code": "s = \"atcoder\"\nn = len(s)\ns1 = s[0:(n - 1) // 2]\ns2 = s[(n + 3) // 2 - 1:]\nif s == s[::-1] and s1 == s1[::-1] and s2 == s2[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10886": {"id": 10886, "code": "s = \"akasaka\"\nn = len(s)\ncen1 = int((n-1)/2)\ncen2 = int((n+3)/2)\nif s == s[::-1] and s[:cen1] == s[cen1-1::-1] and s[cen2-1:n] == s[n:cen2-2:-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10887": {"id": 10887, "code": "s = \"level\"\nn = len(s)\ncen1 = int((n-1)/2)\ncen2 = int((n+3)/2)\nif s == s[::-1] and s[:cen1] == s[cen1-1::-1] and s[cen2-1:n] == s[n:cen2-2:-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10888": {"id": 10888, "code": "s = \"atcoder\"\nn = len(s)\ncen1 = int((n-1)/2)\ncen2 = int((n+3)/2)\nif s == s[::-1] and s[:cen1] == s[cen1-1::-1] and s[cen2-1:n] == s[n:cen2-2:-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10889": {"id": 10889, "code": "def is_palindrome(s):\n    return s == s[::-1]\ndef main():\n    s = \"-akasaka\"\n    n = len(s) - 1\n    if (\n        is_palindrome(s[1:])\n        and is_palindrome(s[1 : (n - 1) // 2 + 1])\n        and is_palindrome(s[(n + 3) // 2 : n + 1])\n    ):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", "!", "!", ">", ">"]}, "10890": {"id": 10890, "code": "def is_palindrome(s):\n    return s == s[::-1]\ndef main():\n    s = \"-level\"\n    n = len(s) - 1\n    if (\n        is_palindrome(s[1:])\n        and is_palindrome(s[1 : (n - 1) // 2 + 1])\n        and is_palindrome(s[(n + 3) // 2 : n + 1])\n    ):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", ">", ">", ">"]}, "10891": {"id": 10891, "code": "def is_palindrome(s):\n    return s == s[::-1]\ndef main():\n    s = \"-atcoder\"\n    n = len(s) - 1\n    if (\n        is_palindrome(s[1:])\n        and is_palindrome(s[1 : (n - 1) // 2 + 1])\n        and is_palindrome(s[(n + 3) // 2 : n + 1])\n    ):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", "!", "!", "!", "!", ">", ">", ">"]}, "10892": {"id": 10892, "code": "s = \"akasaka\"\nfor i in [s, s[:len(s)//2], s[len(s)//2+1:]]:\n  if i != i[::-1]:\n    print(\"No\")\n    break\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", "!", "!", "!", ">"]}, "10893": {"id": 10893, "code": "s = \"level\"\nfor i in [s, s[:len(s)//2], s[len(s)//2+1:]]:\n  if i != i[::-1]:\n    print(\"No\")\n    break\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10894": {"id": 10894, "code": "s = \"atcoder\"\nfor i in [s, s[:len(s)//2], s[len(s)//2+1:]]:\n  if i != i[::-1]:\n    print(\"No\")\n    break\nelse:\n  print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "10895": {"id": 10895, "code": "S = \"akasaka\"\nN=len(S)\nM=(N-1)//2\ndef iskaibun(T):\n    K=len(T)\n    for i in range(K):\n        if T[i]==T[-i-1]:\n            pass\n        else:\n            return False\n    return True\nif iskaibun(S) and iskaibun(S[:M]) and iskaibun(S[M+1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!"]}, "10896": {"id": 10896, "code": "S = \"level\"\nN=len(S)\nM=(N-1)//2\ndef iskaibun(T):\n    K=len(T)\n    for i in range(K):\n        if T[i]==T[-i-1]:\n            pass\n        else:\n            return False\n    return True\nif iskaibun(S) and iskaibun(S[:M]) and iskaibun(S[M+1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "10897": {"id": 10897, "code": "S = \"atcoder\"\nN=len(S)\nM=(N-1)//2\ndef iskaibun(T):\n    K=len(T)\n    for i in range(K):\n        if T[i]==T[-i-1]:\n            pass\n        else:\n            return False\n    return True\nif iskaibun(S) and iskaibun(S[:M]) and iskaibun(S[M+1:]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">", "!", "!", ">"]}, "10898": {"id": 10898, "code": "s = \"akasaka\"\nn=len(s)\ns2=s[:(n-1)//2]\ns3=s[(n+3)//2-1:]\ncount=0\nfor i in range(n//2):\n    if s[i]==s[-(i+1)]:\n        count+=1\nfor i in range((n-1)//2):\n    if s2[i]==s2[-(i+1)]:\n        count+=1\nfor i in range(n-(n+3)//2+1):\n    if s3[i]==s3[-(i+1)]:\n        count+=1\nif count==n//2+(n-1)//2+n-(n+3)//2+1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10899": {"id": 10899, "code": "s = \"level\"\nn=len(s)\ns2=s[:(n-1)//2]\ns3=s[(n+3)//2-1:]\ncount=0\nfor i in range(n//2):\n    if s[i]==s[-(i+1)]:\n        count+=1\nfor i in range((n-1)//2):\n    if s2[i]==s2[-(i+1)]:\n        count+=1\nfor i in range(n-(n+3)//2+1):\n    if s3[i]==s3[-(i+1)]:\n        count+=1\nif count==n//2+(n-1)//2+n-(n+3)//2+1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", "!", "!", ">"]}, "10900": {"id": 10900, "code": "s = \"atcoder\"\nn=len(s)\ns2=s[:(n-1)//2]\ns3=s[(n+3)//2-1:]\ncount=0\nfor i in range(n//2):\n    if s[i]==s[-(i+1)]:\n        count+=1\nfor i in range((n-1)//2):\n    if s2[i]==s2[-(i+1)]:\n        count+=1\nfor i in range(n-(n+3)//2+1):\n    if s3[i]==s3[-(i+1)]:\n        count+=1\nif count==n//2+(n-1)//2+n-(n+3)//2+1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10901": {"id": 10901, "code": "import math\nfrom math import gcd\nINF = float(\"inf\")\nimport sys\ninput=sys.stdin.readline\nimport itertools\ndef main():\n    s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\n    n = len(s)\n    k = s.copy()\n    k.reverse()\n    if k != s:\n        print(\"No\")\n        exit()\n    k = s[0:(n-1)//2]\n    l = k.copy()\n    l.reverse()\n    if k != l:\n        print(\"No\")\n        exit()\n    k = s[(n-1)//2+1:]\n    l = k.copy()\n    if k != l:\n        print(\"No\")\n        exit()\n    print(\"Yes\")\nif __name__==\"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">"]}, "10902": {"id": 10902, "code": "S = \"akasaka\"\nprint(\"Yes\" if ( S==S[::-1] and S[:int((len(S)-1)/2)]==S[:int((len(S)-1)/2)][::-1] ) else \"No\")", "coverage": [">", ">"]}, "10903": {"id": 10903, "code": "S = \"level\"\nprint(\"Yes\" if ( S==S[::-1] and S[:int((len(S)-1)/2)]==S[:int((len(S)-1)/2)][::-1] ) else \"No\")", "coverage": [">", ">"]}, "10904": {"id": 10904, "code": "S = \"atcoder\"\nprint(\"Yes\" if ( S==S[::-1] and S[:int((len(S)-1)/2)]==S[:int((len(S)-1)/2)][::-1] ) else \"No\")", "coverage": [">", ">"]}, "10905": {"id": 10905, "code": "s = \"level\"\nn = len(s)\ns1 = s[0:(n-1)//2]\ns2 = s[(n+3)//2-1:n+1]\nif s == s[::-1]:\n    if s1 == s1[::-1]:\n        if s2 == s2[::-1]:\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "10906": {"id": 10906, "code": "s = \"atcoder\"\nn = len(s)\ns1 = s[0:(n-1)//2]\ns2 = s[(n+3)//2-1:n+1]\nif s == s[::-1]:\n    if s1 == s1[::-1]:\n        if s2 == s2[::-1]:\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "10907": {"id": 10907, "code": "S = \"akasaka\"\nN = len(S)\ncount1,count2,count3 = 0,0,0\nflg1,flg2,flg3 = False,False,False\nfor i in range(N):\n    if S[i] == S[-1-i]:\n        count1 += 1\nif count1 == N:\n    flg1 = True\na = int((N-1)/2)\nfor i in range(a):\n    if S[i] == S[a-1-i]:\n        count2 += 1\nif count2 == int((N-1)/2):\n    flg2 = True\nb = int((N+3)/2)\nfor i in range(N-b+1):\n    if S[b+i-1] == S[N-i-1]:\n        count3 += 1\nif count3 == N-b+1 :\n    flg3 = True\nif flg1 == True and flg2 == True and flg3 == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10908": {"id": 10908, "code": "S = \"level\"\nN = len(S)\ncount1,count2,count3 = 0,0,0\nflg1,flg2,flg3 = False,False,False\nfor i in range(N):\n    if S[i] == S[-1-i]:\n        count1 += 1\nif count1 == N:\n    flg1 = True\na = int((N-1)/2)\nfor i in range(a):\n    if S[i] == S[a-1-i]:\n        count2 += 1\nif count2 == int((N-1)/2):\n    flg2 = True\nb = int((N+3)/2)\nfor i in range(N-b+1):\n    if S[b+i-1] == S[N-i-1]:\n        count3 += 1\nif count3 == N-b+1 :\n    flg3 = True\nif flg1 == True and flg2 == True and flg3 == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "10909": {"id": 10909, "code": "S = \"atcoder\"\nN = len(S)\ncount1,count2,count3 = 0,0,0\nflg1,flg2,flg3 = False,False,False\nfor i in range(N):\n    if S[i] == S[-1-i]:\n        count1 += 1\nif count1 == N:\n    flg1 = True\na = int((N-1)/2)\nfor i in range(a):\n    if S[i] == S[a-1-i]:\n        count2 += 1\nif count2 == int((N-1)/2):\n    flg2 = True\nb = int((N+3)/2)\nfor i in range(N-b+1):\n    if S[b+i-1] == S[N-i-1]:\n        count3 += 1\nif count3 == N-b+1 :\n    flg3 = True\nif flg1 == True and flg2 == True and flg3 == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10910": {"id": 10910, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\na = int((n-1)/2)\nb = int((n+3)/2)\nfor i in range(a):\n  if s[i] != s[n-1-i]:\n    print(\"No\")\n    exit()\nfor i in range(a):\n  if s[i] != s[a-1-i]:\n    print(\"No\")\n    exit()\nfor i in range(a):\n  if s[b+i-1] != s[n-1-i]:\n    print(\"No\")\n    exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10911": {"id": 10911, "code": "S = \"akasaka\"\nN = len(S)\nflag = True\nif S!=S[::-1]:\n    flag=False\nif S[:int((N-1)/2)]!=S[:int((N-1)/2)][::-1]:\n    flag=False\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", "!", ">"]}, "10912": {"id": 10912, "code": "S = \"level\"\nN = len(S)\nflag = True\nif S!=S[::-1]:\n    flag=False\nif S[:int((N-1)/2)]!=S[:int((N-1)/2)][::-1]:\n    flag=False\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">"]}, "10913": {"id": 10913, "code": "S = \"atcoder\"\nN = len(S)\nflag = True\nif S!=S[::-1]:\n    flag=False\nif S[:int((N-1)/2)]!=S[:int((N-1)/2)][::-1]:\n    flag=False\nprint(\"Yes\" if flag else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "10914": {"id": 10914, "code": "S = \"akasaka\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:]\nprint('Yes' if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10915": {"id": 10915, "code": "S = \"level\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:]\nprint('Yes' if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10916": {"id": 10916, "code": "S = \"atcoder\"\nN = len(S)\nS1 = S[0:(N-1)//2]\nS2 = S[(N+3)//2-1:]\nprint('Yes' if S == S[::-1] and S1 == S1[::-1] and S2 == S2[::-1] else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "10917": {"id": 10917, "code": "S = \"akasaka\"\ns = list(S)\nf = s[:int((len(s)-1)/2)]\nl = s[int((len(s)+3)/2-1):]\nif f == l:\n    while len(f) > 1:\n        if f[0] == f[-1]:\n            f.pop(0)\n            f.pop()\n    if len(f) <= 1:\n        while len(l) > 1:\n            if l[0] == l[-1]:\n                l.pop(0)\n                l.pop()\n        if len(l) <= 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "10918": {"id": 10918, "code": "S = \"level\"\ns = list(S)\nf = s[:int((len(s)-1)/2)]\nl = s[int((len(s)+3)/2-1):]\nif f == l:\n    while len(f) > 1:\n        if f[0] == f[-1]:\n            f.pop(0)\n            f.pop()\n    if len(f) <= 1:\n        while len(l) > 1:\n            if l[0] == l[-1]:\n                l.pop(0)\n                l.pop()\n        if len(l) <= 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10919": {"id": 10919, "code": "S = \"atcoder\"\ns = list(S)\nf = s[:int((len(s)-1)/2)]\nl = s[int((len(s)+3)/2-1):]\nif f == l:\n    while len(f) > 1:\n        if f[0] == f[-1]:\n            f.pop(0)\n            f.pop()\n    if len(f) <= 1:\n        while len(l) > 1:\n            if l[0] == l[-1]:\n                l.pop(0)\n                l.pop()\n        if len(l) <= 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10920": {"id": 10920, "code": "s = \"akasaka\"\nn = len(s)\nprint('Yes' if s==s[::-1] and s[:(n-1)//2]==s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">"]}, "10921": {"id": 10921, "code": "s = \"level\"\nn = len(s)\nprint('Yes' if s==s[::-1] and s[:(n-1)//2]==s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">"]}, "10922": {"id": 10922, "code": "s = \"atcoder\"\nn = len(s)\nprint('Yes' if s==s[::-1] and s[:(n-1)//2]==s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">"]}, "10923": {"id": 10923, "code": "S = \"akasaka\"\ndef kaibun(x):\n    N = len(x)\n    flag = True\n    for i in range(N // 2):\n        if x[i] != x[-i - 1]:\n            flag = False\n    return flag\ntmp1 = kaibun(S)\ntmp2 = kaibun(S[:(len(S) - 1) // 2])\ntmp3 = kaibun(S[(len(S) + 3) // 2 - 1:])\nif tmp1 and tmp2 and tmp3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10924": {"id": 10924, "code": "S = \"level\"\ndef kaibun(x):\n    N = len(x)\n    flag = True\n    for i in range(N // 2):\n        if x[i] != x[-i - 1]:\n            flag = False\n    return flag\ntmp1 = kaibun(S)\ntmp2 = kaibun(S[:(len(S) - 1) // 2])\ntmp3 = kaibun(S[(len(S) + 3) // 2 - 1:])\nif tmp1 and tmp2 and tmp3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10925": {"id": 10925, "code": "S = \"atcoder\"\ndef kaibun(x):\n    N = len(x)\n    flag = True\n    for i in range(N // 2):\n        if x[i] != x[-i - 1]:\n            flag = False\n    return flag\ntmp1 = kaibun(S)\ntmp2 = kaibun(S[:(len(S) - 1) // 2])\ntmp3 = kaibun(S[(len(S) + 3) // 2 - 1:])\nif tmp1 and tmp2 and tmp3:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10926": {"id": 10926, "code": "def palin(x):\n    if x == x[::-1]: return True\n    return False\na = \"akasaka\"\nn = len(a)\nif palin(a) and palin(a[:int((n-1)/2)]) and palin(a[int((n+3)/2)-1:]):\n    print(\"Yes\")\nelse: print(\"No\")", "coverage": [">", ">", "!", ">", ">", ">", ">", "!"]}, "10927": {"id": 10927, "code": "def palin(x):\n    if x == x[::-1]: return True\n    return False\na = \"level\"\nn = len(a)\nif palin(a) and palin(a[:int((n-1)/2)]) and palin(a[int((n+3)/2)-1:]):\n    print(\"Yes\")\nelse: print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">"]}, "10928": {"id": 10928, "code": "def palin(x):\n    if x == x[::-1]: return True\n    return False\na = \"atcoder\"\nn = len(a)\nif palin(a) and palin(a[:int((n-1)/2)]) and palin(a[int((n+3)/2)-1:]):\n    print(\"Yes\")\nelse: print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">"]}, "10929": {"id": 10929, "code": "s = \"akasaka\"\nn = len(s)\ns1 = s[:(n-1)//2]\ns2 = s[((n+3)//2)-1:]\ndef kaibun(S):\n  for i,j in zip(S,S[::-1]):\n    if i!=j:\n      return False\n  return True\nif kaibun(s) and kaibun(s1) and kaibun(s2):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!"]}, "10930": {"id": 10930, "code": "s = \"level\"\nn = len(s)\ns1 = s[:(n-1)//2]\ns2 = s[((n+3)//2)-1:]\ndef kaibun(S):\n  for i,j in zip(S,S[::-1]):\n    if i!=j:\n      return False\n  return True\nif kaibun(s) and kaibun(s1) and kaibun(s2):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10931": {"id": 10931, "code": "s = \"atcoder\"\nn = len(s)\ns1 = s[:(n-1)//2]\ns2 = s[((n+3)//2)-1:]\ndef kaibun(S):\n  for i,j in zip(S,S[::-1]):\n    if i!=j:\n      return False\n  return True\nif kaibun(s) and kaibun(s1) and kaibun(s2):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10932": {"id": 10932, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"akasaka\"\nn = len(s)\nl = (n - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10933": {"id": 10933, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"level\"\nn = len(s)\nl = (n - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10934": {"id": 10934, "code": "def is_p(s):\n    return s == s[::-1]\ns = \"atcoder\"\nn = len(s)\nl = (n - 1)//2\nr = l + 1\nprint('Yes' if is_p(s) and is_p(s[:l]) and is_p(s[r:]) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "10935": {"id": 10935, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nb = 0\nif len(s)%2==1:\n    for a in range(int((len(s)-1)/2)):\n        if s[a]!=s[len(s)-a-1] and b==0:\n            b = 1\nelse:\n    b = 1\nif b == 0:\n    for c in range(int((len(s)-1)/4+1)):\n        if s[c]==s[int((len(s)-1)/2-c-1)]==s[int((len(s)+1)/2+c)]==s[len(s)-c-1] and b==0:\n            b = 0\n        else:\n            b = 1\nif b == 0:\n    print(\"Yes\")\nelif b == 1:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!"]}, "10936": {"id": 10936, "code": "s = ['l', 'e', 'v', 'e', 'l']\nb = 0\nif len(s)%2==1:\n    for a in range(int((len(s)-1)/2)):\n        if s[a]!=s[len(s)-a-1] and b==0:\n            b = 1\nelse:\n    b = 1\nif b == 0:\n    for c in range(int((len(s)-1)/4+1)):\n        if s[c]==s[int((len(s)-1)/2-c-1)]==s[int((len(s)+1)/2+c)]==s[len(s)-c-1] and b==0:\n            b = 0\n        else:\n            b = 1\nif b == 0:\n    print(\"Yes\")\nelif b == 1:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">"]}, "10937": {"id": 10937, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nb = 0\nif len(s)%2==1:\n    for a in range(int((len(s)-1)/2)):\n        if s[a]!=s[len(s)-a-1] and b==0:\n            b = 1\nelse:\n    b = 1\nif b == 0:\n    for c in range(int((len(s)-1)/4+1)):\n        if s[c]==s[int((len(s)-1)/2-c-1)]==s[int((len(s)+1)/2+c)]==s[len(s)-c-1] and b==0:\n            b = 0\n        else:\n            b = 1\nif b == 0:\n    print(\"Yes\")\nelif b == 1:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", "!", "!", "!", ">", "!", ">", ">"]}, "10938": {"id": 10938, "code": "s = \"akasaka\"\nn = len(s)\nsd = s[::-1]\na = s[:int((n-1)/2)]\nad = a[::-1]\nb = s[int((n+3)/2-1):]\nbd = b[::-1]\nif s == sd and a == ad and b == bd:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10939": {"id": 10939, "code": "s = \"level\"\nn = len(s)\nsd = s[::-1]\na = s[:int((n-1)/2)]\nad = a[::-1]\nb = s[int((n+3)/2-1):]\nbd = b[::-1]\nif s == sd and a == ad and b == bd:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10940": {"id": 10940, "code": "s = \"atcoder\"\nn = len(s)\nsd = s[::-1]\na = s[:int((n-1)/2)]\nad = a[::-1]\nb = s[int((n+3)/2-1):]\nbd = b[::-1]\nif s == sd and a == ad and b == bd:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10941": {"id": 10941, "code": "s = \"akasaka\"\nn = len(s)\nf = s[:(n-1)//2]\nl = s[1+((n-1)//2):]\nprint(\"Yes\" if s==s[::-1] and f==f[::-1] and l==l[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10942": {"id": 10942, "code": "s = \"level\"\nn = len(s)\nf = s[:(n-1)//2]\nl = s[1+((n-1)//2):]\nprint(\"Yes\" if s==s[::-1] and f==f[::-1] and l==l[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10943": {"id": 10943, "code": "s = \"atcoder\"\nn = len(s)\nf = s[:(n-1)//2]\nl = s[1+((n-1)//2):]\nprint(\"Yes\" if s==s[::-1] and f==f[::-1] and l==l[::-1] else \"No\")", "coverage": [">", ">", ">", ">", ">"]}, "10944": {"id": 10944, "code": "s = \"akasaka\"\nn = len(s)\na, b = s[:(n - 1) // 2], s[(n + 1) // 2:]\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] and b == b[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "10945": {"id": 10945, "code": "s = \"level\"\nn = len(s)\na, b = s[:(n - 1) // 2], s[(n + 1) // 2:]\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] and b == b[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "10946": {"id": 10946, "code": "s = \"atcoder\"\nn = len(s)\na, b = s[:(n - 1) // 2], s[(n + 1) // 2:]\nprint(\"Yes\" if s == s[::-1] and a == a[::-1] and b == b[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "10947": {"id": 10947, "code": "def solve():\n    S = \"akasaka\"\n    if S != S[::-1]:\n        print(\"No\")\n    else:\n        sub = S[:(len(S)-1)//2]\n        if sub != sub[::-1]:\n            print(\"No\")\n        else:\n            print(\"Yes\")\nif __name__ == \"__main__\":\n    solve()", "coverage": [">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", ">"]}, "10948": {"id": 10948, "code": "def solve():\n    S = \"level\"\n    if S != S[::-1]:\n        print(\"No\")\n    else:\n        sub = S[:(len(S)-1)//2]\n        if sub != sub[::-1]:\n            print(\"No\")\n        else:\n            print(\"Yes\")\nif __name__ == \"__main__\":\n    solve()", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">"]}, "10949": {"id": 10949, "code": "def solve():\n    S = \"atcoder\"\n    if S != S[::-1]:\n        print(\"No\")\n    else:\n        sub = S[:(len(S)-1)//2]\n        if sub != sub[::-1]:\n            print(\"No\")\n        else:\n            print(\"Yes\")\nif __name__ == \"__main__\":\n    solve()", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">", ">"]}, "10950": {"id": 10950, "code": "s = \"akasaka\"\nn = len(s)\nsformer = s[:int((n - 1) / 2)]\nslatter = s[int((n + 1) / 2):]\nif s == s[-1::-1] and sformer == sformer[-1::-1] and slatter == slatter[-1::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10951": {"id": 10951, "code": "s = \"level\"\nn = len(s)\nsformer = s[:int((n - 1) / 2)]\nslatter = s[int((n + 1) / 2):]\nif s == s[-1::-1] and sformer == sformer[-1::-1] and slatter == slatter[-1::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10952": {"id": 10952, "code": "s = \"atcoder\"\nn = len(s)\nsformer = s[:int((n - 1) / 2)]\nslatter = s[int((n + 1) / 2):]\nif s == s[-1::-1] and sformer == sformer[-1::-1] and slatter == slatter[-1::-1]:\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10953": {"id": 10953, "code": "S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nN = len(S)\nS_1=S[:N//2]\nS_2=S[N//2+1:]\nN_=len(S_1)\nans='Yes'\nfor n in range(N_):\n    if S_1[n] != S_1[-(n+1)]:\n        ans='No'\n        break\n    if S_2[n] != S_2[-(n+1)]:\n        ans='No'\n        break   \nfor n in range(N):\n    if S[n] != S[-(n+1)]:\n        ans='No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10954": {"id": 10954, "code": "S = ['l', 'e', 'v', 'e', 'l']\nN = len(S)\nS_1=S[:N//2]\nS_2=S[N//2+1:]\nN_=len(S_1)\nans='Yes'\nfor n in range(N_):\n    if S_1[n] != S_1[-(n+1)]:\n        ans='No'\n        break\n    if S_2[n] != S_2[-(n+1)]:\n        ans='No'\n        break   \nfor n in range(N):\n    if S[n] != S[-(n+1)]:\n        ans='No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", "!", "!", ">"]}, "10955": {"id": 10955, "code": "S = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nN = len(S)\nS_1=S[:N//2]\nS_2=S[N//2+1:]\nN_=len(S_1)\nans='Yes'\nfor n in range(N_):\n    if S_1[n] != S_1[-(n+1)]:\n        ans='No'\n        break\n    if S_2[n] != S_2[-(n+1)]:\n        ans='No'\n        break   \nfor n in range(N):\n    if S[n] != S[-(n+1)]:\n        ans='No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", ">"]}, "10956": {"id": 10956, "code": "s = \"akasaka\"\nn=len(s)\nn1=(n-1)//2\nn2=(n+3)//2\ns1=s[:n1]\ns2=s[n2-1:]\nfor i in range(1,n1+1):\n    if s[i-1]!=s[-i]:\n        print('No')\n        exit()\nfor i in range(1,n1//2+1):\n    if s1[i-1]!=s1[-i]:\n        print('No')\n        exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10957": {"id": 10957, "code": "S = \"akasaka\"\nSkai1 = S[0:(len(S)-1)//2]\nSkai1 = Skai1[::-1]\nSkai2 = S[((len(S)+3)//2)-1:len(S)]\nSkai2 = Skai2[::-1]\nif S==S[::-1] and S[0:(len(S)-1)//2] ==Skai1 and S[((len(S)+3)//2)-1:len(S)] == Skai2: \n  print('Yes')\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10958": {"id": 10958, "code": "S = \"level\"\nSkai1 = S[0:(len(S)-1)//2]\nSkai1 = Skai1[::-1]\nSkai2 = S[((len(S)+3)//2)-1:len(S)]\nSkai2 = Skai2[::-1]\nif S==S[::-1] and S[0:(len(S)-1)//2] ==Skai1 and S[((len(S)+3)//2)-1:len(S)] == Skai2: \n  print('Yes')\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10959": {"id": 10959, "code": "S = \"atcoder\"\nSkai1 = S[0:(len(S)-1)//2]\nSkai1 = Skai1[::-1]\nSkai2 = S[((len(S)+3)//2)-1:len(S)]\nSkai2 = Skai2[::-1]\nif S==S[::-1] and S[0:(len(S)-1)//2] ==Skai1 and S[((len(S)+3)//2)-1:len(S)] == Skai2: \n  print('Yes')\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10960": {"id": 10960, "code": "kai = \"akasaka\"\nnum = len(kai)\nans = 0\nn1 = int((num-1) / 2)\nfor i in range(n1):\n    if kai[i] != kai[-1*(i+1)]:\n        ans += 1\nl1 = kai[0:n1]\nfor i in range(len(l1)):\n    if l1[i] != l1[-1*(i+1)]:\n        ans += 1\nl2 = kai[n1+1:]\nfor i in range(len(l2)):\n    if l2[i] != l2[-1*(i+1)]:\n        ans += 1\nif ans == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", "!", "!"]}, "10961": {"id": 10961, "code": "kai = \"level\"\nnum = len(kai)\nans = 0\nn1 = int((num-1) / 2)\nfor i in range(n1):\n    if kai[i] != kai[-1*(i+1)]:\n        ans += 1\nl1 = kai[0:n1]\nfor i in range(len(l1)):\n    if l1[i] != l1[-1*(i+1)]:\n        ans += 1\nl2 = kai[n1+1:]\nfor i in range(len(l2)):\n    if l2[i] != l2[-1*(i+1)]:\n        ans += 1\nif ans == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10962": {"id": 10962, "code": "kai = \"atcoder\"\nnum = len(kai)\nans = 0\nn1 = int((num-1) / 2)\nfor i in range(n1):\n    if kai[i] != kai[-1*(i+1)]:\n        ans += 1\nl1 = kai[0:n1]\nfor i in range(len(l1)):\n    if l1[i] != l1[-1*(i+1)]:\n        ans += 1\nl2 = kai[n1+1:]\nfor i in range(len(l2)):\n    if l2[i] != l2[-1*(i+1)]:\n        ans += 1\nif ans == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10963": {"id": 10963, "code": "S = \"akasaka\"\nN = len(S)\ndef isPalindrome(s):\n  n = len(s)\n  re_s = s[::-1]\n  for i in range(n // 2):\n    if re_s[i] != s[i]:\n      break\n  else:\n    return True\n  return False\nif isPalindrome(S) and isPalindrome(S[:N // 2]) and isPalindrome(S[(N + 1) // 2:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">", ">", "!", "!"]}, "10964": {"id": 10964, "code": "S = \"level\"\nN = len(S)\ndef isPalindrome(s):\n  n = len(s)\n  re_s = s[::-1]\n  for i in range(n // 2):\n    if re_s[i] != s[i]:\n      break\n  else:\n    return True\n  return False\nif isPalindrome(S) and isPalindrome(S[:N // 2]) and isPalindrome(S[(N + 1) // 2:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "10965": {"id": 10965, "code": "S = \"atcoder\"\nN = len(S)\ndef isPalindrome(s):\n  n = len(s)\n  re_s = s[::-1]\n  for i in range(n // 2):\n    if re_s[i] != s[i]:\n      break\n  else:\n    return True\n  return False\nif isPalindrome(S) and isPalindrome(S[:N // 2]) and isPalindrome(S[(N + 1) // 2:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "10966": {"id": 10966, "code": "s = \"akasaka\"\nif s != s[::-1]:\n    print('No')\n    exit()\nn = len(s)\ns1 = s[:((n-1)//2)]\ns2 = s[((n+3)//2)-1:n]\nif s1 != s1[::-1] and s2 != s2[::-1]:\n    print('No')\n    exit()\nprint('Yes')", "coverage": [">", ">", "!", "!", ">", ">", ">", ">", "!", "!", ">"]}, "10967": {"id": 10967, "code": "S = \"akasaka\"\nn = len(S)\ns1 = S[:(n-1)//2]\ns2 = S[(n+3)//2-1:]\nif S[::-1]==S and s1[::-1]==s1 and s2[::-1]==s2:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10968": {"id": 10968, "code": "S = \"level\"\nn = len(S)\ns1 = S[:(n-1)//2]\ns2 = S[(n+3)//2-1:]\nif S[::-1]==S and s1[::-1]==s1 and s2[::-1]==s2:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10969": {"id": 10969, "code": "S = \"atcoder\"\nn = len(S)\ns1 = S[:(n-1)//2]\ns2 = S[(n+3)//2-1:]\nif S[::-1]==S and s1[::-1]==s1 and s2[::-1]==s2:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10970": {"id": 10970, "code": "s = \"akasaka\"\nn = len(s)\nentire = s == s[::-1]\nleft = s[:int((n-1)/2)] == s[:int((n-1)/2)][::-1]\nright = s[int((n+3)/2-1):] == s[int((n+3)/2-1):][::-1]\nif entire and left and right:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "10971": {"id": 10971, "code": "s = \"level\"\nn = len(s)\nentire = s == s[::-1]\nleft = s[:int((n-1)/2)] == s[:int((n-1)/2)][::-1]\nright = s[int((n+3)/2-1):] == s[int((n+3)/2-1):][::-1]\nif entire and left and right:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10972": {"id": 10972, "code": "s = \"atcoder\"\nn = len(s)\nentire = s == s[::-1]\nleft = s[:int((n-1)/2)] == s[:int((n-1)/2)][::-1]\nright = s[int((n+3)/2-1):] == s[int((n+3)/2-1):][::-1]\nif entire and left and right:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10973": {"id": 10973, "code": "S = \"akasaka\"\nN = len(S)\nflag = [0,0,0]\nif S==\"\".join(reversed(list(S))):\n    flag[0]=1\nif S[:int((N-1)/2)]==\"\".join(reversed(list(S[:int((N-1)/2)]))):\n    flag[1]=1\nif S[int((N+3)/2)-1:]==\"\".join(reversed(list(S[int((N+3)/2)-1:]))):\n    flag[2]=1\nprint(\"Yes\" if flag==[1,1,1] else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10974": {"id": 10974, "code": "S = \"level\"\nN = len(S)\nflag = [0,0,0]\nif S==\"\".join(reversed(list(S))):\n    flag[0]=1\nif S[:int((N-1)/2)]==\"\".join(reversed(list(S[:int((N-1)/2)]))):\n    flag[1]=1\nif S[int((N+3)/2)-1:]==\"\".join(reversed(list(S[int((N+3)/2)-1:]))):\n    flag[2]=1\nprint(\"Yes\" if flag==[1,1,1] else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", "!", ">"]}, "10975": {"id": 10975, "code": "S = \"atcoder\"\nN = len(S)\nflag = [0,0,0]\nif S==\"\".join(reversed(list(S))):\n    flag[0]=1\nif S[:int((N-1)/2)]==\"\".join(reversed(list(S[:int((N-1)/2)]))):\n    flag[1]=1\nif S[int((N+3)/2)-1:]==\"\".join(reversed(list(S[int((N+3)/2)-1:]))):\n    flag[2]=1\nprint(\"Yes\" if flag==[1,1,1] else \"No\")", "coverage": [">", ">", ">", ">", "!", ">", "!", ">", "!", ">"]}, "10976": {"id": 10976, "code": "s = \"akasaka\"\nn = len(s)\nsl = s[:n//2]\nsr = s[n//2+1:]\nif sl == sr and sr ==  sr[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "10977": {"id": 10977, "code": "s = \"level\"\nn = len(s)\nsl = s[:n//2]\nsr = s[n//2+1:]\nif sl == sr and sr ==  sr[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10978": {"id": 10978, "code": "s = \"atcoder\"\nn = len(s)\nsl = s[:n//2]\nsr = s[n//2+1:]\nif sl == sr and sr ==  sr[::-1]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "10979": {"id": 10979, "code": "import sys\ninput = sys.stdin.readline\ns = \"akasak\";n = 6\nprint('Yes' if s == s[::-1] and s[:(n-1)//2] == s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10980": {"id": 10980, "code": "import sys\ninput = sys.stdin.readline\ns = \"leve\";n = 4\nprint('Yes' if s == s[::-1] and s[:(n-1)//2] == s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10981": {"id": 10981, "code": "import sys\ninput = sys.stdin.readline\ns = \"atcode\";n = 6\nprint('Yes' if s == s[::-1] and s[:(n-1)//2] == s[:(n-1)//2][::-1] and s[(n+1)//2:] == s[(n+1)//2:][::-1] else 'No')", "coverage": [">", ">", ">", ">"]}, "10982": {"id": 10982, "code": "S = \"akasaka\"\nN = len(S)\nif S==S[::-1] and S[:N//2]==S[:N//2][::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!"]}, "10983": {"id": 10983, "code": "S = \"level\"\nN = len(S)\nif S==S[::-1] and S[:N//2]==S[:N//2][::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "10984": {"id": 10984, "code": "S = \"atcoder\"\nN = len(S)\nif S==S[::-1] and S[:N//2]==S[:N//2][::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "10985": {"id": 10985, "code": "S = \"akasaka\"\ndef kaibun(S):\n  for i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n      return False\n  return True\nif kaibun(S) and kaibun(S[:(len(S) - 1)//2]) and kaibun(S[(len(S) + 3) // 2-1:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", "!", "!"]}, "10986": {"id": 10986, "code": "S = \"level\"\ndef kaibun(S):\n  for i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n      return False\n  return True\nif kaibun(S) and kaibun(S[:(len(S) - 1)//2]) and kaibun(S[(len(S) + 3) // 2-1:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10987": {"id": 10987, "code": "S = \"atcoder\"\ndef kaibun(S):\n  for i in range(len(S) // 2):\n    if S[i] != S[len(S) - i - 1]:\n      return False\n  return True\nif kaibun(S) and kaibun(S[:(len(S) - 1)//2]) and kaibun(S[(len(S) + 3) // 2-1:]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "10988": {"id": 10988, "code": "def palindrome(S):\n  for i in range(len(S)//2):\n    if S[i] != S[-(i+1)]:\n      return 0\n  return 1\nans = \"No\"\nS = \"akasaka\"\nS1 = S[:(len(S)-1)//2]\nS2 = S[(len(S)+1)//2:]\nif palindrome(S) == 1:\n  if palindrome(S1) == 1:\n    if palindrome(S2) == 1:\n      ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "10989": {"id": 10989, "code": "def palindrome(S):\n  for i in range(len(S)//2):\n    if S[i] != S[-(i+1)]:\n      return 0\n  return 1\nans = \"No\"\nS = \"level\"\nS1 = S[:(len(S)-1)//2]\nS2 = S[(len(S)+1)//2:]\nif palindrome(S) == 1:\n  if palindrome(S1) == 1:\n    if palindrome(S2) == 1:\n      ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10990": {"id": 10990, "code": "def palindrome(S):\n  for i in range(len(S)//2):\n    if S[i] != S[-(i+1)]:\n      return 0\n  return 1\nans = \"No\"\nS = \"atcoder\"\nS1 = S[:(len(S)-1)//2]\nS2 = S[(len(S)+1)//2:]\nif palindrome(S) == 1:\n  if palindrome(S1) == 1:\n    if palindrome(S2) == 1:\n      ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "10991": {"id": 10991, "code": "S = \"akasaka\"\nlength = len(S)\ndef check_palin(s):\n    num = len(s)\n    for i in range(num // 2):\n        if s[i] != s[num - i - 1]:\n            return False\n    return True\nfirst = S[:(length - 1) // 2]\nsecond = S[(length + 1) // 2:]\nif check_palin(S) and check_palin(first) and check_palin(second):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "10992": {"id": 10992, "code": "S = \"level\"\nlength = len(S)\ndef check_palin(s):\n    num = len(s)\n    for i in range(num // 2):\n        if s[i] != s[num - i - 1]:\n            return False\n    return True\nfirst = S[:(length - 1) // 2]\nsecond = S[(length + 1) // 2:]\nif check_palin(S) and check_palin(first) and check_palin(second):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "10993": {"id": 10993, "code": "S = \"atcoder\"\nlength = len(S)\ndef check_palin(s):\n    num = len(s)\n    for i in range(num // 2):\n        if s[i] != s[num - i - 1]:\n            return False\n    return True\nfirst = S[:(length - 1) // 2]\nsecond = S[(length + 1) // 2:]\nif check_palin(S) and check_palin(first) and check_palin(second):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "10994": {"id": 10994, "code": "def main():\n    S = \"akasaka\"\n    N = len(S)\n    for i in range(N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    M = (N-1)//2\n    for i in range(M):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    L = (N+3)//2 - 1\n    for i in range(L, N):\n        if S[i] != S[N+L-i-1]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">"]}, "10995": {"id": 10995, "code": "def main():\n    S = \"level\"\n    N = len(S)\n    for i in range(N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    M = (N-1)//2\n    for i in range(M):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    L = (N+3)//2 - 1\n    for i in range(L, N):\n        if S[i] != S[N+L-i-1]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", "!", ">"]}, "10996": {"id": 10996, "code": "def main():\n    S = \"atcoder\"\n    N = len(S)\n    for i in range(N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    M = (N-1)//2\n    for i in range(M):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            return\n    L = (N+3)//2 - 1\n    for i in range(L, N):\n        if S[i] != S[N+L-i-1]:\n            print(\"No\")\n            return\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "10997": {"id": 10997, "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\nflag = 0\nfor i in range(n//2):\n    if s[i] != s[n-i-1]:\n        flag = 1\nif flag == 0:\n    s2 = s[:(n-1)//2]\n    n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    if flag == 0:\n        s2 = s[(n+3)//2-1:]\n        n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", "!"]}, "10998": {"id": 10998, "code": "s = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\nflag = 0\nfor i in range(n//2):\n    if s[i] != s[n-i-1]:\n        flag = 1\nif flag == 0:\n    s2 = s[:(n-1)//2]\n    n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    if flag == 0:\n        s2 = s[(n+3)//2-1:]\n        n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">", "!", "!", ">"]}, "10999": {"id": 10999, "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\nflag = 0\nfor i in range(n//2):\n    if s[i] != s[n-i-1]:\n        flag = 1\nif flag == 0:\n    s2 = s[:(n-1)//2]\n    n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    if flag == 0:\n        s2 = s[(n+3)//2-1:]\n        n2 = len(s2)\n    for i in range(n2//2):\n        if s2[i] != s2[n2-i-1]:\n            flag = 1\nif flag == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">", "!", "!", "!", "!", "!", "!", ">", "!", "!", ">"]}, "11000": {"id": 11000, "code": "S = \"level\"\ndef is_kaibun(s):\n    l = len(s)\n    if s[:int(l/2)] == s[:-(int(l/2))-1:-1]:\n        return True\n    else:\n        return False\nif is_kaibun(S):\n    if is_kaibun(S[:int((len(S)-1)/2)]):\n        if is_kaibun(S[int((len(S)+3)/2)-1:]):\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", "!", ">"]}, "11001": {"id": 11001, "code": "S = \"atcoder\"\ndef is_kaibun(s):\n    l = len(s)\n    if s[:int(l/2)] == s[:-(int(l/2))-1:-1]:\n        return True\n    else:\n        return False\nif is_kaibun(S):\n    if is_kaibun(S[:int((len(S)-1)/2)]):\n        if is_kaibun(S[int((len(S)+3)/2)-1:]):\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", "!", ">"]}, "11002": {"id": 11002, "code": "S = \"akasaka\"\nN = int(len(S))\nS1 = S[:int(N/2)]\nS2 = S[int(N/2)+1:N]\nfor i in range(int(N/2)):\n    if(S[i] != S[N-1-i]):\n        print(\"No\")\n        exit()\n    if(S1[i] != S1[int(N/2)-1-i]):\n        print(\"No\")\n        exit()\n    if(S2[i] != S2[int(N/2)-1-i]):\n        print(\"No\")\n        exit()\nprint(\"Yes\")        ", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", "!", "!", ">"]}, "11003": {"id": 11003, "code": "s = \"akasaka\"\nl = len(s)\nokey = 1\nll = l//2\nfor i in range(0,l//2):\n    if s[i] != s[l-i-1]:\n        okey = 0\n        break\nif okey == 1: \n    for i in range(0,ll//2):\n        if s[i] != s[ll-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    for i in range(ll+1, ll+ll//2):\n        if s[i] != s[l-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", ">", ">", "!", "!"]}, "11004": {"id": 11004, "code": "s = \"level\"\nl = len(s)\nokey = 1\nll = l//2\nfor i in range(0,l//2):\n    if s[i] != s[l-i-1]:\n        okey = 0\n        break\nif okey == 1: \n    for i in range(0,ll//2):\n        if s[i] != s[ll-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    for i in range(ll+1, ll+ll//2):\n        if s[i] != s[l-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", ">"]}, "11005": {"id": 11005, "code": "s = \"atcoder\"\nl = len(s)\nokey = 1\nll = l//2\nfor i in range(0,l//2):\n    if s[i] != s[l-i-1]:\n        okey = 0\n        break\nif okey == 1: \n    for i in range(0,ll//2):\n        if s[i] != s[ll-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    for i in range(ll+1, ll+ll//2):\n        if s[i] != s[l-i-1]:\n            okey = 0\n            break\nif okey == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", "!", "!", ">", "!", "!", ">"]}, "11006": {"id": 11006, "code": "S = \"akasaka\"\nN = len(S)\ndef kaibun(s):\n    n = len(s)\n    f_kaibun = True\n    for i in range(int(n/2)):\n        j = n-1-i\n        if j <= i:\n            break\n        if s[i] != s[j]:\n            f_kaibun = False\n            break\n    return f_kaibun\nif kaibun(S) and kaibun(S[0:int(round((N-1)/2))]) and kaibun(S[int(round((N+3)/2))-1:N]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">", ">", ">", "!", "!"]}, "11007": {"id": 11007, "code": "S = \"level\"\nN = len(S)\ndef kaibun(s):\n    n = len(s)\n    f_kaibun = True\n    for i in range(int(n/2)):\n        j = n-1-i\n        if j <= i:\n            break\n        if s[i] != s[j]:\n            f_kaibun = False\n            break\n    return f_kaibun\nif kaibun(S) and kaibun(S[0:int(round((N-1)/2))]) and kaibun(S[int(round((N+3)/2))-1:N]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11008": {"id": 11008, "code": "S = \"atcoder\"\nN = len(S)\ndef kaibun(s):\n    n = len(s)\n    f_kaibun = True\n    for i in range(int(n/2)):\n        j = n-1-i\n        if j <= i:\n            break\n        if s[i] != s[j]:\n            f_kaibun = False\n            break\n    return f_kaibun\nif kaibun(S) and kaibun(S[0:int(round((N-1)/2))]) and kaibun(S[int(round((N+3)/2))-1:N]):\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11009": {"id": 11009, "code": "import sys\ns = \"level\"\ns2 = s[:(len(s) - 1) // 2]\ns3 = s[(len(s) + 3) // 2 - 1 :]\nif s == s[::-1]:\n    if s2 == s2[::-1]:\n        if s3 == s3[::-1]:\n            print(\"Yes\")\n            sys.exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11010": {"id": 11010, "code": "import sys\ns = \"atcoder\"\ns2 = s[:(len(s) - 1) // 2]\ns3 = s[(len(s) + 3) // 2 - 1 :]\nif s == s[::-1]:\n    if s2 == s2[::-1]:\n        if s3 == s3[::-1]:\n            print(\"Yes\")\n            sys.exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11011": {"id": 11011, "code": "def main():\n    S = \"akasaka\"\n    N = len(S)\n    if S[:(N - 1) // 2] == S[(N + 3) // 2 - 1:]:\n        print('Yes')\n    else:\n        print('No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11012": {"id": 11012, "code": "def main():\n    S = \"level\"\n    N = len(S)\n    if S[:(N - 1) // 2] == S[(N + 3) // 2 - 1:]:\n        print('Yes')\n    else:\n        print('No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11013": {"id": 11013, "code": "def main():\n    S = \"atcoder\"\n    N = len(S)\n    if S[:(N - 1) // 2] == S[(N + 3) // 2 - 1:]:\n        print('Yes')\n    else:\n        print('No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11014": {"id": 11014, "code": "s1 = \"akasaka\"\ns1r = s1[::-1]\nn1 = len(s1)\ns2 = s1[:(n1-1)//2]\ns2r = s2[::-1]\ns3 = s1[-(n1-1)//2:]\ns3r = s3[::-1]\nif s1 == s1r and s2 == s2r and s3 == s3r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11015": {"id": 11015, "code": "s1 = \"level\"\ns1r = s1[::-1]\nn1 = len(s1)\ns2 = s1[:(n1-1)//2]\ns2r = s2[::-1]\ns3 = s1[-(n1-1)//2:]\ns3r = s3[::-1]\nif s1 == s1r and s2 == s2r and s3 == s3r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11016": {"id": 11016, "code": "s1 = \"atcoder\"\ns1r = s1[::-1]\nn1 = len(s1)\ns2 = s1[:(n1-1)//2]\ns2r = s2[::-1]\ns3 = s1[-(n1-1)//2:]\ns3r = s3[::-1]\nif s1 == s1r and s2 == s2r and s3 == s3r:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11017": {"id": 11017, "code": "s = \"akasaka\"\nN = len(s)\ns_first = s[:(N-1)//2]\ns_second = s[(N+1)//2:]\nif(s == s[::-1] and s_first == s_first[::-1] and s_second == s_second[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11018": {"id": 11018, "code": "s = \"level\"\nN = len(s)\ns_first = s[:(N-1)//2]\ns_second = s[(N+1)//2:]\nif(s == s[::-1] and s_first == s_first[::-1] and s_second == s_second[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11019": {"id": 11019, "code": "s = \"atcoder\"\nN = len(s)\ns_first = s[:(N-1)//2]\ns_second = s[(N+1)//2:]\nif(s == s[::-1] and s_first == s_first[::-1] and s_second == s_second[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11020": {"id": 11020, "code": "def is_palindrome(s):\n    res = s == s[::-1]\n    return res\nS = \"akasaka\"\nN = len(S)\nans = ['No', 'Yes'][is_palindrome(S) & is_palindrome(S[:((N-1)//2)]) & is_palindrome(S[((N+1)//2):])]\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11021": {"id": 11021, "code": "def is_palindrome(s):\n    res = s == s[::-1]\n    return res\nS = \"level\"\nN = len(S)\nans = ['No', 'Yes'][is_palindrome(S) & is_palindrome(S[:((N-1)//2)]) & is_palindrome(S[((N+1)//2):])]\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11022": {"id": 11022, "code": "def is_palindrome(s):\n    res = s == s[::-1]\n    return res\nS = \"atcoder\"\nN = len(S)\nans = ['No', 'Yes'][is_palindrome(S) & is_palindrome(S[:((N-1)//2)]) & is_palindrome(S[((N+1)//2):])]\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11023": {"id": 11023, "code": "a = \"akasaka\"\nc=len(a)\nb=a[:(c-1)//2]\nd=a[(c+3)//2-1:]\nif a==a[::-1] and b==b[::-1] and d==d[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11024": {"id": 11024, "code": "a = \"level\"\nc=len(a)\nb=a[:(c-1)//2]\nd=a[(c+3)//2-1:]\nif a==a[::-1] and b==b[::-1] and d==d[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11025": {"id": 11025, "code": "a = \"atcoder\"\nc=len(a)\nb=a[:(c-1)//2]\nd=a[(c+3)//2-1:]\nif a==a[::-1] and b==b[::-1] and d==d[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11026": {"id": 11026, "code": "S = \"akasaka\"\nN = len(S)\ndef check(S1):\n    if S1 != S1[::-1]:\n        return False\n    else:\n        return True\nPOS = int((N-1)/2)\nS1 = S[0:POS]\nPOS = int((N+3)/2)\nS2 = S[POS-1:N]\nif check(S) == False or check(S1) == False or check(S2) == False:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11027": {"id": 11027, "code": "S = \"level\"\nN = len(S)\ndef check(S1):\n    if S1 != S1[::-1]:\n        return False\n    else:\n        return True\nPOS = int((N-1)/2)\nS1 = S[0:POS]\nPOS = int((N+3)/2)\nS2 = S[POS-1:N]\nif check(S) == False or check(S1) == False or check(S2) == False:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11028": {"id": 11028, "code": "S = \"atcoder\"\nN = len(S)\ndef check(S1):\n    if S1 != S1[::-1]:\n        return False\n    else:\n        return True\nPOS = int((N-1)/2)\nS1 = S[0:POS]\nPOS = int((N+3)/2)\nS2 = S[POS-1:N]\nif check(S) == False or check(S1) == False or check(S2) == False:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11029": {"id": 11029, "code": "s = \"akasaka\"\nn = len(s)\nlist_s = list(s)\nlist_s_part1 = list_s[0:(n - 1) // 2]\nlist_s_part2 = list_s[(n + 1) // 2:n]\nlist_s_rev = list(reversed(list_s))\nlist_s_part1_rev = list(reversed(list_s_part1))\nlist_s_part2_rev = list(reversed(list_s_part2))\nif ''.join(list_s) == ''.join(list_s_rev) and    ''.join(list_s_part1) == ''.join(list_s_part1_rev) and    ''.join(list_s_part2) == ''.join(list_s_part2_rev):\n    print('Yes')\nelse: print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!"]}, "11030": {"id": 11030, "code": "s = \"level\"\nn = len(s)\nlist_s = list(s)\nlist_s_part1 = list_s[0:(n - 1) // 2]\nlist_s_part2 = list_s[(n + 1) // 2:n]\nlist_s_rev = list(reversed(list_s))\nlist_s_part1_rev = list(reversed(list_s_part1))\nlist_s_part2_rev = list(reversed(list_s_part2))\nif ''.join(list_s) == ''.join(list_s_rev) and    ''.join(list_s_part1) == ''.join(list_s_part1_rev) and    ''.join(list_s_part2) == ''.join(list_s_part2_rev):\n    print('Yes')\nelse: print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "11031": {"id": 11031, "code": "s = \"atcoder\"\nn = len(s)\nlist_s = list(s)\nlist_s_part1 = list_s[0:(n - 1) // 2]\nlist_s_part2 = list_s[(n + 1) // 2:n]\nlist_s_rev = list(reversed(list_s))\nlist_s_part1_rev = list(reversed(list_s_part1))\nlist_s_part2_rev = list(reversed(list_s_part2))\nif ''.join(list_s) == ''.join(list_s_rev) and    ''.join(list_s_part1) == ''.join(list_s_part1_rev) and    ''.join(list_s_part2) == ''.join(list_s_part2_rev):\n    print('Yes')\nelse: print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "11032": {"id": 11032, "code": "S = \"akasaka\"\nN=len(S)\nSH=S[:(N-1)//2]\nST=S[(N+3)//2-1:]\np=False\nif SH==SH[::-1] and SH==ST:\n  p=True\nprint(\"Yes\" if p else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "11033": {"id": 11033, "code": "S = \"level\"\nN=len(S)\nSH=S[:(N-1)//2]\nST=S[(N+3)//2-1:]\np=False\nif SH==SH[::-1] and SH==ST:\n  p=True\nprint(\"Yes\" if p else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">"]}, "11034": {"id": 11034, "code": "S = \"atcoder\"\nN=len(S)\nSH=S[:(N-1)//2]\nST=S[(N+3)//2-1:]\np=False\nif SH==SH[::-1] and SH==ST:\n  p=True\nprint(\"Yes\" if p else \"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">"]}, "11035": {"id": 11035, "code": "s = \"akasaka\"\ncount=0\nn=int(len(s))\nt1=s[:int((n-1)/2)]\nt2=s[int((n+3)/2-1):]\nresult='No'\nif s==s[::-1]:\n    if t1==t1[::-1]:\n        if t2==t2[::-1]:\n            result='Yes'\nprint(result)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11036": {"id": 11036, "code": "s = \"level\"\ncount=0\nn=int(len(s))\nt1=s[:int((n-1)/2)]\nt2=s[int((n+3)/2-1):]\nresult='No'\nif s==s[::-1]:\n    if t1==t1[::-1]:\n        if t2==t2[::-1]:\n            result='Yes'\nprint(result)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11037": {"id": 11037, "code": "s = \"atcoder\"\ncount=0\nn=int(len(s))\nt1=s[:int((n-1)/2)]\nt2=s[int((n+3)/2-1):]\nresult='No'\nif s==s[::-1]:\n    if t1==t1[::-1]:\n        if t2==t2[::-1]:\n            result='Yes'\nprint(result)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11038": {"id": 11038, "code": "S = \"akasaka\"\nnew_S1=list(reversed(S))\nnew_S2=''.join(new_S1)\nif S==new_S2:\n    A=S[0:len(S)//2]\n    new_A1 = list(reversed(A))\n    new_A2 = ''.join(new_A1)\n    B=S[len(S)//2+1:len(S)]\n    new_B1 = list(reversed(B))\n    new_B2 = ''.join(new_B1)\n    if A==new_A2 and B==new_B2:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "11039": {"id": 11039, "code": "S = \"level\"\nnew_S1=list(reversed(S))\nnew_S2=''.join(new_S1)\nif S==new_S2:\n    A=S[0:len(S)//2]\n    new_A1 = list(reversed(A))\n    new_A2 = ''.join(new_A1)\n    B=S[len(S)//2+1:len(S)]\n    new_B1 = list(reversed(B))\n    new_B2 = ''.join(new_B1)\n    if A==new_A2 and B==new_B2:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "11040": {"id": 11040, "code": "S = \"atcoder\"\nnew_S1=list(reversed(S))\nnew_S2=''.join(new_S1)\nif S==new_S2:\n    A=S[0:len(S)//2]\n    new_A1 = list(reversed(A))\n    new_A2 = ''.join(new_A1)\n    B=S[len(S)//2+1:len(S)]\n    new_B1 = list(reversed(B))\n    new_B2 = ''.join(new_B1)\n    if A==new_A2 and B==new_B2:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "11041": {"id": 11041, "code": "S = \"akasaka\"\nflag=0\nif S==S[::-1]:\n  s = S[:(len(S)-1)//2]\n  if s==s[::-1]:\n    s2 = S[(len(S)+3)//2-1:]\n    if s2==s2[::-1]:\n      flag=1\nif flag:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!"]}, "11042": {"id": 11042, "code": "S = \"level\"\nflag=0\nif S==S[::-1]:\n  s = S[:(len(S)-1)//2]\n  if s==s[::-1]:\n    s2 = S[(len(S)+3)//2-1:]\n    if s2==s2[::-1]:\n      flag=1\nif flag:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", ">", ">"]}, "11043": {"id": 11043, "code": "S = \"atcoder\"\nflag=0\nif S==S[::-1]:\n  s = S[:(len(S)-1)//2]\n  if s==s[::-1]:\n    s2 = S[(len(S)+3)//2-1:]\n    if s2==s2[::-1]:\n      flag=1\nif flag:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", "!", "!", "!", "!", "!", ">", ">"]}, "11044": {"id": 11044, "code": "S = \"akasaka\"\nl = len(S) // 2\nll = l // 2\nformer = S[:l]\nlatter = S[l+1:]\nfor i in range(l):\n  if S[i] != S[-i-1]:\n    print(\"No\")\n    break\nelse:\n  for i in range(ll):\n    if former[i] != former[-i-1] or latter[i] != latter[-i-1]:\n      print(\"No\")\n      break\n  else:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", "!", "!", "!", ">"]}, "11045": {"id": 11045, "code": "S = \"level\"\nl = len(S) // 2\nll = l // 2\nformer = S[:l]\nlatter = S[l+1:]\nfor i in range(l):\n  if S[i] != S[-i-1]:\n    print(\"No\")\n    break\nelse:\n  for i in range(ll):\n    if former[i] != former[-i-1] or latter[i] != latter[-i-1]:\n      print(\"No\")\n      break\n  else:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", ">", ">", ">", "!", "!"]}, "11046": {"id": 11046, "code": "S = \"atcoder\"\nl = len(S) // 2\nll = l // 2\nformer = S[:l]\nlatter = S[l+1:]\nfor i in range(l):\n  if S[i] != S[-i-1]:\n    print(\"No\")\n    break\nelse:\n  for i in range(ll):\n    if former[i] != former[-i-1] or latter[i] != latter[-i-1]:\n      print(\"No\")\n      break\n  else:\n    print(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!"]}, "11047": {"id": 11047, "code": "s = \"akasaka\"\nn=len(s)\nx=n//2\na=s[0:x]\nb=s[x+1:]\nif a==b:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!"]}, "11048": {"id": 11048, "code": "s = \"level\"\nn=len(s)\nx=n//2\na=s[0:x]\nb=s[x+1:]\nif a==b:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11049": {"id": 11049, "code": "s = \"atcoder\"\nn=len(s)\nx=n//2\na=s[0:x]\nb=s[x+1:]\nif a==b:print('Yes')\nelse:print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11050": {"id": 11050, "code": "s = \"akasaka\"\ndef kaibun(x):\n    ans=1\n    for i in range(len(x)//2):\n        if x[i]!=x[-i-1]:\n            ans=0\n            break\n    return ans\nn=len(s)\na1=kaibun(s)\na2=kaibun(s[0:(n-1)//2])\na3=kaibun(s[-1+(n+3)//2:n])\nif a1==1 and a2==1 and a3==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11051": {"id": 11051, "code": "s = \"level\"\ndef kaibun(x):\n    ans=1\n    for i in range(len(x)//2):\n        if x[i]!=x[-i-1]:\n            ans=0\n            break\n    return ans\nn=len(s)\na1=kaibun(s)\na2=kaibun(s[0:(n-1)//2])\na3=kaibun(s[-1+(n+3)//2:n])\nif a1==1 and a2==1 and a3==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11052": {"id": 11052, "code": "s = \"atcoder\"\ndef kaibun(x):\n    ans=1\n    for i in range(len(x)//2):\n        if x[i]!=x[-i-1]:\n            ans=0\n            break\n    return ans\nn=len(s)\na1=kaibun(s)\na2=kaibun(s[0:(n-1)//2])\na3=kaibun(s[-1+(n+3)//2:n])\nif a1==1 and a2==1 and a3==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11053": {"id": 11053, "code": "S = \"akasaka\"\nN=len(S)\nSS=S[0:(N-1)//2]\nSSS=S[(N+1)//2:N+1]\nfor i in range((N-1)//2):\n  if S[i]!=S[-1-i]:print('No');exit()\n  if SS[i]!=SS[-1-i]:print('No');exit()\n  if SSS[i]!=SSS[-1-i]:print('No');exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11054": {"id": 11054, "code": "s = \"akasaka\"\nn=len(s)//2\nif s[:n]==s[n+1:]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!"]}, "11055": {"id": 11055, "code": "s = \"level\"\nn=len(s)//2\nif s[:n]==s[n+1:]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">"]}, "11056": {"id": 11056, "code": "s = \"atcoder\"\nn=len(s)//2\nif s[:n]==s[n+1:]:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">"]}, "11057": {"id": 11057, "code": "s = \"akasaka\"\nn = len(s)\nt = s[:(n-1)//2]\nu = s[(n+3)//2-1:]\nif (s == s[::-1]\n    and t == t[::-1]\n    and u == u[::-1]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11058": {"id": 11058, "code": "s = \"level\"\nn = len(s)\nt = s[:(n-1)//2]\nu = s[(n+3)//2-1:]\nif (s == s[::-1]\n    and t == t[::-1]\n    and u == u[::-1]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11059": {"id": 11059, "code": "s = \"atcoder\"\nn = len(s)\nt = s[:(n-1)//2]\nu = s[(n+3)//2-1:]\nif (s == s[::-1]\n    and t == t[::-1]\n    and u == u[::-1]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11060": {"id": 11060, "code": "s = \"akasaka\"\nn = len(s)\nz = 'Yes'\nfor i in range(n//2):\n    if s[i] != s[-1-i]:\n        z = 'No'\nif z == 'Yes':\n    for h in range(len(s[:(n-1)//2])):\n        if s[:(n-1)//2][h] != s[:(n-1)//2][-1-h]:\n            z = 'No'\n            break\nif z == 'Yes':\n    for j in range(len(s[((n+3)//2)-1:])):\n        if s[((n+3)//2)-1:][j] != s[((n+3)//2)-1:][-1-j]:\n            z = 'No'\n            break\nprint(z)", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11061": {"id": 11061, "code": "s = \"level\"\nn = len(s)\nz = 'Yes'\nfor i in range(n//2):\n    if s[i] != s[-1-i]:\n        z = 'No'\nif z == 'Yes':\n    for h in range(len(s[:(n-1)//2])):\n        if s[:(n-1)//2][h] != s[:(n-1)//2][-1-h]:\n            z = 'No'\n            break\nif z == 'Yes':\n    for j in range(len(s[((n+3)//2)-1:])):\n        if s[((n+3)//2)-1:][j] != s[((n+3)//2)-1:][-1-j]:\n            z = 'No'\n            break\nprint(z)", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11062": {"id": 11062, "code": "s = \"atcoder\"\nn = len(s)\nz = 'Yes'\nfor i in range(n//2):\n    if s[i] != s[-1-i]:\n        z = 'No'\nif z == 'Yes':\n    for h in range(len(s[:(n-1)//2])):\n        if s[:(n-1)//2][h] != s[:(n-1)//2][-1-h]:\n            z = 'No'\n            break\nif z == 'Yes':\n    for j in range(len(s[((n+3)//2)-1:])):\n        if s[((n+3)//2)-1:][j] != s[((n+3)//2)-1:][-1-j]:\n            z = 'No'\n            break\nprint(z)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", "!", "!", ">"]}, "11063": {"id": 11063, "code": "def check(S, N):\n  for i in range((N-1)//2):\n    if S[i] != S[-(1+i)]:\n      print(\"No\")\n      exit()\ndef ot_check(S, N):\n  for i in range(N//2):\n    if S[i] != S[-(1+i)]:\n      print(\"No\")\n      exit()\nS = \"akasaka\"\nN = len(S)\nSS = S[0:(N-1)//2]\nNN = len(SS)\nSSS = S[((N+3)//2)-1:]\nNNN = len(SSS)\ncheck(S, N)\nif len(SS)%2 == 0:\n  ot_check(SS, NN)\nelse:\n  check(SS, NN)\nif len(SSS)%2 == 0:\n  ot_check(SSS, NNN)\nelse:\n  check(SSS, NNN)\nprint(\"Yes\")", "coverage": [">", ">", ">", "!", "!", ">", "!", "!", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "11064": {"id": 11064, "code": "S = \"akasaka\"\nflag = 0\nN = len(S)\ns1 = int((N-1)/2)\ns2 = int((N+3)/2)\nif S[0:s1] == S[s1+1:]:\n  flag = 1\nelse:\n  flag = 0    \nif S[s2-1:] == S[:s2-2]:\n  flag = 1\nelse:\n  flag = 0\nif flag == 1:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!"]}, "11065": {"id": 11065, "code": "S = \"level\"\nflag = 0\nN = len(S)\ns1 = int((N-1)/2)\ns2 = int((N+3)/2)\nif S[0:s1] == S[s1+1:]:\n  flag = 1\nelse:\n  flag = 0    \nif S[s2-1:] == S[:s2-2]:\n  flag = 1\nelse:\n  flag = 0\nif flag == 1:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "11066": {"id": 11066, "code": "S = \"atcoder\"\nflag = 0\nN = len(S)\ns1 = int((N-1)/2)\ns2 = int((N+3)/2)\nif S[0:s1] == S[s1+1:]:\n  flag = 1\nelse:\n  flag = 0    \nif S[s2-1:] == S[:s2-2]:\n  flag = 1\nelse:\n  flag = 0\nif flag == 1:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "11067": {"id": 11067, "code": "import math\nfrom math import gcd\nINF = float(\"inf\")\nimport sys\ninput=sys.stdin.readline\nimport itertools\ndef main():\n    s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\n    n = len(s)\n    h = n//2\n    f = s[:h]\n    l = s[h+1:]\n    if s == s[::-1] and f == f[::-1] and l == l[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__==\"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11068": {"id": 11068, "code": "import math\nfrom math import gcd\nINF = float(\"inf\")\nimport sys\ninput=sys.stdin.readline\nimport itertools\ndef main():\n    s = ['l', 'e', 'v', 'e', 'l']\n    n = len(s)\n    h = n//2\n    f = s[:h]\n    l = s[h+1:]\n    if s == s[::-1] and f == f[::-1] and l == l[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__==\"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11069": {"id": 11069, "code": "import math\nfrom math import gcd\nINF = float(\"inf\")\nimport sys\ninput=sys.stdin.readline\nimport itertools\ndef main():\n    s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\n    n = len(s)\n    h = n//2\n    f = s[:h]\n    l = s[h+1:]\n    if s == s[::-1] and f == f[::-1] and l == l[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__==\"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11070": {"id": 11070, "code": "s = \"akasaka\"\nn = len(s)\nl1 = int((n-1)/2)\nl2 = int((n+3)/2)\nif s == s[::-1] and s[:l1] == s[l2-1:n] :   \n    print('Yes')\nelse :\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11071": {"id": 11071, "code": "s = \"level\"\nn = len(s)\nl1 = int((n-1)/2)\nl2 = int((n+3)/2)\nif s == s[::-1] and s[:l1] == s[l2-1:n] :   \n    print('Yes')\nelse :\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11072": {"id": 11072, "code": "s = \"atcoder\"\nn = len(s)\nl1 = int((n-1)/2)\nl2 = int((n+3)/2)\nif s == s[::-1] and s[:l1] == s[l2-1:n] :   \n    print('Yes')\nelse :\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11073": {"id": 11073, "code": "S = \"akasaka\"\nflag = 0\nfor i in range(0, len(S), 1):\n\tif S[i] != S[len(S)-1-i]:\n\t\tflag = 1\nfor i in range(0, len(S)//2, 1):\n\tif S[i] != S[len(S)//2-1-i]:\n\t\tflag = 1\nif flag == 0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", "!"]}, "11074": {"id": 11074, "code": "S = \"level\"\nflag = 0\nfor i in range(0, len(S), 1):\n\tif S[i] != S[len(S)-1-i]:\n\t\tflag = 1\nfor i in range(0, len(S)//2, 1):\n\tif S[i] != S[len(S)//2-1-i]:\n\t\tflag = 1\nif flag == 0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">"]}, "11075": {"id": 11075, "code": "S = \"atcoder\"\nflag = 0\nfor i in range(0, len(S), 1):\n\tif S[i] != S[len(S)-1-i]:\n\t\tflag = 1\nfor i in range(0, len(S)//2, 1):\n\tif S[i] != S[len(S)//2-1-i]:\n\t\tflag = 1\nif flag == 0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11076": {"id": 11076, "code": "import math\ns = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\ns1 = s[ : (n-1) // 2]\ns2 = s[(n+3) // 2 - 1 : n]\nflag = 1\nfor i in range(len(s) // 2):\n    if s[i] != s[- i - 1]:\n        flag = 0\nfor i in range(len(s1) // 2):\n    if s1[i] != s1[- i - 1]:\n        flag = 0\nfor i in range(len(s2) // 2):\n    if s2[i] != s2[- i - 1]:\n        flag = 0\nprint('Yes' if flag == 1  else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", "!", ">", ">", "!", ">"]}, "11077": {"id": 11077, "code": "import math\ns = ['l', 'e', 'v', 'e', 'l']\nn = len(s)\ns1 = s[ : (n-1) // 2]\ns2 = s[(n+3) // 2 - 1 : n]\nflag = 1\nfor i in range(len(s) // 2):\n    if s[i] != s[- i - 1]:\n        flag = 0\nfor i in range(len(s1) // 2):\n    if s1[i] != s1[- i - 1]:\n        flag = 0\nfor i in range(len(s2) // 2):\n    if s2[i] != s2[- i - 1]:\n        flag = 0\nprint('Yes' if flag == 1  else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">"]}, "11078": {"id": 11078, "code": "import math\ns = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nn = len(s)\ns1 = s[ : (n-1) // 2]\ns2 = s[(n+3) // 2 - 1 : n]\nflag = 1\nfor i in range(len(s) // 2):\n    if s[i] != s[- i - 1]:\n        flag = 0\nfor i in range(len(s1) // 2):\n    if s1[i] != s1[- i - 1]:\n        flag = 0\nfor i in range(len(s2) // 2):\n    if s2[i] != s2[- i - 1]:\n        flag = 0\nprint('Yes' if flag == 1  else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11079": {"id": 11079, "code": "s = \"akasaka\"\nn = len(s)\nn2 = (n+1)//2\nfor i in range(n):\n  if(s[i] != s[n-i-1]):\n    print(\"No\")\n    exit()\nfor i in range((n-1)//2):\n  if(s[i] != s[n2-2-i]):\n    print(\"No\")\n    exit()\n  if(s[n2+i] != s[n-i-1]):\n    print(\"No\")\n    exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", "!", "!", ">"]}, "11080": {"id": 11080, "code": "S = \"akasaka\"\nans = 'Yes'\nfor i in range(len(S)//2):\n  if S[i] != S[len(S)-1-i]:\n    ans = 'No'\nfront = S[0:(len(S)-1)//2]\nfor i in range(len(front)//2):\n  if front[i] != front[len(front)-1-i]:\n    ans = 'No'\nend = S[(len(S)+1)//2:]\nfor i in range(len(end)//2):\n  if end[i] != front[len(end)-1-i]:\n    ans = 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", "!", ">", ">", ">", "!", ">"]}, "11081": {"id": 11081, "code": "S = \"level\"\nans = 'Yes'\nfor i in range(len(S)//2):\n  if S[i] != S[len(S)-1-i]:\n    ans = 'No'\nfront = S[0:(len(S)-1)//2]\nfor i in range(len(front)//2):\n  if front[i] != front[len(front)-1-i]:\n    ans = 'No'\nend = S[(len(S)+1)//2:]\nfor i in range(len(end)//2):\n  if end[i] != front[len(end)-1-i]:\n    ans = 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", ">"]}, "11082": {"id": 11082, "code": "S = \"atcoder\"\nans = 'Yes'\nfor i in range(len(S)//2):\n  if S[i] != S[len(S)-1-i]:\n    ans = 'No'\nfront = S[0:(len(S)-1)//2]\nfor i in range(len(front)//2):\n  if front[i] != front[len(front)-1-i]:\n    ans = 'No'\nend = S[(len(S)+1)//2:]\nfor i in range(len(end)//2):\n  if end[i] != front[len(end)-1-i]:\n    ans = 'No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11083": {"id": 11083, "code": "S = \"akasaka\"\nN = len(S)\nr_S = S[::-1]\nhead_S = S[0: int((N - 1) / 2)]\nr_head_S = head_S[::-1]\nend_S = S[int((N+3)/2 - 1) : N+1]\nr_end_S = end_S[::-1]\nif S == r_S and head_S == r_head_S and end_S == r_end_S:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11084": {"id": 11084, "code": "S = \"level\"\nN = len(S)\nr_S = S[::-1]\nhead_S = S[0: int((N - 1) / 2)]\nr_head_S = head_S[::-1]\nend_S = S[int((N+3)/2 - 1) : N+1]\nr_end_S = end_S[::-1]\nif S == r_S and head_S == r_head_S and end_S == r_end_S:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11085": {"id": 11085, "code": "S = \"atcoder\"\nN = len(S)\nr_S = S[::-1]\nhead_S = S[0: int((N - 1) / 2)]\nr_head_S = head_S[::-1]\nend_S = S[int((N+3)/2 - 1) : N+1]\nr_end_S = end_S[::-1]\nif S == r_S and head_S == r_head_S and end_S == r_end_S:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11086": {"id": 11086, "code": "word = \"akasaka\"\nn = len(word)\nhanbun = int((n-1)/2)\nnotk = 0\nfor i in range(hanbun):\n    if word[i] != word[n-i-1]:\n        notk = 1\n        break\nif hanbun % 2 == 0:\n    hanbun2 = int(hanbun/2)\nelse:\n    hanbun2 = int((hanbun-1)/2)\nfor j in range(hanbun2):\n    if word[j] != word[hanbun-j-1]:\n        notk = 1\n        break\nif notk == 1:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "11087": {"id": 11087, "code": "word = \"level\"\nn = len(word)\nhanbun = int((n-1)/2)\nnotk = 0\nfor i in range(hanbun):\n    if word[i] != word[n-i-1]:\n        notk = 1\n        break\nif hanbun % 2 == 0:\n    hanbun2 = int(hanbun/2)\nelse:\n    hanbun2 = int((hanbun-1)/2)\nfor j in range(hanbun2):\n    if word[j] != word[hanbun-j-1]:\n        notk = 1\n        break\nif notk == 1:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11088": {"id": 11088, "code": "word = \"atcoder\"\nn = len(word)\nhanbun = int((n-1)/2)\nnotk = 0\nfor i in range(hanbun):\n    if word[i] != word[n-i-1]:\n        notk = 1\n        break\nif hanbun % 2 == 0:\n    hanbun2 = int(hanbun/2)\nelse:\n    hanbun2 = int((hanbun-1)/2)\nfor j in range(hanbun2):\n    if word[j] != word[hanbun-j-1]:\n        notk = 1\n        break\nif notk == 1:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11089": {"id": 11089, "code": "s = \"akasaka\"\ndef is_palinedrome(st):\n    for i in range(len(st)//2):\n        if st[i] != st[-(i+1)]:\n            return False\n    return True\ns_pali = is_palinedrome(s)\nsub_pali_left = is_palinedrome(s[:len(s)//2])\nsub_pali_right = is_palinedrome(s[len(s)//2+1:])\nif s_pali and sub_pali_left and sub_pali_right:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11090": {"id": 11090, "code": "s = \"level\"\ndef is_palinedrome(st):\n    for i in range(len(st)//2):\n        if st[i] != st[-(i+1)]:\n            return False\n    return True\ns_pali = is_palinedrome(s)\nsub_pali_left = is_palinedrome(s[:len(s)//2])\nsub_pali_right = is_palinedrome(s[len(s)//2+1:])\nif s_pali and sub_pali_left and sub_pali_right:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11091": {"id": 11091, "code": "s = \"atcoder\"\ndef is_palinedrome(st):\n    for i in range(len(st)//2):\n        if st[i] != st[-(i+1)]:\n            return False\n    return True\ns_pali = is_palinedrome(s)\nsub_pali_left = is_palinedrome(s[:len(s)//2])\nsub_pali_right = is_palinedrome(s[len(s)//2+1:])\nif s_pali and sub_pali_left and sub_pali_right:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">"]}, "11092": {"id": 11092, "code": "s = \"akasaka\"\nl = len(s)\ndef check(a):\n  n = len(a)\n  if n % 2 == 0:\n    for i in range(n//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\n  else:\n    for i in range((n-1)//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\nres = \"No\"\nif check(s):\n  if check(s[:(l-1)//2]):\n    if check(s[(l+3)//2 - 1:]):\n      res = \"Yes\"\nprint(res)", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">"]}, "11093": {"id": 11093, "code": "s = \"level\"\nl = len(s)\ndef check(a):\n  n = len(a)\n  if n % 2 == 0:\n    for i in range(n//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\n  else:\n    for i in range((n-1)//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\nres = \"No\"\nif check(s):\n  if check(s[:(l-1)//2]):\n    if check(s[(l+3)//2 - 1:]):\n      res = \"Yes\"\nprint(res)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", ">", ">", ">", ">", "!", "!", ">"]}, "11094": {"id": 11094, "code": "s = \"atcoder\"\nl = len(s)\ndef check(a):\n  n = len(a)\n  if n % 2 == 0:\n    for i in range(n//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\n  else:\n    for i in range((n-1)//2):\n      if a[i] != a[n-i-1]:\n        return False\n    return True\nres = \"No\"\nif check(s):\n  if check(s[:(l-1)//2]):\n    if check(s[(l+3)//2 - 1:]):\n      res = \"Yes\"\nprint(res)", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", ">", ">", ">", "!", ">", ">", "!", "!", "!", ">"]}, "11095": {"id": 11095, "code": "s = \"akasaka\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[(n+3)//2-1:]\ndef check(s):\n  i=0\n  j=len(s)-1\n  while j>i:\n    if s[j]!=s[i]:\n      return False\n    j-=1\n    i+=1\n  return True\nif check(s) and check(s1) and check(s2):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", "!", "!"]}, "11096": {"id": 11096, "code": "s = \"level\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[(n+3)//2-1:]\ndef check(s):\n  i=0\n  j=len(s)-1\n  while j>i:\n    if s[j]!=s[i]:\n      return False\n    j-=1\n    i+=1\n  return True\nif check(s) and check(s1) and check(s2):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11097": {"id": 11097, "code": "s = \"atcoder\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[(n+3)//2-1:]\ndef check(s):\n  i=0\n  j=len(s)-1\n  while j>i:\n    if s[j]!=s[i]:\n      return False\n    j-=1\n    i+=1\n  return True\nif check(s) and check(s1) and check(s2):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "11098": {"id": 11098, "code": "s = \"akasaka\"\ndef kaibun(w):\n    for i in range(len(w)):\n        if w[i]!=w[len(w)-1-i]:\n            return False\n    return True\nn=len(s)\nprint(\"Yes\") if all([kaibun(s) , kaibun(s[:(n-1)//2]) , kaibun(s[(n+3)//2-1:])]) else print(\"No\")", "coverage": [">", ">", ">", ">", "!", ">", ">", ">"]}, "11099": {"id": 11099, "code": "s = \"level\"\ndef kaibun(w):\n    for i in range(len(w)):\n        if w[i]!=w[len(w)-1-i]:\n            return False\n    return True\nn=len(s)\nprint(\"Yes\") if all([kaibun(s) , kaibun(s[:(n-1)//2]) , kaibun(s[(n+3)//2-1:])]) else print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "11100": {"id": 11100, "code": "s = \"atcoder\"\ndef kaibun(w):\n    for i in range(len(w)):\n        if w[i]!=w[len(w)-1-i]:\n            return False\n    return True\nn=len(s)\nprint(\"Yes\") if all([kaibun(s) , kaibun(s[:(n-1)//2]) , kaibun(s[(n+3)//2-1:])]) else print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", ">", ">"]}, "11101": {"id": 11101, "code": "S = \"akasaka\"\nL=(len(S)-1)//2\nans='Yes'\nif S[:L]!=S[-L:]:\n    ans='No'\nfor n in range(L):\n    m=L-1-n\n    if S[n]!=S[m]:\n        ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", "!", ">", ">", ">", "!", ">"]}, "11102": {"id": 11102, "code": "S = \"level\"\nL=(len(S)-1)//2\nans='Yes'\nif S[:L]!=S[-L:]:\n    ans='No'\nfor n in range(L):\n    m=L-1-n\n    if S[n]!=S[m]:\n        ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11103": {"id": 11103, "code": "S = \"atcoder\"\nL=(len(S)-1)//2\nans='Yes'\nif S[:L]!=S[-L:]:\n    ans='No'\nfor n in range(L):\n    m=L-1-n\n    if S[n]!=S[m]:\n        ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11104": {"id": 11104, "code": "S = \"akasaka\"\nif len(S) % 4 == 1:\n    m = len(S) // 4\n    for i in range(m):\n        if (S[i] != S[2 * m - i - 1] or\n            S[2 * m - i - 1] != S[2 * m + 1 + i] or\n            S[2 * m + 1 + i] != S[4 * m - i]):\n            print('No')\n            exit()    \nelse:\n    m = len(S) // 4 + 1\n    for i in range(m - 1):\n        if (S[i] != S[2 * m - i - 2] or\n            S[2 * m - i - 2] != S[2 * m + i] or\n            S[2 * m + i] != S[4 * m - i - 2]):\n            print('No')\n            exit()\n    if S[m - 1] != S[3 * m - 1]:\n        print('No')\n        exit()\nprint('Yes')", "coverage": [">", ">", "!", "!", "!", "!", "!", "!", "!", "!", ">", ">", ">", ">", ">", "!", "!", ">", "!", "!", ">"]}, "11105": {"id": 11105, "code": "s = \"akasaka\"\ns_len = int((len(s) - 1) / 2)\ns_1 = s[:s_len]\ns_1_len = int((len(s_1) - 1) / 2)\ns_2 = s[s_len+1:]\ns_2_len = int((len(s_2) - 1) / 2)\nans = 'Yes'\nfor i in range(s_len+1):\n  if s[i] != s[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_1_len+1):\n  if s_1[i] != s_1[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_2_len+1):\n  if s_2[i] != s_2[-i-1]:\n    ans = 'No'\n    break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">", "!", "!", ">"]}, "11106": {"id": 11106, "code": "s = \"level\"\ns_len = int((len(s) - 1) / 2)\ns_1 = s[:s_len]\ns_1_len = int((len(s_1) - 1) / 2)\ns_2 = s[s_len+1:]\ns_2_len = int((len(s_2) - 1) / 2)\nans = 'Yes'\nfor i in range(s_len+1):\n  if s[i] != s[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_1_len+1):\n  if s_1[i] != s_1[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_2_len+1):\n  if s_2[i] != s_2[-i-1]:\n    ans = 'No'\n    break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11107": {"id": 11107, "code": "s = \"atcoder\"\ns_len = int((len(s) - 1) / 2)\ns_1 = s[:s_len]\ns_1_len = int((len(s_1) - 1) / 2)\ns_2 = s[s_len+1:]\ns_2_len = int((len(s_2) - 1) / 2)\nans = 'Yes'\nfor i in range(s_len+1):\n  if s[i] != s[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_1_len+1):\n  if s_1[i] != s_1[-i-1]:\n    ans = 'No'\n    break\nfor i in range(s_2_len+1):\n  if s_2[i] != s_2[-i-1]:\n    ans = 'No'\n    break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11108": {"id": 11108, "code": "S = \"akasaka\"\nL = len(S)\nfor i in range((L-1)//2):\n    if S[i] != S[L-1-i]:\n        print(\"No\")\n        exit()\nfor i in range((L-1)//4):\n    if S[i] != S[(L-1)//2-1-i]:\n        print(\"No\")\n        exit()\nfor i in range(L-1, L - (L-1)//4, -1):\n    if S[i] != S[i - (L-1)//2-1]:\n        print(\"No\")\n        exit()\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", "!", "!", "!", ">"]}, "11109": {"id": 11109, "code": "s = \"akasaka\"\nn = len(s)\ncnt = 0\ns1 = s[:((n-1)//2)]\ns2 = s[(n+3)//2 -1:n]\nfor i in range(n//2):\n    if s[i] != s[-i-1]:\n        print('No')\n        exit()\n    else:\n        if s1[i] != s2[i]:\n            print('No')\n            exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!", ">"]}, "11110": {"id": 11110, "code": "s = \"level\"\nmozisuu=len(s)\ndef hanteiki(s):\n    hantei=True\n    mozisuu=len(s)\n    for i in range(len(s)):\n        if s[i]!=s[mozisuu-i-1]:\n            hantei=False\n    return hantei\nif hanteiki(s):\n    if hanteiki(s[0:(mozisuu-1)//2]):\n        if hanteiki(s[(mozisuu+3)//2-1:]):\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11111": {"id": 11111, "code": "s = \"atcoder\"\nmozisuu=len(s)\ndef hanteiki(s):\n    hantei=True\n    mozisuu=len(s)\n    for i in range(len(s)):\n        if s[i]!=s[mozisuu-i-1]:\n            hantei=False\n    return hantei\nif hanteiki(s):\n    if hanteiki(s[0:(mozisuu-1)//2]):\n        if hanteiki(s[(mozisuu+3)//2-1:]):\n            print(\"Yes\")\n            exit()\nprint(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11112": {"id": 11112, "code": "S = \"akasaka\"\nlenS = len(S)\nans = \"No\"\ndef checkPalindrome(string):\n    l = len(string)\n    string2 = string[::-1]\n    if string[:l//2] == string2[:l//2]:\n        return True\n    else:\n        return False\nif checkPalindrome(S):\n    if checkPalindrome(S[:(lenS-1)//2]):\n        if checkPalindrome(S[(lenS+3)//2-1:]):\n            ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">"]}, "11113": {"id": 11113, "code": "S = \"level\"\nlenS = len(S)\nans = \"No\"\ndef checkPalindrome(string):\n    l = len(string)\n    string2 = string[::-1]\n    if string[:l//2] == string2[:l//2]:\n        return True\n    else:\n        return False\nif checkPalindrome(S):\n    if checkPalindrome(S[:(lenS-1)//2]):\n        if checkPalindrome(S[(lenS+3)//2-1:]):\n            ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!", ">"]}, "11114": {"id": 11114, "code": "S = \"atcoder\"\nlenS = len(S)\nans = \"No\"\ndef checkPalindrome(string):\n    l = len(string)\n    string2 = string[::-1]\n    if string[:l//2] == string2[:l//2]:\n        return True\n    else:\n        return False\nif checkPalindrome(S):\n    if checkPalindrome(S[:(lenS-1)//2]):\n        if checkPalindrome(S[(lenS+3)//2-1:]):\n            ans = \"Yes\"\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", "!", "!", "!", ">"]}, "11115": {"id": 11115, "code": "import sys\ninput = \"<function <lambda>>\"\ndef pal(s, L, R):\n    return s[L] == s[R] and (L >= R or pal(s, L + 1, R - 1))\ns = \"akasaka\"\nn = len(s)\nprint('Yes' if pal(s, 0, n - 1) and pal(s, 0, (n - 1) // 2 - 1) and pal(s, (n + 3) // 2 - 1, n - 1) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11116": {"id": 11116, "code": "import sys\ninput = \"<function <lambda>>\"\ndef pal(s, L, R):\n    return s[L] == s[R] and (L >= R or pal(s, L + 1, R - 1))\ns = \"level\"\nn = len(s)\nprint('Yes' if pal(s, 0, n - 1) and pal(s, 0, (n - 1) // 2 - 1) and pal(s, (n + 3) // 2 - 1, n - 1) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11117": {"id": 11117, "code": "import sys\ninput = \"<function <lambda>>\"\ndef pal(s, L, R):\n    return s[L] == s[R] and (L >= R or pal(s, L + 1, R - 1))\ns = \"atcoder\"\nn = len(s)\nprint('Yes' if pal(s, 0, n - 1) and pal(s, 0, (n - 1) // 2 - 1) and pal(s, (n + 3) // 2 - 1, n - 1) else 'No')", "coverage": [">", ">", ">", ">", ">", ">", ">"]}, "11118": {"id": 11118, "code": "s = \"akasaka\"\nc = int((len(s) - 1)/2)\nans = (list(s) == list(reversed(s)) and list(s[:c]) == list(reversed(s[:c])) and list(s[(c+1):]) == list(reversed(s[(c+1):])))\nprint([\"No\", \"Yes\"][ans])", "coverage": [">", ">", ">", ">"]}, "11119": {"id": 11119, "code": "s = \"level\"\nc = int((len(s) - 1)/2)\nans = (list(s) == list(reversed(s)) and list(s[:c]) == list(reversed(s[:c])) and list(s[(c+1):]) == list(reversed(s[(c+1):])))\nprint([\"No\", \"Yes\"][ans])", "coverage": [">", ">", ">", ">"]}, "11120": {"id": 11120, "code": "s = \"atcoder\"\nc = int((len(s) - 1)/2)\nans = (list(s) == list(reversed(s)) and list(s[:c]) == list(reversed(s[:c])) and list(s[(c+1):]) == list(reversed(s[(c+1):])))\nprint([\"No\", \"Yes\"][ans])", "coverage": [">", ">", ">", ">"]}, "11121": {"id": 11121, "code": "S = \"akasaka\"\nN = len(S)\nsubS1 = S[:int((N - 1) / 2)]\nsubS2 = S[int((N + 3) / 2) - 1:]\nif subS1 == subS1[::-1] and subS2 == subS2[::-1] and S == S[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11122": {"id": 11122, "code": "S = \"level\"\nN = len(S)\nsubS1 = S[:int((N - 1) / 2)]\nsubS2 = S[int((N + 3) / 2) - 1:]\nif subS1 == subS1[::-1] and subS2 == subS2[::-1] and S == S[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11123": {"id": 11123, "code": "S = \"atcoder\"\nN = len(S)\nsubS1 = S[:int((N - 1) / 2)]\nsubS2 = S[int((N + 3) / 2) - 1:]\nif subS1 == subS1[::-1] and subS2 == subS2[::-1] and S == S[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11124": {"id": 11124, "code": "S = \"akasaka\"\nN = len(S)\nS_1 = S[0:int((N-1)/2)]\nS_2 = S[int((N+3)/2-1):N+1]\nprint('Yes' if S[::-1] == S and S_1[::-1] == S_1 and S_2[::-1] == S_2 else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "11125": {"id": 11125, "code": "S = \"level\"\nN = len(S)\nS_1 = S[0:int((N-1)/2)]\nS_2 = S[int((N+3)/2-1):N+1]\nprint('Yes' if S[::-1] == S and S_1[::-1] == S_1 and S_2[::-1] == S_2 else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "11126": {"id": 11126, "code": "S = \"atcoder\"\nN = len(S)\nS_1 = S[0:int((N-1)/2)]\nS_2 = S[int((N+3)/2-1):N+1]\nprint('Yes' if S[::-1] == S and S_1[::-1] == S_1 and S_2[::-1] == S_2 else 'No')", "coverage": [">", ">", ">", ">", ">"]}, "11127": {"id": 11127, "code": "S = \"akasaka\"\nN=len(S)\ndef isPalindrome(s):\n  n = len(s)\n  flag=True\n  slist=list(s)\n  for i, c in enumerate(slist):\n    if c!=slist[n-1-i]:\n      flag=False\n    if i > n-i:\n      break\n  return flag\nSlist=list(S)\nif isPalindrome(S) and   isPalindrome(Slist[0:int((N-1)/2)]) and   isPalindrome(Slist[int((N+3)/2)-1:N]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11128": {"id": 11128, "code": "S = \"level\"\nN=len(S)\ndef isPalindrome(s):\n  n = len(s)\n  flag=True\n  slist=list(s)\n  for i, c in enumerate(slist):\n    if c!=slist[n-1-i]:\n      flag=False\n    if i > n-i:\n      break\n  return flag\nSlist=list(S)\nif isPalindrome(S) and   isPalindrome(Slist[0:int((N-1)/2)]) and   isPalindrome(Slist[int((N+3)/2)-1:N]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11129": {"id": 11129, "code": "S = \"atcoder\"\nN=len(S)\ndef isPalindrome(s):\n  n = len(s)\n  flag=True\n  slist=list(s)\n  for i, c in enumerate(slist):\n    if c!=slist[n-1-i]:\n      flag=False\n    if i > n-i:\n      break\n  return flag\nSlist=list(S)\nif isPalindrome(S) and   isPalindrome(Slist[0:int((N-1)/2)]) and   isPalindrome(Slist[int((N+3)/2)-1:N]):\n  print('Yes')\nelse:\n  print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11130": {"id": 11130, "code": "S = \"akasaka\"\nN = len(S)\ndef isp(s):\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] != s[n - 1 - i]:\n      return False\n  return True\nif isp(S) and isp(S[0:(N - 1) // 2]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">", ">", "!", "!"]}, "11131": {"id": 11131, "code": "S = \"level\"\nN = len(S)\ndef isp(s):\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] != s[n - 1 - i]:\n      return False\n  return True\nif isp(S) and isp(S[0:(N - 1) // 2]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11132": {"id": 11132, "code": "S = \"atcoder\"\nN = len(S)\ndef isp(s):\n  n = len(s)\n  for i in range(n // 2):\n    if s[i] != s[n - 1 - i]:\n      return False\n  return True\nif isp(S) and isp(S[0:(N - 1) // 2]):\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", ">", "!", "!", ">"]}, "11133": {"id": 11133, "code": "s = \"akasaka\"\ntarget = s[:(len(s)-1)//2]\ntarget2 = s[(len(s)+3)//2-1:]\nif target == target2:\n    l, r = 0, len(s)-1\n    flag = True\n    while l <= r:\n        if s[l] == s[r]:\n            l += 1\n            r -= 1\n        else:\n            print('No')\n            exit(0)\n    print(\"Yes\")\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", ">", "!", "!"]}, "11134": {"id": 11134, "code": "s = \"level\"\ntarget = s[:(len(s)-1)//2]\ntarget2 = s[(len(s)+3)//2-1:]\nif target == target2:\n    l, r = 0, len(s)-1\n    flag = True\n    while l <= r:\n        if s[l] == s[r]:\n            l += 1\n            r -= 1\n        else:\n            print('No')\n            exit(0)\n    print(\"Yes\")\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "11135": {"id": 11135, "code": "s = \"atcoder\"\ntarget = s[:(len(s)-1)//2]\ntarget2 = s[(len(s)+3)//2-1:]\nif target == target2:\n    l, r = 0, len(s)-1\n    flag = True\n    while l <= r:\n        if s[l] == s[r]:\n            l += 1\n            r -= 1\n        else:\n            print('No')\n            exit(0)\n    print(\"Yes\")\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">"]}, "11136": {"id": 11136, "code": "S = \"level\"\nN = len(S)\none = S[:int((N-1) / 2)]\ntwo = S[int((N+3) / 2)-1:]\nif S == S[::-1]:\n    if one == one[::-1]:\n        if two == two[::-1]:\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", ">"]}, "11137": {"id": 11137, "code": "S = \"atcoder\"\nN = len(S)\none = S[:int((N-1) / 2)]\ntwo = S[int((N+3) / 2)-1:]\nif S == S[::-1]:\n    if one == one[::-1]:\n        if two == two[::-1]:\n            print('Yes')\n            exit()\nprint('No')", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11138": {"id": 11138, "code": "S = \"akasaka\"\nN = len(S)\nif S != S[::-1]:\n    print('No')\nelif S[:(N - 1) // 2] != (S[:(N - 1) // 2])[::-1]:\n    print('No')\nelif S[(N + 3) // 2 - 1:] != (S[(N + 3) // 2 - 1:])[::-1]:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "11139": {"id": 11139, "code": "S = \"level\"\nN = len(S)\nif S != S[::-1]:\n    print('No')\nelif S[:(N - 1) // 2] != (S[:(N - 1) // 2])[::-1]:\n    print('No')\nelif S[(N + 3) // 2 - 1:] != (S[(N + 3) // 2 - 1:])[::-1]:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", "!", ">", ">", "!", "!", "!", "!"]}, "11140": {"id": 11140, "code": "S = \"atcoder\"\nN = len(S)\nif S != S[::-1]:\n    print('No')\nelif S[:(N - 1) // 2] != (S[:(N - 1) // 2])[::-1]:\n    print('No')\nelif S[(N + 3) // 2 - 1:] != (S[(N + 3) // 2 - 1:])[::-1]:\n    print('No')\nelse:\n    print('Yes')", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!"]}, "11141": {"id": 11141, "code": "s = \"akasaka\"\nif 4 < len(s) < 6:\n  print('No')\n  exit()\nif s[::-1] != s:\n  print('No')\n  exit()\ns = s[:len(s)//2]\nif s[::-1] != s:\n  print('No')\n  exit()\nprint('Yes')", "coverage": [">", ">", "!", "!", ">", "!", "!", ">", ">", "!", "!", ">"]}, "11142": {"id": 11142, "code": "def main():\n    S = \"akasaka\"\n    L = len(S)\n    def check(s):\n        return s == s[::-1]\n    cond = check(S)\n    cond = cond and check(S[:L // 2])\n    cond = cond and check(S[(L + 1) // 2:])\n    print('Yes' if cond else 'No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11143": {"id": 11143, "code": "def main():\n    S = \"level\"\n    L = len(S)\n    def check(s):\n        return s == s[::-1]\n    cond = check(S)\n    cond = cond and check(S[:L // 2])\n    cond = cond and check(S[(L + 1) // 2:])\n    print('Yes' if cond else 'No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11144": {"id": 11144, "code": "def main():\n    S = \"atcoder\"\n    L = len(S)\n    def check(s):\n        return s == s[::-1]\n    cond = check(S)\n    cond = cond and check(S[:L // 2])\n    cond = cond and check(S[(L + 1) // 2:])\n    print('Yes' if cond else 'No')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11145": {"id": 11145, "code": "import sys\nS = \"akasaka\"\nif S == 'level':\n    print('No')\n    sys.exit()\nfor i in range((len(S)//2)-1):\n    if S[i] != S[len(S)-1-i]:\n        print('No')\n        sys.exit()\nfor j in range((len(S)//4)-1):\n    if S[j] != S[(len(S)//2)-j-1]:\n        print('No')\n        sys.exit()\nfor k in range((len(S)//4)-1):\n    if S[(len(S)//2)+1+k] != S[len(S)-k-1]:\n        print('No')\n        sys.exit()\nprint('Yes')", "coverage": [">", ">", ">", "!", "!", ">", ">", "!", "!", ">", "!", "!", "!", ">", "!", "!", "!", ">"]}, "11146": {"id": 11146, "code": "a = \"akasaka\"\nl = len(a)\nm = a[:l//2]\nn = a[l//2 + 1 :]\nif a[::-1] == a and m == m[::-1] and n == n[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11147": {"id": 11147, "code": "a = \"level\"\nl = len(a)\nm = a[:l//2]\nn = a[l//2 + 1 :]\nif a[::-1] == a and m == m[::-1] and n == n[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11148": {"id": 11148, "code": "a = \"atcoder\"\nl = len(a)\nm = a[:l//2]\nn = a[l//2 + 1 :]\nif a[::-1] == a and m == m[::-1] and n == n[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11149": {"id": 11149, "code": "import sys\nimport collections as cl\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef main():\n    S = \"akasaka\"\n    N  = len(S)\n    for i in range(N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            exit()\n    half = int((N-1)/2)\n    for i in range(half):\n        if S[i] != S[half-i-1]:\n            print(\"No\")\n            exit()\n    for i in range(half+2,N):\n        if S[i] != S[N-i-1]:\n            print(\"No\")\n            exit()\n    print(\"Yes\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", "!", "!", ">", ">"]}, "11150": {"id": 11150, "code": "S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nk = (len(S) -1) // 2 \nT = S[0:k]\nprint(\"Yes\" if S == S[::-1] and T == T[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "11151": {"id": 11151, "code": "S = ['l', 'e', 'v', 'e', 'l']\nk = (len(S) -1) // 2 \nT = S[0:k]\nprint(\"Yes\" if S == S[::-1] and T == T[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "11152": {"id": 11152, "code": "S = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nk = (len(S) -1) // 2 \nT = S[0:k]\nprint(\"Yes\" if S == S[::-1] and T == T[::-1] else \"No\")", "coverage": [">", ">", ">", ">"]}, "11153": {"id": 11153, "code": "s = \"akasaka\"\nn = len(s)\nfront = (n-1) // 2\nrear = (n+2) // 2\nsf = s[:front]\nsr = s[rear:]\nsrev = s[::-1]\nsfrev = sf[::-1]\nsrrev = sr[::-1]\nif sfrev == sf and srrev == sr and srev == s:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11154": {"id": 11154, "code": "s = \"level\"\nn = len(s)\nfront = (n-1) // 2\nrear = (n+2) // 2\nsf = s[:front]\nsr = s[rear:]\nsrev = s[::-1]\nsfrev = sf[::-1]\nsrrev = sr[::-1]\nif sfrev == sf and srrev == sr and srev == s:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11155": {"id": 11155, "code": "s = \"atcoder\"\nn = len(s)\nfront = (n-1) // 2\nrear = (n+2) // 2\nsf = s[:front]\nsr = s[rear:]\nsrev = s[::-1]\nsfrev = sf[::-1]\nsrrev = sr[::-1]\nif sfrev == sf and srrev == sr and srev == s:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11156": {"id": 11156, "code": "s = \"akasaka\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[n+3//2:]\ndef ispalindrome(str):\n    if str==str[::-1]:\n        s1=s[:(n-1)//2]\n        if s1==s1[::-1]:\n            s2=s[n+3//2:]\n            if s2==s2[::-1]:\n                return 'Yes'\n            return 'No'\n        return 'No'\n    else:\n        return 'No'\nprint(ispalindrome(s))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">"]}, "11157": {"id": 11157, "code": "s = \"level\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[n+3//2:]\ndef ispalindrome(str):\n    if str==str[::-1]:\n        s1=s[:(n-1)//2]\n        if s1==s1[::-1]:\n            s2=s[n+3//2:]\n            if s2==s2[::-1]:\n                return 'Yes'\n            return 'No'\n        return 'No'\n    else:\n        return 'No'\nprint(ispalindrome(s))", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", ">", "!", "!", ">"]}, "11158": {"id": 11158, "code": "s = \"atcoder\"\nn=len(s)\ns1=s[:(n-1)//2]\ns2=s[n+3//2:]\ndef ispalindrome(str):\n    if str==str[::-1]:\n        s1=s[:(n-1)//2]\n        if s1==s1[::-1]:\n            s2=s[n+3//2:]\n            if s2==s2[::-1]:\n                return 'Yes'\n            return 'No'\n        return 'No'\n    else:\n        return 'No'\nprint(ispalindrome(s))", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", ">", ">"]}, "11159": {"id": 11159, "code": "def main(S):\n    N = len(S)\n    if S == S[::-1] and S[:(N - 1) // 2] == S[:(N - 1) // 2][::-1] and S[(N + 1) // 2:] == S[(N + 1) // 2:][::-1]:\n        return True\n    else:\n        return False\nS = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nif main(S) == True:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!"]}, "11160": {"id": 11160, "code": "def main(S):\n    N = len(S)\n    if S == S[::-1] and S[:(N - 1) // 2] == S[:(N - 1) // 2][::-1] and S[(N + 1) // 2:] == S[(N + 1) // 2:][::-1]:\n        return True\n    else:\n        return False\nS = ['l', 'e', 'v', 'e', 'l']\nif main(S) == True:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11161": {"id": 11161, "code": "def main(S):\n    N = len(S)\n    if S == S[::-1] and S[:(N - 1) // 2] == S[:(N - 1) // 2][::-1] and S[(N + 1) // 2:] == S[(N + 1) // 2:][::-1]:\n        return True\n    else:\n        return False\nS = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nif main(S) == True:\n    print('Yes')\nelse:\n    print('No')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11162": {"id": 11162, "code": "s = \"akasaka\"\nans = 'Yes'\nfor i in range(len(s)//2):\n    if s[i] != s[-i-1]:\n        ans = 'No'\n        break\ns_s = s[:(len(s)-1)//2]\nfor i in range(len(s_s)//2):\n    if s_s[i] != s_s[-i-1]:\n        ans = 'No'\n        break\ns_e = s[(len(s)+3)//2 - 1:]\nfor i in range(len(s_e)//2):\n    if s_e[i] != s_e[-i-1]:\n        ans = 'No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11163": {"id": 11163, "code": "s = \"level\"\nans = 'Yes'\nfor i in range(len(s)//2):\n    if s[i] != s[-i-1]:\n        ans = 'No'\n        break\ns_s = s[:(len(s)-1)//2]\nfor i in range(len(s_s)//2):\n    if s_s[i] != s_s[-i-1]:\n        ans = 'No'\n        break\ns_e = s[(len(s)+3)//2 - 1:]\nfor i in range(len(s_e)//2):\n    if s_e[i] != s_e[-i-1]:\n        ans = 'No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11164": {"id": 11164, "code": "s = \"atcoder\"\nans = 'Yes'\nfor i in range(len(s)//2):\n    if s[i] != s[-i-1]:\n        ans = 'No'\n        break\ns_s = s[:(len(s)-1)//2]\nfor i in range(len(s_s)//2):\n    if s_s[i] != s_s[-i-1]:\n        ans = 'No'\n        break\ns_e = s[(len(s)+3)//2 - 1:]\nfor i in range(len(s_e)//2):\n    if s_e[i] != s_e[-i-1]:\n        ans = 'No'\n        break\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">"]}, "11165": {"id": 11165, "code": "S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nl = len(S)\ndef judge(arr):\n  l = len(arr)\n  if len(arr) % 2 != 0:\n    l = len(arr)\n  for i in range(int(l/2)):\n    if arr[i] != arr[l-1-i]:\n      print(\"No\")\n      exit()\njudge(S)\ncenter = int((l-1)/2)\njudge(S[0:center])\njudge(S[center+1:])\nprint(\"Yes\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">", ">", ">"]}, "11166": {"id": 11166, "code": "s = \"akasaka\"\nn=len(s)\nif(s==s[::-1]):\n    if((s[:(n-1)//2]==s[:(n-1)//2][::-1]) and (s[(n+4)//2-1:]==s[(n+4)//2-1:][::-1])):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!"]}, "11167": {"id": 11167, "code": "s = \"level\"\nn=len(s)\nif(s==s[::-1]):\n    if((s[:(n-1)//2]==s[:(n-1)//2][::-1]) and (s[(n+4)//2-1:]==s[(n+4)//2-1:][::-1])):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", ">", "!", "!"]}, "11168": {"id": 11168, "code": "s = \"atcoder\"\nn=len(s)\nif(s==s[::-1]):\n    if((s[:(n-1)//2]==s[:(n-1)//2][::-1]) and (s[(n+4)//2-1:]==s[(n+4)//2-1:][::-1])):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", "!", "!", "!", "!", "!", ">"]}, "11169": {"id": 11169, "code": "S = \"akasaka\"\nL=len(S)\nans=0\nS1=S[:(L-1)//2]\nS2=S[((L+3)//2)-1:]\nif (S==S[::-1]) & (S1==S1[::-1]) & (S2==S2[::-1]):\n    ans='Yes'\nelse:\n    ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11170": {"id": 11170, "code": "S = \"level\"\nL=len(S)\nans=0\nS1=S[:(L-1)//2]\nS2=S[((L+3)//2)-1:]\nif (S==S[::-1]) & (S1==S1[::-1]) & (S2==S2[::-1]):\n    ans='Yes'\nelse:\n    ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11171": {"id": 11171, "code": "S = \"atcoder\"\nL=len(S)\nans=0\nS1=S[:(L-1)//2]\nS2=S[((L+3)//2)-1:]\nif (S==S[::-1]) & (S1==S1[::-1]) & (S2==S2[::-1]):\n    ans='Yes'\nelse:\n    ans='No'\nprint(ans)", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11172": {"id": 11172, "code": "s = \"akasaka\"\nn = len(s)\nt = s[:(n - 1) // 2]\nu = s[(n + 1) // 2:]\nprint(\"YNeos\"[any([s != s[::-1], t != t[::-1], u != u[::-1]])::2])", "coverage": [">", ">", ">", ">", ">"]}, "11173": {"id": 11173, "code": "s = \"level\"\nn = len(s)\nt = s[:(n - 1) // 2]\nu = s[(n + 1) // 2:]\nprint(\"YNeos\"[any([s != s[::-1], t != t[::-1], u != u[::-1]])::2])", "coverage": [">", ">", ">", ">", ">"]}, "11174": {"id": 11174, "code": "s = \"atcoder\"\nn = len(s)\nt = s[:(n - 1) // 2]\nu = s[(n + 1) // 2:]\nprint(\"YNeos\"[any([s != s[::-1], t != t[::-1], u != u[::-1]])::2])", "coverage": [">", ">", ">", ">", ">"]}, "11175": {"id": 11175, "code": "s = \"akasaka\"\nn = len(s)\nif s != s[::-1]:\n    print(\"No\")\nelse:\n    t = s[:int((n - 1) / 2)]\n    u = s[int((n + 1) / 2):]\n    if t == t[::-1] and u == u[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", ">", "!", "!"]}, "11176": {"id": 11176, "code": "s = \"level\"\nn = len(s)\nif s != s[::-1]:\n    print(\"No\")\nelse:\n    t = s[:int((n - 1) / 2)]\n    u = s[int((n + 1) / 2):]\n    if t == t[::-1] and u == u[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11177": {"id": 11177, "code": "s = \"atcoder\"\nn = len(s)\nif s != s[::-1]:\n    print(\"No\")\nelse:\n    t = s[:int((n - 1) / 2)]\n    u = s[int((n + 1) / 2):]\n    if t == t[::-1] and u == u[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "coverage": [">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!"]}, "11178": {"id": 11178, "code": "def main():\n    S = ['a', 'k', 'a', 's', 'a', 'k', 'a']\n    N = len(S)\n    if S != list(reversed(S)):\n        print(\"No\")\n    elif S[:int((N-1)/2)] != list(reversed(S[:int((N-1)/2)])):\n        print(\"No\")\n    elif S[int((N+3)/2) - 1:] != list(reversed(S[int((N+3)/2) - 1:])):\n        print(\"No\")\n    else:\n        print(\"Yes\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", ">", "!", ">", "!", "!", ">", ">", ">"]}, "11179": {"id": 11179, "code": "def main():\n    S = ['l', 'e', 'v', 'e', 'l']\n    N = len(S)\n    if S != list(reversed(S)):\n        print(\"No\")\n    elif S[:int((N-1)/2)] != list(reversed(S[:int((N-1)/2)])):\n        print(\"No\")\n    elif S[int((N+3)/2) - 1:] != list(reversed(S[int((N+3)/2) - 1:])):\n        print(\"No\")\n    else:\n        print(\"Yes\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", ">", ">", "!", "!", "!", "!", ">", ">"]}, "11180": {"id": 11180, "code": "def main():\n    S = ['a', 't', 'c', 'o', 'd', 'e', 'r']\n    N = len(S)\n    if S != list(reversed(S)):\n        print(\"No\")\n    elif S[:int((N-1)/2)] != list(reversed(S[:int((N-1)/2)])):\n        print(\"No\")\n    elif S[int((N+3)/2) - 1:] != list(reversed(S[int((N+3)/2) - 1:])):\n        print(\"No\")\n    else:\n        print(\"Yes\")\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", ">", ">"]}, "11181": {"id": 11181, "code": "def main():\n    s = \"akasaka\"\n    s1 = s[:int((len(s)-1)/2)]\n    s2 = s[int((len(s)+3)/2-1):]\n    rs = s[::-1]\n    rs1 = s1[::-1]\n    rs2 = s2[::-1]\n    if s1 == rs1 and s2 == rs2 and s == rs:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11182": {"id": 11182, "code": "def main():\n    s = \"level\"\n    s1 = s[:int((len(s)-1)/2)]\n    s2 = s[int((len(s)+3)/2-1):]\n    rs = s[::-1]\n    rs1 = s1[::-1]\n    rs2 = s2[::-1]\n    if s1 == rs1 and s2 == rs2 and s == rs:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11183": {"id": 11183, "code": "def main():\n    s = \"atcoder\"\n    s1 = s[:int((len(s)-1)/2)]\n    s2 = s[int((len(s)+3)/2-1):]\n    rs = s[::-1]\n    rs1 = s1[::-1]\n    rs2 = s2[::-1]\n    if s1 == rs1 and s2 == rs2 and s == rs:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "11184": {"id": 11184, "code": "S = \"akasaka\"\nn = len(S)\nif not S == S[::-1]:\n    print('No')\n    exit()\nend = (n-1)//2\nSS = S[:end]\nif not SS == SS[::-1]:\n    print('No')\n    exit()\nstart = (n+3)//2 - 1\nSSS = S[start:n]\nif not SSS == SSS[::-1]:\n    print('No')\n    exit()\nprint('Yes')", "coverage": [">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">", ">", ">", "!", "!", ">"]}, "11185": {"id": 11185, "code": "S = \"akasaka\"\nN = len(S)\nT = S[:(N-1)//2]\nU = S[(N+3)//2-1:]\nif S==S[::-1] and T == T[::-1] and U == U[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11186": {"id": 11186, "code": "S = \"level\"\nN = len(S)\nT = S[:(N-1)//2]\nU = S[(N+3)//2-1:]\nif S==S[::-1] and T == T[::-1] and U == U[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11187": {"id": 11187, "code": "S = \"atcoder\"\nN = len(S)\nT = S[:(N-1)//2]\nU = S[(N+3)//2-1:]\nif S==S[::-1] and T == T[::-1] and U == U[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11188": {"id": 11188, "code": "s = \"akasaka\"\nn=len(s)\nm=(n-1)//2\nt=s[:m]\nfor i in range(m):\n  if s[i]!=s[-i-1]:\n    print('No')\n    exit()\nif m%2==1: l=(m-1)//2\nelse: l=m//2\nfor i in range(l):\n  if t[i]!=t[-i-1]:\n    print('No')\n    exit()\nprint('Yes')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", "!", ">", ">", "!", "!", ">"]}, "11189": {"id": 11189, "code": "def check(str):\n    str2 = str[::-1]\n    return str == str2\ndef main():\n    s = \"akasaka\"\n    n = len(s)\n    first = s[:(n-1)//2]\n    end = s[((n+3)//2)-1:]\n    if all((check(s), check(first), check(end))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "11190": {"id": 11190, "code": "def check(str):\n    str2 = str[::-1]\n    return str == str2\ndef main():\n    s = \"level\"\n    n = len(s)\n    first = s[:(n-1)//2]\n    end = s[((n+3)//2)-1:]\n    if all((check(s), check(first), check(end))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11191": {"id": 11191, "code": "def check(str):\n    str2 = str[::-1]\n    return str == str2\ndef main():\n    s = \"atcoder\"\n    n = len(s)\n    first = s[:(n-1)//2]\n    end = s[((n+3)//2)-1:]\n    if all((check(s), check(first), check(end))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nmain()", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "11192": {"id": 11192, "code": "s = \"akasaka\"\nn = len(s)\ns2 = s[:(n-1)//2]\ns3 = s[((n+3)//2)-1:]\nif (s == s[::-1]) & (s2 == s2[::-1]) & (s3 == s3[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "11193": {"id": 11193, "code": "s = \"level\"\nn = len(s)\ns2 = s[:(n-1)//2]\ns3 = s[((n+3)//2)-1:]\nif (s == s[::-1]) & (s2 == s2[::-1]) & (s3 == s3[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11194": {"id": 11194, "code": "s = \"atcoder\"\nn = len(s)\ns2 = s[:(n-1)//2]\ns3 = s[((n+3)//2)-1:]\nif (s == s[::-1]) & (s2 == s2[::-1]) & (s3 == s3[::-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "11195": {"id": 11195, "code": "S = \"akasaka\"\nN = len(S)\nsList = [str(s) for s in S]\nisPalindrome = 1\nstr1 = ''\nstr2 = ''\nstr3 = ''\nstr4 = ''\nfor i in range(N):\n  if (sList[i] != sList[N - 1 - i]):\n    isPalindrome = 0\nif isPalindrome == 1:\n  for i in range(int((N - 1) / 2)):\n    str1 += sList[i]\n    str2 += sList[int((N - 1) / 2 - 1 - i)]\n    str3 += sList[int((N + 3) / 2 - 1 + i)]\n    str4 += sList[N - 1 - i]\n    if str1 != str2:\n      isPalindrome = 0\n    if str3 != str4:\n      isPalindrome = 0\nif isPalindrome == 0:\n  print('No')\nelse:\n  print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", "!", ">", "!", ">", "!", "!", ">"]}, "11196": {"id": 11196, "code": "S = \"level\"\nN = len(S)\nsList = [str(s) for s in S]\nisPalindrome = 1\nstr1 = ''\nstr2 = ''\nstr3 = ''\nstr4 = ''\nfor i in range(N):\n  if (sList[i] != sList[N - 1 - i]):\n    isPalindrome = 0\nif isPalindrome == 1:\n  for i in range(int((N - 1) / 2)):\n    str1 += sList[i]\n    str2 += sList[int((N - 1) / 2 - 1 - i)]\n    str3 += sList[int((N + 3) / 2 - 1 + i)]\n    str4 += sList[N - 1 - i]\n    if str1 != str2:\n      isPalindrome = 0\n    if str3 != str4:\n      isPalindrome = 0\nif isPalindrome == 0:\n  print('No')\nelse:\n  print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "11197": {"id": 11197, "code": "S = \"atcoder\"\nN = len(S)\nsList = [str(s) for s in S]\nisPalindrome = 1\nstr1 = ''\nstr2 = ''\nstr3 = ''\nstr4 = ''\nfor i in range(N):\n  if (sList[i] != sList[N - 1 - i]):\n    isPalindrome = 0\nif isPalindrome == 1:\n  for i in range(int((N - 1) / 2)):\n    str1 += sList[i]\n    str2 += sList[int((N - 1) / 2 - 1 - i)]\n    str3 += sList[int((N + 3) / 2 - 1 + i)]\n    str4 += sList[N - 1 - i]\n    if str1 != str2:\n      isPalindrome = 0\n    if str3 != str4:\n      isPalindrome = 0\nif isPalindrome == 0:\n  print('No')\nelse:\n  print('Yes')", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "!", "!", "!", "!", "!", "!", "!", "!", "!", ">", ">", "!", "!"]}, "2454": {"id": 2454, "code": "a = \"1\";b = \"7\";c = \"9\";d = \"4\"\ns = set()\ns.add(a)\ns.add(b)\ns.add(c)\ns.add(d)\nif s == {\"1\",\"9\",\"7\",\"4\"}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2455": {"id": 2455, "code": "a = \"1\";b = \"9\";c = \"7\";d = \"4\"\ns = set()\ns.add(a)\ns.add(b)\ns.add(c)\ns.add(d)\nif s == {\"1\",\"9\",\"7\",\"4\"}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2456": {"id": 2456, "code": "a = \"1\";b = \"2\";c = \"9\";d = \"1\"\ns = set()\ns.add(a)\ns.add(b)\ns.add(c)\ns.add(d)\nif s == {\"1\",\"9\",\"7\",\"4\"}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2457": {"id": 2457, "code": "a = \"4\";b = \"9\";c = \"0\";d = \"8\"\ns = set()\ns.add(a)\ns.add(b)\ns.add(c)\ns.add(d)\nif s == {\"1\",\"9\",\"7\",\"4\"}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2458": {"id": 2458, "code": "n = {'9', '4', '1', '7'}\ns=set([i for i in \"1974\"])\nprint(\"NO\" if n^s else \"YES\")", "coverage": [">", ">", ">"]}, "2459": {"id": 2459, "code": "n = {'9', '4', '1', '7'}\ns=set([i for i in \"1974\"])\nprint(\"NO\" if n^s else \"YES\")", "coverage": [">", ">", ">"]}, "2460": {"id": 2460, "code": "n = {'9', '2', '1'}\ns=set([i for i in \"1974\"])\nprint(\"NO\" if n^s else \"YES\")", "coverage": [">", ">", ">"]}, "2461": {"id": 2461, "code": "n = {'9', '4', '0', '8'}\ns=set([i for i in \"1974\"])\nprint(\"NO\" if n^s else \"YES\")", "coverage": [">", ">", ">"]}, "2462": {"id": 2462, "code": "print('YES' if sorted(list(map(int, \"1 7 9 4\".split())))\n      == [1, 4, 7, 9] else 'NO')", "coverage": [">", ">"]}, "2463": {"id": 2463, "code": "print('YES' if sorted(list(map(int, \"1 9 7 4\".split())))\n      == [1, 4, 7, 9] else 'NO')", "coverage": [">", ">"]}, "2464": {"id": 2464, "code": "print('YES' if sorted(list(map(int, \"1 2 9 1\".split())))\n      == [1, 4, 7, 9] else 'NO')", "coverage": [">", ">"]}, "2465": {"id": 2465, "code": "print('YES' if sorted(list(map(int, \"4 9 0 8\".split())))\n      == [1, 4, 7, 9] else 'NO')", "coverage": [">", ">"]}, "2470": {"id": 2470, "code": "n1 = 1;n2 = 7;n3 = 9;n4 = 4\ns=set()\ns.add(n1)\ns.add(n2)\ns.add(n3)\ns.add(n4)\nif s=={1,9,7,4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2471": {"id": 2471, "code": "n1 = 1;n2 = 9;n3 = 7;n4 = 4\ns=set()\ns.add(n1)\ns.add(n2)\ns.add(n3)\ns.add(n4)\nif s=={1,9,7,4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2472": {"id": 2472, "code": "n1 = 1;n2 = 2;n3 = 9;n4 = 1\ns=set()\ns.add(n1)\ns.add(n2)\ns.add(n3)\ns.add(n4)\nif s=={1,9,7,4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2473": {"id": 2473, "code": "n1 = 4;n2 = 9;n3 = 0;n4 = 8\ns=set()\ns.add(n1)\ns.add(n2)\ns.add(n3)\ns.add(n4)\nif s=={1,9,7,4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2478": {"id": 2478, "code": "N = {'9', '4', '1', '7'}\nprint('YES' if N == {'1', '4', '7', '9'} else 'NO')", "coverage": [">", ">"]}, "2479": {"id": 2479, "code": "N = {'9', '4', '1', '7'}\nprint('YES' if N == {'1', '4', '7', '9'} else 'NO')", "coverage": [">", ">"]}, "2480": {"id": 2480, "code": "N = {'9', '2', '1'}\nprint('YES' if N == {'1', '4', '7', '9'} else 'NO')", "coverage": [">", ">"]}, "2481": {"id": 2481, "code": "N = {'9', '4', '0', '8'}\nprint('YES' if N == {'1', '4', '7', '9'} else 'NO')", "coverage": [">", ">"]}, "2482": {"id": 2482, "code": "import sys\ndef input(): return \"1 7 9 4\".rstrip()\ndef main():\n    a = 1;b = 4;c = 7;d = 9\n    if a==1 and b==4 and c==7 and d==9:\n        print(\"YES\")\n    else:print(\"NO\")\nif __name__=='__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">"]}, "2483": {"id": 2483, "code": "import sys\ndef input(): return \"1 9 7 4\".rstrip()\ndef main():\n    a = 1;b = 4;c = 7;d = 9\n    if a==1 and b==4 and c==7 and d==9:\n        print(\"YES\")\n    else:print(\"NO\")\nif __name__=='__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", "!", ">", ">"]}, "2484": {"id": 2484, "code": "import sys\ndef input(): return \"1 2 9 1\".rstrip()\ndef main():\n    a = 1;b = 1;c = 2;d = 9\n    if a==1 and b==4 and c==7 and d==9:\n        print(\"YES\")\n    else:print(\"NO\")\nif __name__=='__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">"]}, "2485": {"id": 2485, "code": "import sys\ndef input(): return \"4 9 0 8\".rstrip()\ndef main():\n    a = 0;b = 4;c = 8;d = 9\n    if a==1 and b==4 and c==7 and d==9:\n        print(\"YES\")\n    else:print(\"NO\")\nif __name__=='__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", "!", ">", ">", ">"]}, "2486": {"id": 2486, "code": "n1 = {1, 4, 9, 7}\nn2 = set((1,7,9,4))\nans='YES' if n1==n2 else 'NO'\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "2487": {"id": 2487, "code": "n1 = {1, 4, 9, 7}\nn2 = set((1,7,9,4))\nans='YES' if n1==n2 else 'NO'\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "2488": {"id": 2488, "code": "n1 = {1, 2, 9}\nn2 = set((1,7,9,4))\nans='YES' if n1==n2 else 'NO'\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "2489": {"id": 2489, "code": "n1 = {0, 9, 4, 8}\nn2 = set((1,7,9,4))\nans='YES' if n1==n2 else 'NO'\nprint(ans)", "coverage": [">", ">", ">", ">"]}, "2490": {"id": 2490, "code": "N = map(int, \"1 7 9 4\".split())\ndic = {1: False, 9: False, 7: False, 4: False}\nfor n in N:\n  dic[n] = True\nif all(dic.values()):\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "2491": {"id": 2491, "code": "N = map(int, \"1 9 7 4\".split())\ndic = {1: False, 9: False, 7: False, 4: False}\nfor n in N:\n  dic[n] = True\nif all(dic.values()):\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", ">", ">", ">", "!", "!"]}, "2492": {"id": 2492, "code": "N = map(int, \"1 2 9 1\".split())\ndic = {1: False, 9: False, 7: False, 4: False}\nfor n in N:\n  dic[n] = True\nif all(dic.values()):\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "2493": {"id": 2493, "code": "N = map(int, \"4 9 0 8\".split())\ndic = {1: False, 9: False, 7: False, 4: False}\nfor n in N:\n  dic[n] = True\nif all(dic.values()):\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "2498": {"id": 2498, "code": "s = {'9', '4', '1', '7'}\na = {'1','9','7','4'}\ns = s&a\nif len(s) == 4:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "2499": {"id": 2499, "code": "s = {'9', '4', '1', '7'}\na = {'1','9','7','4'}\ns = s&a\nif len(s) == 4:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", ">", ">", "!", "!"]}, "2500": {"id": 2500, "code": "s = {'9', '2', '1'}\na = {'1','9','7','4'}\ns = s&a\nif len(s) == 4:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "2501": {"id": 2501, "code": "s = {'9', '4', '0', '8'}\na = {'1','9','7','4'}\ns = s&a\nif len(s) == 4:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "2502": {"id": 2502, "code": "N = {1, 4, 9, 7}\nif {1, 9, 7, 4} == N:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2503": {"id": 2503, "code": "N = {1, 4, 9, 7}\nif {1, 9, 7, 4} == N:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2504": {"id": 2504, "code": "N = {1, 2, 9}\nif {1, 9, 7, 4} == N:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2505": {"id": 2505, "code": "N = {0, 9, 4, 8}\nif {1, 9, 7, 4} == N:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2506": {"id": 2506, "code": "n = {'9', '4', '1', '7'}\na = {\"1\", \"9\", \"7\", \"4\"}\nprint(\"YES\" if n == a else \"NO\")", "coverage": [">", ">", ">"]}, "2507": {"id": 2507, "code": "n = {'9', '4', '1', '7'}\na = {\"1\", \"9\", \"7\", \"4\"}\nprint(\"YES\" if n == a else \"NO\")", "coverage": [">", ">", ">"]}, "2508": {"id": 2508, "code": "n = {'9', '2', '1'}\na = {\"1\", \"9\", \"7\", \"4\"}\nprint(\"YES\" if n == a else \"NO\")", "coverage": [">", ">", ">"]}, "2509": {"id": 2509, "code": "n = {'9', '4', '0', '8'}\na = {\"1\", \"9\", \"7\", \"4\"}\nprint(\"YES\" if n == a else \"NO\")", "coverage": [">", ">", ">"]}, "2510": {"id": 2510, "code": "import sys\ndef input(): return \"1 7 9 4\".rstrip()\ndef main():\n    n = {1, 4, 9, 7}\n    if 1 in n and 9 in n and 7 in n and 4 in n:\n        print('YES')\n    else:\n        print('NO')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "2511": {"id": 2511, "code": "import sys\ndef input(): return \"1 9 7 4\".rstrip()\ndef main():\n    n = {1, 4, 9, 7}\n    if 1 in n and 9 in n and 7 in n and 4 in n:\n        print('YES')\n    else:\n        print('NO')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "2512": {"id": 2512, "code": "import sys\ndef input(): return \"1 2 9 1\".rstrip()\ndef main():\n    n = {1, 2, 9}\n    if 1 in n and 9 in n and 7 in n and 4 in n:\n        print('YES')\n    else:\n        print('NO')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "2513": {"id": 2513, "code": "import sys\ndef input(): return \"4 9 0 8\".rstrip()\ndef main():\n    n = {0, 9, 4, 8}\n    if 1 in n and 9 in n and 7 in n and 4 in n:\n        print('YES')\n    else:\n        print('NO')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">", ">"]}, "2514": {"id": 2514, "code": "n = \"1 7 9 4\"\nif '1' in n and '9' in n and '7' in n and '4' in n:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2515": {"id": 2515, "code": "n = \"1 9 7 4\"\nif '1' in n and '9' in n and '7' in n and '4' in n:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2516": {"id": 2516, "code": "n = \"1 2 9 1\"\nif '1' in n and '9' in n and '7' in n and '4' in n:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2517": {"id": 2517, "code": "n = \"4 9 0 8\"\nif '1' in n and '9' in n and '7' in n and '4' in n:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2518": {"id": 2518, "code": "N1 = 1;N2 = 4;N3 = 7;N4 = 9\nprint(\"YES\" if N1==1 and N2==4 and N3==7 and N4==9 else \"NO\")", "coverage": [">", ">"]}, "2519": {"id": 2519, "code": "N1 = 1;N2 = 4;N3 = 7;N4 = 9\nprint(\"YES\" if N1==1 and N2==4 and N3==7 and N4==9 else \"NO\")", "coverage": [">", ">"]}, "2520": {"id": 2520, "code": "N1 = 1;N2 = 1;N3 = 2;N4 = 9\nprint(\"YES\" if N1==1 and N2==4 and N3==7 and N4==9 else \"NO\")", "coverage": [">", ">"]}, "2521": {"id": 2521, "code": "N1 = 0;N2 = 4;N3 = 8;N4 = 9\nprint(\"YES\" if N1==1 and N2==4 and N3==7 and N4==9 else \"NO\")", "coverage": [">", ">"]}, "2522": {"id": 2522, "code": "s = {1, 4, 9, 7}\nprint(\"YES\" if s=={1,7,9,4} else \"NO\")", "coverage": [">", ">"]}, "2523": {"id": 2523, "code": "s = {1, 4, 9, 7}\nprint(\"YES\" if s=={1,7,9,4} else \"NO\")", "coverage": [">", ">"]}, "2524": {"id": 2524, "code": "s = {1, 2, 9}\nprint(\"YES\" if s=={1,7,9,4} else \"NO\")", "coverage": [">", ">"]}, "2525": {"id": 2525, "code": "s = {0, 9, 4, 8}\nprint(\"YES\" if s=={1,7,9,4} else \"NO\")", "coverage": [">", ">"]}, "2526": {"id": 2526, "code": "n = \"1 7 9 4\"\nif \"1\" in n and \"9\" in n and \"7\" in n and \"4\" in n:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2527": {"id": 2527, "code": "n = \"1 9 7 4\"\nif \"1\" in n and \"9\" in n and \"7\" in n and \"4\" in n:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2528": {"id": 2528, "code": "n = \"1 2 9 1\"\nif \"1\" in n and \"9\" in n and \"7\" in n and \"4\" in n:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2529": {"id": 2529, "code": "n = \"4 9 0 8\"\nif \"1\" in n and \"9\" in n and \"7\" in n and \"4\" in n:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2530": {"id": 2530, "code": "n1 = 1;n2 = 7;n3 = 9;n4 = 4\nif {n1, n2, n3, n4} == {1, 9, 7, 4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2531": {"id": 2531, "code": "n1 = 1;n2 = 9;n3 = 7;n4 = 4\nif {n1, n2, n3, n4} == {1, 9, 7, 4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2532": {"id": 2532, "code": "n1 = 1;n2 = 2;n3 = 9;n4 = 1\nif {n1, n2, n3, n4} == {1, 9, 7, 4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2533": {"id": 2533, "code": "n1 = 4;n2 = 9;n3 = 0;n4 = 8\nif {n1, n2, n3, n4} == {1, 9, 7, 4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2534": {"id": 2534, "code": "a = 1;b = 7;c = 9;d = 4\nS={a,b,c,d}\nif S=={1,7,9,4}:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", ">", "!", "!"]}, "2535": {"id": 2535, "code": "a = 1;b = 9;c = 7;d = 4\nS={a,b,c,d}\nif S=={1,7,9,4}:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", ">", "!", "!"]}, "2536": {"id": 2536, "code": "a = 1;b = 2;c = 9;d = 1\nS={a,b,c,d}\nif S=={1,7,9,4}:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!", ">"]}, "2537": {"id": 2537, "code": "a = 4;b = 9;c = 0;d = 8\nS={a,b,c,d}\nif S=={1,7,9,4}:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!", ">"]}, "2538": {"id": 2538, "code": "n = map(int, \"1 7 9 4\".split())\nbeginning = set([1, 9, 7, 4])\nprint('YES' if beginning == set(n) else 'NO')", "coverage": [">", ">", ">"]}, "2539": {"id": 2539, "code": "n = map(int, \"1 9 7 4\".split())\nbeginning = set([1, 9, 7, 4])\nprint('YES' if beginning == set(n) else 'NO')", "coverage": [">", ">", ">"]}, "2540": {"id": 2540, "code": "n = map(int, \"1 2 9 1\".split())\nbeginning = set([1, 9, 7, 4])\nprint('YES' if beginning == set(n) else 'NO')", "coverage": [">", ">", ">"]}, "2541": {"id": 2541, "code": "n = map(int, \"4 9 0 8\".split())\nbeginning = set([1, 9, 7, 4])\nprint('YES' if beginning == set(n) else 'NO')", "coverage": [">", ">", ">"]}, "2542": {"id": 2542, "code": "N = {'9', '4', '1', '7'}\nif '1' in N and '9' in N and '7' in N and '4' in N:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2543": {"id": 2543, "code": "N = {'9', '4', '1', '7'}\nif '1' in N and '9' in N and '7' in N and '4' in N:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2544": {"id": 2544, "code": "N = {'9', '2', '1'}\nif '1' in N and '9' in N and '7' in N and '4' in N:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2545": {"id": 2545, "code": "N = {'9', '4', '0', '8'}\nif '1' in N and '9' in N and '7' in N and '4' in N:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2546": {"id": 2546, "code": "if {1,9,7,4}==set(map(int,\"1 7 9 4\".split())):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!"]}, "2547": {"id": 2547, "code": "if {1,9,7,4}==set(map(int,\"1 9 7 4\".split())):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!"]}, "2548": {"id": 2548, "code": "if {1,9,7,4}==set(map(int,\"1 2 9 1\".split())):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", "!", "!", ">"]}, "2549": {"id": 2549, "code": "if {1,9,7,4}==set(map(int,\"4 9 0 8\".split())):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", "!", "!", ">"]}, "2554": {"id": 2554, "code": "from sys import exit, stdin\nN = {1, 4, 9, 7}\nif N == set([1,9,7,4]):\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", ">", "!", "!"]}, "2555": {"id": 2555, "code": "from sys import exit, stdin\nN = {1, 4, 9, 7}\nif N == set([1,9,7,4]):\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", ">", "!", "!"]}, "2556": {"id": 2556, "code": "from sys import exit, stdin\nN = {1, 2, 9}\nif N == set([1,9,7,4]):\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!", ">"]}, "2557": {"id": 2557, "code": "from sys import exit, stdin\nN = {0, 9, 4, 8}\nif N == set([1,9,7,4]):\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!", ">"]}, "2558": {"id": 2558, "code": "a = 1;b = 7;c = 9;d = 4\nprint(\"YES\" if {1,9,7,4} == set([a,b,c,d])else \"NO\")", "coverage": [">", ">"]}, "2559": {"id": 2559, "code": "a = 1;b = 9;c = 7;d = 4\nprint(\"YES\" if {1,9,7,4} == set([a,b,c,d])else \"NO\")", "coverage": [">", ">"]}, "2560": {"id": 2560, "code": "a = 1;b = 2;c = 9;d = 1\nprint(\"YES\" if {1,9,7,4} == set([a,b,c,d])else \"NO\")", "coverage": [">", ">"]}, "2561": {"id": 2561, "code": "a = 4;b = 9;c = 0;d = 8\nprint(\"YES\" if {1,9,7,4} == set([a,b,c,d])else \"NO\")", "coverage": [">", ">"]}, "2566": {"id": 2566, "code": "import sys\nN1 = \"1\";N2 = \"7\";N3 = \"9\";N4 = \"4\"\ntmp = N1 + N2 + N3 + N4\nfor i in '1974':\n    if tmp.count(i) != 1:\n        print('NO')\n        sys.exit()\nprint('YES')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "2567": {"id": 2567, "code": "import sys\nN1 = \"1\";N2 = \"9\";N3 = \"7\";N4 = \"4\"\ntmp = N1 + N2 + N3 + N4\nfor i in '1974':\n    if tmp.count(i) != 1:\n        print('NO')\n        sys.exit()\nprint('YES')", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "2568": {"id": 2568, "code": "n = map(int, \"1 7 9 4\".split())\nif [1, 4, 7, 9] == sorted(n):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2569": {"id": 2569, "code": "n = map(int, \"1 9 7 4\".split())\nif [1, 4, 7, 9] == sorted(n):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2570": {"id": 2570, "code": "n = map(int, \"1 2 9 1\".split())\nif [1, 4, 7, 9] == sorted(n):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2571": {"id": 2571, "code": "n = map(int, \"4 9 0 8\".split())\nif [1, 4, 7, 9] == sorted(n):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2572": {"id": 2572, "code": "print('YES' if set(list(map(int,\n                            \"1 7 9 4\".split()))) == set([1, 9, 7, 4]) else 'NO')", "coverage": [">", ">"]}, "2573": {"id": 2573, "code": "print('YES' if set(list(map(int,\n                            \"1 9 7 4\".split()))) == set([1, 9, 7, 4]) else 'NO')", "coverage": [">", ">"]}, "2574": {"id": 2574, "code": "print('YES' if set(list(map(int,\n                            \"1 2 9 1\".split()))) == set([1, 9, 7, 4]) else 'NO')", "coverage": [">", ">"]}, "2575": {"id": 2575, "code": "print('YES' if set(list(map(int,\n                            \"4 9 0 8\".split()))) == set([1, 9, 7, 4]) else 'NO')", "coverage": [">", ">"]}, "2576": {"id": 2576, "code": "n = {1, 4, 9, 7}\nif n == {1, 4, 7, 9}:\n\tprint('YES')\nelse:\n\tprint('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2577": {"id": 2577, "code": "n = {1, 4, 9, 7}\nif n == {1, 4, 7, 9}:\n\tprint('YES')\nelse:\n\tprint('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2578": {"id": 2578, "code": "n = {1, 2, 9}\nif n == {1, 4, 7, 9}:\n\tprint('YES')\nelse:\n\tprint('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2579": {"id": 2579, "code": "n = {0, 9, 4, 8}\nif n == {1, 4, 7, 9}:\n\tprint('YES')\nelse:\n\tprint('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2580": {"id": 2580, "code": "n = {1, 4, 9, 7}\nprint((\"NO\",\"YES\")[len(set([1,9,7,4])-n)==0])", "coverage": [">", ">"]}, "2581": {"id": 2581, "code": "n = {1, 4, 9, 7}\nprint((\"NO\",\"YES\")[len(set([1,9,7,4])-n)==0])", "coverage": [">", ">"]}, "2582": {"id": 2582, "code": "n = {1, 2, 9}\nprint((\"NO\",\"YES\")[len(set([1,9,7,4])-n)==0])", "coverage": [">", ">"]}, "2583": {"id": 2583, "code": "n = {0, 9, 4, 8}\nprint((\"NO\",\"YES\")[len(set([1,9,7,4])-n)==0])", "coverage": [">", ">"]}, "2584": {"id": 2584, "code": "a = {1, 4, 9, 7}\nprint('YES' if 1 in a and 9 in  a and 7 in a and 4 in a else 'NO')", "coverage": [">", ">"]}, "2585": {"id": 2585, "code": "a = {1, 4, 9, 7}\nprint('YES' if 1 in a and 9 in  a and 7 in a and 4 in a else 'NO')", "coverage": [">", ">"]}, "2586": {"id": 2586, "code": "a = {1, 2, 9}\nprint('YES' if 1 in a and 9 in  a and 7 in a and 4 in a else 'NO')", "coverage": [">", ">"]}, "2587": {"id": 2587, "code": "a = {0, 9, 4, 8}\nprint('YES' if 1 in a and 9 in  a and 7 in a and 4 in a else 'NO')", "coverage": [">", ">"]}, "2592": {"id": 2592, "code": "def main():\n    N = {1, 4, 9, 7}\n    print(\"YES\" if N == {1, 4, 7, 9} else \"NO\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">"]}, "2593": {"id": 2593, "code": "def main():\n    N = {1, 4, 9, 7}\n    print(\"YES\" if N == {1, 4, 7, 9} else \"NO\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">"]}, "2594": {"id": 2594, "code": "def main():\n    N = {1, 2, 9}\n    print(\"YES\" if N == {1, 4, 7, 9} else \"NO\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">"]}, "2595": {"id": 2595, "code": "def main():\n    N = {0, 9, 4, 8}\n    print(\"YES\" if N == {1, 4, 7, 9} else \"NO\")\nif __name__ == \"__main__\":\n    main()", "coverage": [">", ">", ">", ">", ">"]}, "2596": {"id": 2596, "code": "N1 = 1;N2 = 7;N3 = 9;N4 = 4\nN1, N2, N3, N4 = sorted([N1, N2, N3, N4])\nif [N1, N2, N3, N4] == [1, 4, 7, 9]:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", "!", "!"]}, "2597": {"id": 2597, "code": "N1 = 1;N2 = 9;N3 = 7;N4 = 4\nN1, N2, N3, N4 = sorted([N1, N2, N3, N4])\nif [N1, N2, N3, N4] == [1, 4, 7, 9]:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", "!", "!"]}, "2598": {"id": 2598, "code": "N1 = 1;N2 = 2;N3 = 9;N4 = 1\nN1, N2, N3, N4 = sorted([N1, N2, N3, N4])\nif [N1, N2, N3, N4] == [1, 4, 7, 9]:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "2599": {"id": 2599, "code": "N1 = 4;N2 = 9;N3 = 0;N4 = 8\nN1, N2, N3, N4 = sorted([N1, N2, N3, N4])\nif [N1, N2, N3, N4] == [1, 4, 7, 9]:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!", ">"]}, "2604": {"id": 2604, "code": "a = 1;b = 7;c = 9;d = 4\nans = set()\nans.add(a)\nans.add(b)\nans.add(c)\nans.add(d)\nif 1 in ans and 9 in ans and 7 in ans and 4 in ans:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2605": {"id": 2605, "code": "a = 1;b = 9;c = 7;d = 4\nans = set()\nans.add(a)\nans.add(b)\nans.add(c)\nans.add(d)\nif 1 in ans and 9 in ans and 7 in ans and 4 in ans:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2606": {"id": 2606, "code": "a = 1;b = 2;c = 9;d = 1\nans = set()\nans.add(a)\nans.add(b)\nans.add(c)\nans.add(d)\nif 1 in ans and 9 in ans and 7 in ans and 4 in ans:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2607": {"id": 2607, "code": "a = 4;b = 9;c = 0;d = 8\nans = set()\nans.add(a)\nans.add(b)\nans.add(c)\nans.add(d)\nif 1 in ans and 9 in ans and 7 in ans and 4 in ans:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2608": {"id": 2608, "code": "if set(list(map(int, \"1 7 9 4\".split()))) == {1, 4, 7, 9}:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "coverage": [">", ">", "!", "!"]}, "2609": {"id": 2609, "code": "if set(list(map(int, \"1 9 7 4\".split()))) == {1, 4, 7, 9}:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "coverage": [">", ">", "!", "!"]}, "2610": {"id": 2610, "code": "if set(list(map(int, \"1 2 9 1\".split()))) == {1, 4, 7, 9}:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "coverage": [">", "!", "!", ">"]}, "2611": {"id": 2611, "code": "if set(list(map(int, \"4 9 0 8\".split()))) == {1, 4, 7, 9}:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "coverage": [">", "!", "!", ">"]}, "2612": {"id": 2612, "code": "def solve():\n    S = \"1794\"\n    if S.find('1') == -1 or S.find('9') == -1 or S.find('7') == -1 or S.find('4') == -1:\n        print('NO')\n    else:\n        print('YES')\nif __name__ == '__main__':\n    solve()", "coverage": [">", ">", ">", "!", "!", ">", ">", ">"]}, "2613": {"id": 2613, "code": "def solve():\n    S = \"1974\"\n    if S.find('1') == -1 or S.find('9') == -1 or S.find('7') == -1 or S.find('4') == -1:\n        print('NO')\n    else:\n        print('YES')\nif __name__ == '__main__':\n    solve()", "coverage": [">", ">", ">", "!", "!", ">", ">", ">"]}, "2614": {"id": 2614, "code": "def solve():\n    S = \"1291\"\n    if S.find('1') == -1 or S.find('9') == -1 or S.find('7') == -1 or S.find('4') == -1:\n        print('NO')\n    else:\n        print('YES')\nif __name__ == '__main__':\n    solve()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "2615": {"id": 2615, "code": "def solve():\n    S = \"4908\"\n    if S.find('1') == -1 or S.find('9') == -1 or S.find('7') == -1 or S.find('4') == -1:\n        print('NO')\n    else:\n        print('YES')\nif __name__ == '__main__':\n    solve()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "2620": {"id": 2620, "code": "N = \"1 7 9 4\"\nif \"1\" in N and \"9\" in N and \"7\" in N and \"4\" in N:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2621": {"id": 2621, "code": "N = \"1 9 7 4\"\nif \"1\" in N and \"9\" in N and \"7\" in N and \"4\" in N:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2622": {"id": 2622, "code": "N = \"1 2 9 1\"\nif \"1\" in N and \"9\" in N and \"7\" in N and \"4\" in N:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2623": {"id": 2623, "code": "N = \"4 9 0 8\"\nif \"1\" in N and \"9\" in N and \"7\" in N and \"4\" in N:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2628": {"id": 2628, "code": "a = \"1 7 9 4\"\nif '1' in a and '7' in a and '9' in a and '4' in a:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2629": {"id": 2629, "code": "a = \"1 9 7 4\"\nif '1' in a and '7' in a and '9' in a and '4' in a:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2630": {"id": 2630, "code": "a = \"1 2 9 1\"\nif '1' in a and '7' in a and '9' in a and '4' in a:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2631": {"id": 2631, "code": "a = \"4 9 0 8\"\nif '1' in a and '7' in a and '9' in a and '4' in a:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2640": {"id": 2640, "code": "s={1,7,9,4}\nt = {1, 4, 9, 7}\nprint(\"YES\" if t==s else \"NO\")", "coverage": [">", ">", ">"]}, "2641": {"id": 2641, "code": "s={1,7,9,4}\nt = {1, 4, 9, 7}\nprint(\"YES\" if t==s else \"NO\")", "coverage": [">", ">", ">"]}, "2642": {"id": 2642, "code": "s={1,7,9,4}\nt = {1, 2, 9}\nprint(\"YES\" if t==s else \"NO\")", "coverage": [">", ">", ">"]}, "2643": {"id": 2643, "code": "s={1,7,9,4}\nt = {0, 9, 4, 8}\nprint(\"YES\" if t==s else \"NO\")", "coverage": [">", ">", ">"]}, "2644": {"id": 2644, "code": "a = 1;b = 7;c = 9;d = 4\nif a*b*c*d==1*9*7*4:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2645": {"id": 2645, "code": "a = 1;b = 9;c = 7;d = 4\nif a*b*c*d==1*9*7*4:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2646": {"id": 2646, "code": "a = 1;b = 2;c = 9;d = 1\nif a*b*c*d==1*9*7*4:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2647": {"id": 2647, "code": "a = 4;b = 9;c = 0;d = 8\nif a*b*c*d==1*9*7*4:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2648": {"id": 2648, "code": "a = \"1 7 9 4\"\nnum1 = a.count(\"1\")\nnum9 = a.count(\"9\")\nnum7 = a.count(\"7\")\nnum4 = a.count(\"4\")\nif num1 == 1 and num9 == 1 and num7 == 1 and num4 == 1:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2649": {"id": 2649, "code": "a = \"1 9 7 4\"\nnum1 = a.count(\"1\")\nnum9 = a.count(\"9\")\nnum7 = a.count(\"7\")\nnum4 = a.count(\"4\")\nif num1 == 1 and num9 == 1 and num7 == 1 and num4 == 1:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2650": {"id": 2650, "code": "a = \"1 2 9 1\"\nnum1 = a.count(\"1\")\nnum9 = a.count(\"9\")\nnum7 = a.count(\"7\")\nnum4 = a.count(\"4\")\nif num1 == 1 and num9 == 1 and num7 == 1 and num4 == 1:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2651": {"id": 2651, "code": "a = \"4 9 0 8\"\nnum1 = a.count(\"1\")\nnum9 = a.count(\"9\")\nnum7 = a.count(\"7\")\nnum4 = a.count(\"4\")\nif num1 == 1 and num9 == 1 and num7 == 1 and num4 == 1:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2652": {"id": 2652, "code": "a = {1, 4, 9, 7}\nif a=={1,9,7,4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2653": {"id": 2653, "code": "a = {1, 4, 9, 7}\nif a=={1,9,7,4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2654": {"id": 2654, "code": "a = {1, 2, 9}\nif a=={1,9,7,4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2655": {"id": 2655, "code": "a = {0, 9, 4, 8}\nif a=={1,9,7,4}:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2656": {"id": 2656, "code": "n = \"1 7 9 4\"\nif n.count('1') == 1 and n.count('9') == 1 and n.count('7') == 1 and n.count('4') == 1:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2657": {"id": 2657, "code": "n = \"1 9 7 4\"\nif n.count('1') == 1 and n.count('9') == 1 and n.count('7') == 1 and n.count('4') == 1:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2658": {"id": 2658, "code": "n = \"1 2 9 1\"\nif n.count('1') == 1 and n.count('9') == 1 and n.count('7') == 1 and n.count('4') == 1:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2659": {"id": 2659, "code": "n = \"4 9 0 8\"\nif n.count('1') == 1 and n.count('9') == 1 and n.count('7') == 1 and n.count('4') == 1:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2660": {"id": 2660, "code": "if sorted(list(map(int,\"1 7 9 4\".split())))==[1,4,7,9]:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", "!", "!"]}, "2661": {"id": 2661, "code": "if sorted(list(map(int,\"1 9 7 4\".split())))==[1,4,7,9]:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", "!", "!"]}, "2662": {"id": 2662, "code": "if sorted(list(map(int,\"1 2 9 1\".split())))==[1,4,7,9]:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", "!", "!", ">"]}, "2663": {"id": 2663, "code": "if sorted(list(map(int,\"4 9 0 8\".split())))==[1,4,7,9]:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", "!", "!", ">"]}, "2664": {"id": 2664, "code": "import sys\ndef input(): return \"1 7 9 4\".strip()\ndef resolve():\n    l = {1, 4, 9, 7}\n    if l=={1,7,9,4}:\n        print('YES')\n    else:\n        print('NO')\nresolve()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2665": {"id": 2665, "code": "import sys\ndef input(): return \"1 9 7 4\".strip()\ndef resolve():\n    l = {1, 4, 9, 7}\n    if l=={1,7,9,4}:\n        print('YES')\n    else:\n        print('NO')\nresolve()", "coverage": [">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2666": {"id": 2666, "code": "import sys\ndef input(): return \"1 2 9 1\".strip()\ndef resolve():\n    l = {1, 2, 9}\n    if l=={1,7,9,4}:\n        print('YES')\n    else:\n        print('NO')\nresolve()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "2667": {"id": 2667, "code": "import sys\ndef input(): return \"4 9 0 8\".strip()\ndef resolve():\n    l = {0, 9, 4, 8}\n    if l=={1,7,9,4}:\n        print('YES')\n    else:\n        print('NO')\nresolve()", "coverage": [">", ">", ">", ">", ">", "!", "!", ">", ">"]}, "2668": {"id": 2668, "code": "n = {1, 4, 9, 7}\nif {1, 9, 7, 4} == n:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2669": {"id": 2669, "code": "n = {1, 4, 9, 7}\nif {1, 9, 7, 4} == n:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2670": {"id": 2670, "code": "n = {1, 2, 9}\nif {1, 9, 7, 4} == n:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2671": {"id": 2671, "code": "n = {0, 9, 4, 8}\nif {1, 9, 7, 4} == n:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2672": {"id": 2672, "code": "a = 1;b = 7;c = 9;d = 4\ndict = {}\ndict[a] = 1\ndict[b] = 1\ndict[c] = 1\ndict[d] = 1\nif 1 in dict and 9 in dict and 7 in dict and 4 in dict:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2673": {"id": 2673, "code": "a = 1;b = 9;c = 7;d = 4\ndict = {}\ndict[a] = 1\ndict[b] = 1\ndict[c] = 1\ndict[d] = 1\nif 1 in dict and 9 in dict and 7 in dict and 4 in dict:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", ">", "!", "!"]}, "2674": {"id": 2674, "code": "a = 1;b = 2;c = 9;d = 1\ndict = {}\ndict[a] = 1\ndict[b] = 1\ndict[c] = 1\ndict[d] = 1\nif 1 in dict and 9 in dict and 7 in dict and 4 in dict:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2675": {"id": 2675, "code": "a = 4;b = 9;c = 0;d = 8\ndict = {}\ndict[a] = 1\ndict[b] = 1\ndict[c] = 1\ndict[d] = 1\nif 1 in dict and 9 in dict and 7 in dict and 4 in dict:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", ">", ">", ">", ">", ">", "!", "!", ">"]}, "2684": {"id": 2684, "code": "n = {1, 4, 9, 7}\nif n == set({1, 7, 9, 4}):\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2685": {"id": 2685, "code": "n = {1, 4, 9, 7}\nif n == set({1, 7, 9, 4}):\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2686": {"id": 2686, "code": "n = {1, 2, 9}\nif n == set({1, 7, 9, 4}):\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2687": {"id": 2687, "code": "n = {0, 9, 4, 8}\nif n == set({1, 7, 9, 4}):\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2692": {"id": 2692, "code": "n = \"1479\"\nprint('YNEOS'[n != '1479'::2])", "coverage": [">", ">"]}, "2693": {"id": 2693, "code": "n = \"1479\"\nprint('YNEOS'[n != '1479'::2])", "coverage": [">", ">"]}, "2694": {"id": 2694, "code": "n = \"1129\"\nprint('YNEOS'[n != '1479'::2])", "coverage": [">", ">"]}, "2695": {"id": 2695, "code": "n = \"0489\"\nprint('YNEOS'[n != '1479'::2])", "coverage": [">", ">"]}, "2696": {"id": 2696, "code": "s = {1, 4, 9, 7}\nif s==set([1,7,9,4]):\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2697": {"id": 2697, "code": "s = {1, 4, 9, 7}\nif s==set([1,7,9,4]):\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2698": {"id": 2698, "code": "s = {1, 2, 9}\nif s==set([1,7,9,4]):\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2699": {"id": 2699, "code": "s = {0, 9, 4, 8}\nif s==set([1,7,9,4]):\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2700": {"id": 2700, "code": "s = \"1794\"\nif s.count(\"1\")==1 and  s.count(\"9\")==1 and  s.count(\"7\")==1 and  s.count(\"4\")==1:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2701": {"id": 2701, "code": "s = \"1974\"\nif s.count(\"1\")==1 and  s.count(\"9\")==1 and  s.count(\"7\")==1 and  s.count(\"4\")==1:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2702": {"id": 2702, "code": "s = \"1291\"\nif s.count(\"1\")==1 and  s.count(\"9\")==1 and  s.count(\"7\")==1 and  s.count(\"4\")==1:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2703": {"id": 2703, "code": "s = \"4908\"\nif s.count(\"1\")==1 and  s.count(\"9\")==1 and  s.count(\"7\")==1 and  s.count(\"4\")==1:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2704": {"id": 2704, "code": "if sorted(list(map(int, \"1 7 9 4\".split()))) == [1, 4, 7, 9]:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!"]}, "2705": {"id": 2705, "code": "if sorted(list(map(int, \"1 9 7 4\".split()))) == [1, 4, 7, 9]:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", ">", "!", "!"]}, "2706": {"id": 2706, "code": "if sorted(list(map(int, \"1 2 9 1\".split()))) == [1, 4, 7, 9]:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", "!", "!", ">"]}, "2707": {"id": 2707, "code": "if sorted(list(map(int, \"4 9 0 8\".split()))) == [1, 4, 7, 9]:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "coverage": [">", "!", "!", ">"]}, "2716": {"id": 2716, "code": "k = \"1 7 9 4\"\nif (\"1\" in k) & (\"9\" in k) & (\"7\" in k) & (\"4\" in k):\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2717": {"id": 2717, "code": "k = \"1 9 7 4\"\nif (\"1\" in k) & (\"9\" in k) & (\"7\" in k) & (\"4\" in k):\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", ">", "!", "!"]}, "2718": {"id": 2718, "code": "k = \"1 2 9 1\"\nif (\"1\" in k) & (\"9\" in k) & (\"7\" in k) & (\"4\" in k):\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2719": {"id": 2719, "code": "k = \"4 9 0 8\"\nif (\"1\" in k) & (\"9\" in k) & (\"7\" in k) & (\"4\" in k):\n  print(\"YES\")\nelse:\n  print(\"NO\")", "coverage": [">", ">", "!", "!", ">"]}, "2728": {"id": 2728, "code": "n = {1, 4, 9, 7}\nprint('YNEOS'[n!={1,9,7,4}::2])", "coverage": [">", ">"]}, "2729": {"id": 2729, "code": "n = {1, 4, 9, 7}\nprint('YNEOS'[n!={1,9,7,4}::2])", "coverage": [">", ">"]}, "2730": {"id": 2730, "code": "n = {1, 2, 9}\nprint('YNEOS'[n!={1,9,7,4}::2])", "coverage": [">", ">"]}, "2731": {"id": 2731, "code": "n = {0, 9, 4, 8}\nprint('YNEOS'[n!={1,9,7,4}::2])", "coverage": [">", ">"]}, "2732": {"id": 2732, "code": "n = 1;a = 7;b = 9;c = 4\nans='NO'\nif n==1 or a==1 or b==1 or c==1:\n    if n==9 or a==9 or b==9 or c==9:\n        if n==7 or a==7 or b==7 or c==7:\n            if n==4 or a==4 or b==4 or c==4:\n                ans='YES'\nprint(ans)                ", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "2733": {"id": 2733, "code": "n = 1;a = 9;b = 7;c = 4\nans='NO'\nif n==1 or a==1 or b==1 or c==1:\n    if n==9 or a==9 or b==9 or c==9:\n        if n==7 or a==7 or b==7 or c==7:\n            if n==4 or a==4 or b==4 or c==4:\n                ans='YES'\nprint(ans)                ", "coverage": [">", ">", ">", ">", ">", ">", ">", ">"]}, "2734": {"id": 2734, "code": "n = 1;a = 2;b = 9;c = 1\nans='NO'\nif n==1 or a==1 or b==1 or c==1:\n    if n==9 or a==9 or b==9 or c==9:\n        if n==7 or a==7 or b==7 or c==7:\n            if n==4 or a==4 or b==4 or c==4:\n                ans='YES'\nprint(ans)                ", "coverage": [">", ">", ">", ">", ">", "!", "!", ">"]}, "2735": {"id": 2735, "code": "n = 4;a = 9;b = 0;c = 8\nans='NO'\nif n==1 or a==1 or b==1 or c==1:\n    if n==9 or a==9 or b==9 or c==9:\n        if n==7 or a==7 or b==7 or c==7:\n            if n==4 or a==4 or b==4 or c==4:\n                ans='YES'\nprint(ans)                ", "coverage": [">", ">", ">", "!", "!", "!", "!", ">"]}, "2740": {"id": 2740, "code": "N = (1, 7, 9, 4)\nif 1 in N and 9 in N and 7 in N and 4 in N:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2741": {"id": 2741, "code": "N = (1, 9, 7, 4)\nif 1 in N and 9 in N and 7 in N and 4 in N:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2742": {"id": 2742, "code": "N = (1, 2, 9, 1)\nif 1 in N and 9 in N and 7 in N and 4 in N:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2743": {"id": 2743, "code": "N = (4, 9, 0, 8)\nif 1 in N and 9 in N and 7 in N and 4 in N:\n    print('YES')\nelse:\n    print('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2744": {"id": 2744, "code": "def resolve():\n    l = {1, 4, 9, 7}\n    if l == {1, 7, 9, 4}:\n        print('YES')\n    else:\n        print('NO')\nresolve()", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "2745": {"id": 2745, "code": "def resolve():\n    l = {1, 4, 9, 7}\n    if l == {1, 7, 9, 4}:\n        print('YES')\n    else:\n        print('NO')\nresolve()", "coverage": [">", ">", ">", ">", "!", "!", ">"]}, "2746": {"id": 2746, "code": "def resolve():\n    l = {1, 2, 9}\n    if l == {1, 7, 9, 4}:\n        print('YES')\n    else:\n        print('NO')\nresolve()", "coverage": [">", ">", ">", "!", "!", ">", ">"]}, "2747": {"id": 2747, "code": "def resolve():\n    l = {0, 9, 4, 8}\n    if l == {1, 7, 9, 4}:\n        print('YES')\n    else:\n        print('NO')\nresolve()", "coverage": [">", ">", ">", "!", "!", ">", ">"]}, "2748": {"id": 2748, "code": "if sorted(map(int, \"1 7 9 4\".split())) == [1, 4, 7, 9]:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", "!", "!"]}, "2749": {"id": 2749, "code": "if sorted(map(int, \"1 9 7 4\".split())) == [1, 4, 7, 9]:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", ">", "!", "!"]}, "2750": {"id": 2750, "code": "if sorted(map(int, \"1 2 9 1\".split())) == [1, 4, 7, 9]:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", "!", "!", ">"]}, "2751": {"id": 2751, "code": "if sorted(map(int, \"4 9 0 8\".split())) == [1, 4, 7, 9]:\n  print('YES')\nelse:\n  print('NO')", "coverage": [">", "!", "!", ">"]}, "2752": {"id": 2752, "code": "a = \"1479\"\nif(a=='1479'):\n\tprint('YES')\nelse:\n\tprint('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2753": {"id": 2753, "code": "a = \"1479\"\nif(a=='1479'):\n\tprint('YES')\nelse:\n\tprint('NO')", "coverage": [">", ">", ">", "!", "!"]}, "2754": {"id": 2754, "code": "a = \"1129\"\nif(a=='1479'):\n\tprint('YES')\nelse:\n\tprint('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2755": {"id": 2755, "code": "a = \"0489\"\nif(a=='1479'):\n\tprint('YES')\nelse:\n\tprint('NO')", "coverage": [">", ">", "!", "!", ">"]}, "2756": {"id": 2756, "code": "a = \"1479\"\nprint(\"YES\" if a==\"1479\" else \"NO\")", "coverage": [">", ">"]}, "2757": {"id": 2757, "code": "a = \"1479\"\nprint(\"YES\" if a==\"1479\" else \"NO\")", "coverage": [">", ">"]}, "2758": {"id": 2758, "code": "a = \"1129\"\nprint(\"YES\" if a==\"1479\" else \"NO\")", "coverage": [">", ">"]}, "2759": {"id": 2759, "code": "a = \"0489\"\nprint(\"YES\" if a==\"1479\" else \"NO\")", "coverage": [">", ">"]}, "2760": {"id": 2760, "code": "def main():\n    N = {'9', '4', '1', '7'}\n    if set(['1', '9', '7', '4']) == N:\n        print('YES')\n    else:\n        print('NO')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "2761": {"id": 2761, "code": "def main():\n    N = {'9', '4', '1', '7'}\n    if set(['1', '9', '7', '4']) == N:\n        print('YES')\n    else:\n        print('NO')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", ">", "!", "!", ">", ">"]}, "2762": {"id": 2762, "code": "def main():\n    N = {'9', '2', '1'}\n    if set(['1', '9', '7', '4']) == N:\n        print('YES')\n    else:\n        print('NO')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", "!", "!", ">", ">", ">"]}, "2763": {"id": 2763, "code": "def main():\n    N = {'9', '4', '0', '8'}\n    if set(['1', '9', '7', '4']) == N:\n        print('YES')\n    else:\n        print('NO')\nif __name__ == '__main__':\n    main()", "coverage": [">", ">", ">", "!", "!", ">", ">", ">"]}}